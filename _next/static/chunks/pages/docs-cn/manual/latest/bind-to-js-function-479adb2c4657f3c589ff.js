(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[65214],{17375:function(e,n,t){"use strict";function a(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}t.d(n,{Z:function(){return a}})},89004:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return d}});var a=t(17375),r=t(96156),i=(t(67294),t(3905));function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){(0,r.Z)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var p,u=(p="CodeTab",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",o({},e))}),s={};function d(e){var n=e.components,t=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",o(o(o({},s),t),{},{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",o({},{id:"function--\u51fd\u6570"}),"Function | \u51fd\u6570"),(0,i.kt)("p",null,"Binding a JS function is like binding any other value:"),(0,i.kt)("p",null,"\u7ed1\u5b9a\u4e00\u4e2aJS\u51fd\u6570\u548c\u7ed1\u5b9a\u5176\u4ed6\u503c\u7c7b\u578b\u4e00\u6837\uff1a"),(0,i.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'// Import nodejs\' path.dirname\n@module("path") external dirname: string => string = "dirname"\nlet root = dirname("/User/github") // returns "User"\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'var Path = require("path");\nvar root = Path.dirname("/User/github");\n'))),(0,i.kt)("p",null,"We also expose a few special features, described below."),(0,i.kt)("p",null,"\u6211\u4eec\u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e9b\u989d\u5916\u7684\u8bed\u8a00\u7279\u6027\uff0c\u5982\u4e0b\u6240\u8ff0\u3002"),(0,i.kt)("h2",o({},{id:"labeled-arguments--\u6807\u7b7e\u53c2\u6570"}),"Labeled Arguments | \u6807\u7b7e\u53c2\u6570"),(0,i.kt)("p",null,"ReScript has ",(0,i.kt)("a",o({parentName:"p"},{href:"function.md#labeled-arguments"}),"labeled arguments")," (that can also be optional). These work on an ",(0,i.kt)("inlineCode",{parentName:"p"},"external")," too! You'd use them to ",(0,i.kt)("em",{parentName:"p"},"fix")," a JS function's unclear usage. Assuming we're modeling this:"),(0,i.kt)("p",null,"Rescript \u62e5\u6709",(0,i.kt)("a",o({parentName:"p"},{href:"function.md#labeled-arguments"}),"\u6807\u7b7e\u53c2\u6570"),"\uff08\u5b83\u4e5f\u662f\u53ef\u9009\u7684\uff09\u3002\u6807\u7b7e\u53c2\u6570\u540c\u6837\u53ef\u4ee5\u4f5c\u7528\u4e8e",(0,i.kt)("inlineCode",{parentName:"p"},"external"),"\u8bed\u6cd5\uff01\u4f60\u53ef\u4ee5\u4f7f\u7528\u6807\u7b7e\u53c2\u6570\u53bb ",(0,i.kt)("em",{parentName:"p"},"\u907f\u514d")," \u51fd\u6570\u5f62\u53c2\u4e0d\u660e\u786e\u7684\u4f20\u9012\u3002\u5047\u8bbe\u6211\u4eec\u6709\u4e0b\u9762\u7684\u4f7f\u7528\u573a\u666f\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"// MyGame.js\n\nfunction draw(x, y, border) {\n   // suppose `border` is optional and defaults to false\n}\ndraw(10, 20)\ndraw(20, 20, true)\n")),(0,i.kt)("p",null,"It'd be nice if on ReScript's side, we can bind & call ",(0,i.kt)("inlineCode",{parentName:"p"},"draw")," while labeling things a bit:"),(0,i.kt)("p",null,"\u5728Rescript\u4e2d\uff0c\u6211\u4eec\u4e3a\u7a0d\u5fae\u52a0\u70b9\u6807\u7b7e\uff0c\u5c31\u53ef\u4ee5\u8f7b\u6613\u5730\u7ed1\u5b9a&\u8c03\u7528 ",(0,i.kt)("inlineCode",{parentName:"p"},"draw")," \u51fd\u6570\uff1a "),(0,i.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'@module("MyGame")\nexternal draw: (~x: int, ~y: int, ~border: bool=?, unit) => unit = "draw"\n\ndraw(~x=10, ~y=20, ~border=true, ())\ndraw(~x=10, ~y=20, ())\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'var MyGame = require("MyGame");\n\nMyGame.draw(10, 20, true);\nMyGame.draw(10, 20, undefined);\n'))),(0,i.kt)("p",null,"We've compiled to the same function, but now the usage is much clearer on the ReScript side thanks to labels!"),(0,i.kt)("p",null,"\u7f16\u8bd1\u4e4b\u540e\u6211\u4eec\u4f1a\u5f97\u5230\u548cJS\u4fa7\u4e00\u6837\u7684\u51fd\u6570\uff0c\u4f46\u6709\u4e86\u6807\u7b7e\u8bed\u6cd5\u7684\u652f\u6301\uff0c\u5728ReScript\u4fa7\u7ed9\u51fd\u6570\u4f20\u53c2\u65f6\u5374\u6e05\u6670\u7684\u591a\uff01"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),": in this particular case, you need a unit, ",(0,i.kt)("inlineCode",{parentName:"p"},"()")," after ",(0,i.kt)("inlineCode",{parentName:"p"},"border"),", since ",(0,i.kt)("inlineCode",{parentName:"p"},"border")," is an ",(0,i.kt)("a",o({parentName:"p"},{href:"function.md#optional-labeled-arguments"}),"optional argument at the last position"),". Not having a unit to indicate you've finished applying the function would generate a warning."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6ce8\u610f"),"\uff1a\u5728\u8fd9\u79cd\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u4f60\u9700\u8981\u4e00\u4e2a unit \u7c7b\u578b ",(0,i.kt)("inlineCode",{parentName:"p"},"()")," \u5e76\u653e\u5728 ",(0,i.kt)("inlineCode",{parentName:"p"},"border"),"\u4e4b\u540e\uff0c\u56e0\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"border")," \u662f",(0,i.kt)("a",o({parentName:"p"},{href:"function.md#optional-labeled-arguments"}),"\u6700\u540e\u4e00\u4e2a\u53ef\u9009\u7684\u53c2\u6570"),"\u3002\u5982\u679c\u6ca1\u6709\u4e00\u4e2a unit \u7c7b\u578b\u7684\u53c2\u6570\u53bb\u7ec8\u6b62\u51fd\u6570\u7684\u5b9e\u53c2\u4f20\u9012\uff0c\u90a3\u4e48\u5c06\u4f1a\u5f97\u5230\u4e00\u4e2a\u8b66\u544a\u3002"),(0,i.kt)("p",null,"Note that you can freely reorder the labels on the ReScript side; they'll always correctly appear in their declaration order in the JavaScript output:"),(0,i.kt)("p",null,"\u6ce8\u610f\u4f60\u53ef\u4ee5\u81ea\u7531\u5730\u5728ReScript\u5c06\u6807\u7b7e\u53c2\u6570\u91cd\u65b0\u6392\u5e8f\uff1b\u5b83\u4eec\u4f1a\u6b63\u786e\u5730\u6309\u7167\u53c2\u6570\u58f0\u660e\u7684\u987a\u5e8f\u7f16\u8bd1\u6210JavaScrpt:"),(0,i.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'@module("MyGame")\nexternal draw: (~x: int, ~y: int, ~border: bool=?, unit) => unit = "draw"\n\ndraw(~x=10, ~y=20, ())\ndraw(~y=20, ~x=10, ())\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'var MyGame = require("MyGame");\n\nMyGame.draw(10, 20, undefined);\nMyGame.draw(10, 20, undefined);\n'))),(0,i.kt)("h2",o({},{id:"object-method--\u5bf9\u8c61\u65b9\u6cd5"}),"Object Method | \u5bf9\u8c61\u65b9\u6cd5"),(0,i.kt)("p",null,"Functions attached to a JS objects (other than JS modules) require a special way of binding to them, using ",(0,i.kt)("inlineCode",{parentName:"p"},"send"),":"),(0,i.kt)("p",null,"\u5f53\u9700\u8981\u5c06\u51fd\u6570\u6dfb\u52a0\u5230JS\u7684\u5bf9\u8c61\u4e2d\uff08JS \u6a21\u5757\u9664\u5916\uff09\uff0c\u987b\u8981\u4f7f\u7528\u4e00\u79cd\u7279\u6b8a\u7684\u65b9\u5f0f",(0,i.kt)("inlineCode",{parentName:"p"},"send"),"\uff1a"),(0,i.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'type document // abstract type for a document object\n@send external getElementById: (document, string) => Dom.element = "getElementById"\n@val external doc: document = "document"\n\nlet el = getElementById(doc, "myId")\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'var el = document.getElementById("myId");\n'))),(0,i.kt)("p",null,"In a ",(0,i.kt)("inlineCode",{parentName:"p"},"send"),", the object is always the first argument. Actual arguments of the method follow (this is a bit what modern OOP objects are really)."),(0,i.kt)("p",null,"\u518d\u4e00\u6b21",(0,i.kt)("inlineCode",{parentName:"p"},"send"),"\u58f0\u660e\u4e2d\uff0c\u76ee\u6807\u5bf9\u8c61\u603b\u662f\u4ee5\u7b2c\u4e00\u4e2a\u53c2\u6570\u8fdb\u884c\u4f20\u9012\uff0c\u800c\u771f\u6b63\u7684\u51fd\u6570\u7684\u53c2\u6570\uff0c\u653e\u5728\u5bf9\u8c61\u7684\u540e\u9762\u3002\uff08\u8fd9\u6709\u70b9\u50cf\u73b0\u4ee3 OOP \u7684\u5bf9\u8c61\uff09"),(0,i.kt)("h3",o({},{id:"chaining--\u94fe\u5f0f\u8c03\u7528"}),"Chaining | \u94fe\u5f0f\u8c03\u7528"),(0,i.kt)("p",null,"Ever used ",(0,i.kt)("inlineCode",{parentName:"p"},"foo().bar().baz()"),' chaining ("fluent api") in JS OOP? We can model that in ReScript too, through the ',(0,i.kt)("a",o({parentName:"p"},{href:"pipe.md"}),"pipe operator"),"."),(0,i.kt)("p",null,"\u662f\u5426\u5728JS OOP\u4e2d\u4f7f\u7528\u8fc7 ",(0,i.kt)("inlineCode",{parentName:"p"},"foo().bar().baz()")," \u8fd9\u79cd\u94fe\u5f0f\u8c03\u7528\uff08\u201c\u6d41\u5f0fapi\u201d\uff09\uff1f\u901a\u8fc7\u4f7f\u7528",(0,i.kt)("a",o({parentName:"p"},{href:"pipe.md"}),"\u7ba1\u9053\u64cd\u4f5c\u7b26"),"\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728Rescript\u4e2d\u8fd9\u6837\u7528\u3002"),(0,i.kt)("h2",o({},{id:"variadic-function-arguments--\u53ef\u53d8\u51fd\u6570\u53c2\u6570"}),"Variadic Function Arguments | \u53ef\u53d8\u51fd\u6570\u53c2\u6570"),(0,i.kt)("p",null,"You might have JS functions that take an arbitrary amount of arguments. ReScript supports modeling those, under the condition that the arbitrary arguments part is homogenous (aka of the same type). If so, add ",(0,i.kt)("inlineCode",{parentName:"p"},"variadic")," to your ",(0,i.kt)("inlineCode",{parentName:"p"},"external"),"."),(0,i.kt)("p",null,"\u4f60\u6216\u8bb8\u6709\u90a3\u79cd\u53ef\u4ee5\u4f20\u9012\u4efb\u610f\u6570\u91cf\u53c2\u6570\u7684JS\u51fd\u6570\u3002\u5728\u8fd9\u4e9b\u4e0d\u5b9a\u6570\u91cf\u53c2\u6570\u6027\u8d28\u76f8\u540c\uff08\u5373\u5177\u6709\u76f8\u540c\u7684\u7c7b\u578b\uff09\u7684\u60c5\u51b5\u4e0b\uff0cRescript\u4e5f\u652f\u6301\u4f20\u9012\u53ef\u53d8\u53c2\u6570\u3002\u5982\u679c\u9700\u8981\uff0c\u6dfb\u52a0 ",(0,i.kt)("inlineCode",{parentName:"p"},"variadic")," \u5230\u4f60\u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"external"),"\u3002"),(0,i.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'@module("path") @variadic\nexternal join: array<string> => string = "join"\n\nlet v = join(["a", "b"])\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'var Path = require("path");\nvar v = Path.join("a", "b");\n'))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"module")," will be explained in ",(0,i.kt)("a",o({parentName:"p"},{href:"import-from-export-to-js.md"}),"Import from/Export to JS"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"module")," \u5c06\u4f1a\u5728",(0,i.kt)("a",o({parentName:"p"},{href:"import-from-export-to-js.md"}),"Import from/Export to JS"),"\u7ae0\u8282\u4e2d\u8fdb\u884c\u89e3\u91ca\u3002"),(0,i.kt)("h2",o({},{id:"modeling-polymorphic-function--\u591a\u6001\u51fd\u6570"}),"Modeling Polymorphic Function | \u591a\u6001\u51fd\u6570"),(0,i.kt)("p",null,"Apart from the above special-case, JS function in general are often arbitrary overloaded in terms of argument types and number. How would you bind to those?"),(0,i.kt)("p",null,"\u9664\u4e86\u4e0a\u9762\u6240\u8bf4\u5730\u60c5\u51b5\uff0cJS\u51fd\u6570\u901a\u5e38\u5728\u53c2\u6570\u7c7b\u578b\u548c\u6570\u91cf\u65b9\u9762\u662f\u53ef\u4ee5\u4efb\u610f\u91cd\u8f7d\u7684\u3002\u4f60\u8be5\u600e\u6837\u53bb\u4e3a\u8fd9\u4e9b\u51fd\u6570\u4f5c\u7ed1\u5b9a\u5462\uff1f"),(0,i.kt)("h3",o({},{id:"trick-1-multiple-externals--\u6280\u5de7-1\uff1a"}),"Trick 1: Multiple ",(0,i.kt)("inlineCode",{parentName:"h3"},"external"),"s | \u6280\u5de7 1\uff1a"),(0,i.kt)("p",null,"If you can exhaustively enumerate the many forms an overloaded JS function can take, simply bind to each differently:"),(0,i.kt)("p",null,"\u5982\u679c\u60a8\u53ef\u4ee5\u8be6\u5c3d\u5730\u5217\u4e3e\u4e00\u4e2a\u91cd\u8f7dJS\u51fd\u6570\u53ef\u91c7\u7528\u5f62\u5f0f\uff0c\u53ea\u9700\u5206\u522b\u7ed1\u5b9a\uff1a"),(0,i.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'@module("MyGame") external drawCat: unit => unit = "draw"\n@module("MyGame") external drawDog: (~giveName: string) => unit = "draw"\n@module("MyGame") external draw: (string, ~useRandomAnimal: bool) => unit = "draw"\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"// Empty output\n"))),(0,i.kt)("p",null,"Note how all three externals bind to the same JS function, ",(0,i.kt)("inlineCode",{parentName:"p"},"draw"),"."),(0,i.kt)("p",null,"\u6ce8\u610f\u6240\u6709\u4e09\u4e2a\u5916\u90e8\u5982\u4f55\u7ed1\u5b9a\u5230\u540c\u4e00\u4e2aJS\u51fd\u6570\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"draw")),(0,i.kt)("h3",o({},{id:"trick-2-polymorphic-variant--unwrap--\u6280\u5de7-2\uff1a\u591a\u6001\u53d8\u91cf--unwrap"}),"Trick 2: Polymorphic Variant + ",(0,i.kt)("inlineCode",{parentName:"h3"},"unwrap")," | \u6280\u5de7 2\uff1a\u591a\u6001\u53d8\u91cf + ",(0,i.kt)("inlineCode",{parentName:"h3"},"unwrap")),(0,i.kt)("p",null,'If you have the irresistible urge of saying "if only this JS function argument was a variant instead of informally being either ',(0,i.kt)("inlineCode",{parentName:"p"},"string")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"int"),'", then good news: we do provide such ',(0,i.kt)("inlineCode",{parentName:"p"},"external")," features through annotating a parameter as a polymorphic variant! Assuming you have the following JS function you'd like to bind to:"),(0,i.kt)("p",null,"\u5982\u679c\u4f60\u6709\u4e0d\u53ef\u6297\u62d2\u7684\u51b2\u52a8\u8bf4\u201c\u5982\u679c\u8fd9\u4e2aJS\u51fd\u6570\u53c2\u6570\u662f\u4e00\u4e2a\u53d8\u91cf\uff0c\u800c\u4e0d\u662f\u5b57\u7b26\u4e32\u6216int\u7c7b\u578b\u201d\uff0c\u90a3\u4e48\u597d\u6d88\u606f\u662f\uff1a\u6211\u4eec\u786e\u5b9e\u901a\u8fc7\u5c06\u53c2\u6570\u6ce8\u89e3\u4e3a\u591a\u6001\u53d8\u91cf\u6765\u63d0\u4f9b\u8fd9\u6837\u7684\u5916\u90e8\u7279\u6027\uff01\u5047\u8bbe\u60a8\u5e0c\u671b\u7ed1\u5b9a\u4ee5\u4e0bJS\u51fd\u6570\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'function padLeft(value, padding) {\n  if (typeof padding === "number") {\n    return Array(padding + 1).join(" ") + value;\n  }\n  if (typeof padding === "string") {\n    return padding + value;\n  }\n  throw new Error(`Expected string or number, got \'${padding}\'.`);\n}\n')),(0,i.kt)("p",null,"Here, ",(0,i.kt)("inlineCode",{parentName:"p"},"padding")," is really conceptually a variant. Let's model it as such."),(0,i.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'@val\nexternal padLeft: (\n  string,\n  @unwrap [\n    | #Str(string)\n    | #Int(int)\n  ])\n  => string = "padLeft"\npadLeft("Hello World", #Int(4))\npadLeft("Hello World", #Str("Message from ReScript: "))\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'padLeft("Hello World", 4);\npadLeft("Hello World", "Message from ReScript: ");\n'))),(0,i.kt)("p",null,"Obviously, the JS side couldn't have an argument that's a polymorphic variant! But here, we're just piggy backing on poly variants' type checking and syntax. The secret is the ",(0,i.kt)("inlineCode",{parentName:"p"},"@unwrap")," annotation on the type. It strips the variant constructors and compile to just the payload's value. See the output."),(0,i.kt)("p",null,"\u663e\u7136\uff0cJS\u4fa7\u6ca1\u6709\u591a\u6001\u53d8\u91cf\u7684\u6982\u5ff5\uff01\u4f46\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ea\u662f\u4f9d\u9760poly\u53d8\u91cf\u7684\u7c7b\u578b\u68c0\u67e5\u548c\u8bed\u6cd5\u3002\u5b9e\u9645\u4e0a\u4ec5\u4ec5\u662f\u9488\u5bf9\u7c7b\u578b\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"@unwrap"),"\u6ce8\u89e3\uff0c\u7f16\u8bd1\u65f6\u4f1a\u53bb\u6389\u53d8\u91cf\u7684\u6784\u9020\u51fd\u6570\u5e76\u4ec5\u4ec5\u7559\u4e0bpayload\u4e2d\u771f\u5b9e\u7684\u503c\u3002\u8bf7\u53c2\u8003\u8f93\u51fa\u3002"),(0,i.kt)("h2",o({},{id:"constrain-arguments-better--\u66f4\u4f73\u7684\u53c2\u6570\u7ea6\u675f"}),"Constrain Arguments Better | \u66f4\u4f73\u7684\u53c2\u6570\u7ea6\u675f"),(0,i.kt)("p",null,"Consider the Node ",(0,i.kt)("inlineCode",{parentName:"p"},"fs.readFileSync"),"'s second argument. It can take a string, but really only a defined set: ",(0,i.kt)("inlineCode",{parentName:"p"},'"ascii"'),", ",(0,i.kt)("inlineCode",{parentName:"p"},'"utf8"'),", etc. You can still bind it as a string, but we can use poly variants + ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," to ensure that our usage's more correct:"),(0,i.kt)("p",null,"\u60f3\u4e00\u4e0bNode.js\u4e2d ",(0,i.kt)("inlineCode",{parentName:"p"},"fs.readFileSync")," \u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u4f60\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5b83\u662f\u5df2\u7ecf\u9884\u5b9a\u4e49\u7684\u5b57\u7b26\u7f16\u7801\u96c6\u5408\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},'"ascii"'),", ",(0,i.kt)("inlineCode",{parentName:"p"},'"utf8"'),",\u7b49\u7b49\u3002\u4f60\u53ef\u4ee5\u4ee5\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u8fdb\u884c\u7ed1\u5b9a\uff0c\u4f46\u662f\uff0c\u6211\u4eec\u80fd\u591f\u4f7f\u7528 poly \u53d8\u91cf + ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," \u53bb\u8fdb\u4e00\u6b65\u63d0\u9ad8\u8c03\u7528\u8005\u7684\u4f20\u53c2\u7684\u6b63\u786e\u6027\u3002"),(0,i.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'@module("fs")\nexternal readFileSync: (\n  ~name: string,\n  @string [\n    | #utf8\n    | @as("ascii") #useAscii\n  ],\n) => string = "readFileSync"\n\nreadFileSync(~name="xx.txt", #useAscii)\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'var Fs = require("fs");\nFs.readFileSync("xx.txt", "ascii");\n'))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Attaching ",(0,i.kt)("inlineCode",{parentName:"p"},"@string")," to the whole poly variant type makes its constructor compile to a string of the same name.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Attaching a ",(0,i.kt)("inlineCode",{parentName:"p"},'@as("bla")')," to a constructor lets you customize the final string.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u5c06",(0,i.kt)("inlineCode",{parentName:"p"},"@string"),"\u9644\u52a0\u5230\u6574\u4e2apoly\u53d8\u91cf\u7c7b\u578b\u53ef\u4ee5\u4f7f\u5176\u6784\u9020\u51fd\u6570\u7f16\u8bd1\u4e3a\u540c\u540d\u5b57\u7b26\u4e32\u3002")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u5c06",(0,i.kt)("inlineCode",{parentName:"p"},'@as("bla")'),"\u9644\u52a0\u5230\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u8ba9\u4f60\u81ea\u5b9a\u4e49\u6700\u7ec8\u7684\u5b57\u7b26\u4e32\u3002"))),(0,i.kt)("p",null,"And now, passing something like ",(0,i.kt)("inlineCode",{parentName:"p"},'"myOwnUnicode"')," or other variant constructor names to ",(0,i.kt)("inlineCode",{parentName:"p"},"readFileSync")," would correctly error."),(0,i.kt)("p",null,"\u73b0\u5728\uff0c\u4f20\u9012\u7c7b\u4f3c",(0,i.kt)("inlineCode",{parentName:"p"},'"myOwnUnicode"'),"\u6216\u8005\u5176\u4ed6\u53d8\u91cf\u6784\u9020\u51fd\u6570\u7ed9",(0,i.kt)("inlineCode",{parentName:"p"},"readFileSync"),"\u51fd\u6570\u5c31\u4f1a\u62a5\u9519\u3002"),(0,i.kt)("p",null,"Aside from string, you can also compile an argument to an int, using ",(0,i.kt)("inlineCode",{parentName:"p"},"int")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," in a similar way:"),(0,i.kt)("p",null,"\u9664\u4e86\u5b57\u7b26\u4e32\uff0c\u4f60\u4e5f\u53ef\u4ee5\u628a\u53c2\u6570\u7f16\u8bd1\u6210\u6574\u578b\uff0c\u7528\u76f8\u4f3c\u7684\u4ee3\u7801\uff0c\u628a",(0,i.kt)("inlineCode",{parentName:"p"},"int"),"\u66ff\u6362\u6210",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"\u5373\u53ef\uff1a"),(0,i.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'@val\nexternal testIntType: (\n  @int [\n    | #onClosed\n    | @as(20) #onOpen\n    | #inBinary\n  ])\n  => int = "testIntType"\ntestIntType(#inBinary)\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"testIntType(21);\n"))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"onClosed")," compiles to ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"onOpen")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"20")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"inBinary")," to ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"21")),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"onClosed"),"\u7f16\u8bd1\u6210 ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"onOpen")," \u7f16\u8bd1\u6210 ",(0,i.kt)("inlineCode",{parentName:"p"},"20")," , ",(0,i.kt)("inlineCode",{parentName:"p"},"inBinary")," \u7f16\u8bd1\u6210 ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"21")),"."),(0,i.kt)("h2",o({},{id:"special-case-event-listeners--\u7279\u6b8a\u60c5\u51b5\uff1a\u4e8b\u4ef6\u76d1\u542c"}),"Special-case: Event Listeners | \u7279\u6b8a\u60c5\u51b5\uff1a\u4e8b\u4ef6\u76d1\u542c"),(0,i.kt)("p",null,"One last trick with polymorphic variants:"),(0,i.kt)("p",null,"\u6700\u540e\u4e00\u4e2a\u4f7f\u7528\u591a\u6001\u53d8\u91cf\u7684\u6280\u5de7\uff1a"),(0,i.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'type readline\n\n@send\nexternal on: (\n    readline,\n    @string [\n      | #close(unit => unit)\n      | #line(string => unit)\n    ]\n  )\n  => readline = "on"\n\nlet register = rl =>\n  rl\n  ->on(#close(event => ()))\n  ->on(#line(line => Js.log(line)));\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'function register(rl) {\n  return rl\n    .on("close", function($$event) {})\n    .on("line", function(line) {\n      console.log(line);\n    });\n}\n'))),(0,i.kt)("h2",o({},{id:"fixed-arguments--\u56fa\u5b9a\u53c2\u6570"}),"Fixed Arguments | \u56fa\u5b9a\u53c2\u6570"),(0,i.kt)("p",null,"Sometimes it's convenient to bind to a function using an ",(0,i.kt)("inlineCode",{parentName:"p"},"external"),", while passing predetermined argument values to the JS function:"),(0,i.kt)("p",null,"\u6709\u65f6\u5c06\u9884\u5b9a\u597d\u7684\u7684\u53c2\u6570\u503c\u4f20\u9012\u7ed9JS\u51fd\u6570\uff0c\u4f7f\u7528",(0,i.kt)("inlineCode",{parentName:"p"},"external"),"\u7ed1\u5b9a\u5230\u51fd\u6570\u5f88\u65b9\u4fbf\uff1a"),(0,i.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'@val\nexternal processOnExit: (\n  @as("exit") _,\n  int => unit\n) => unit = "process.on"\n\nprocessOnExit(exitCode =>\n  Js.log("error code: " ++ Js.Int.toString(exitCode))\n);\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'process.on("exit", function (exitCode) {\n  console.log("error code: " + exitCode.toString());\n});\n'))),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},'@as("exit")')," and the placeholder ",(0,i.kt)("inlineCode",{parentName:"p"},"_")," argument together indicates that you want the first argument to compile to the string ",(0,i.kt)("inlineCode",{parentName:"p"},'"exit"'),". You can also use any JSON literal with ",(0,i.kt)("inlineCode",{parentName:"p"},"as"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"@as(json`true`)"),", ",(0,i.kt)("inlineCode",{parentName:"p"},'@as(json`{"name": "John"}`)'),", etc."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},'@as("exit")'),"\u548c\u5360\u4f4d\u7b26",(0,i.kt)("inlineCode",{parentName:"p"},"_"),"\u53c2\u6570\u4e00\u8d77\u4f7f\u7528\u610f\u5473\u7740\u4f60\u60f3\u8ba9\u7b2c\u4e00\u4e2a\u53c2\u6570\u7f16\u8bd1\u4e3a\u5b57\u7b26\u4e32",(0,i.kt)("inlineCode",{parentName:"p"},'"exit"'),"\u3002\u60a8\u8fd8\u53ef\u4ee5\u5c06\u4efb\u4f55JSON\u6587\u672c\u4e0e",(0,i.kt)("inlineCode",{parentName:"p"},"as"),":",(0,i.kt)("inlineCode",{parentName:"p"},"@as(JSON`true`)"),"\u3001",(0,i.kt)("inlineCode",{parentName:"p"},'@as(JSON`{"name":"John"}`)'),"\u7b49\u4e00\u8d77\u4f7f\u7528\u3002"),(0,i.kt)("h2",o({},{id:"ignore-arguments--\u5ffd\u7565\u53c2\u6570"}),"Ignore arguments | \u5ffd\u7565\u53c2\u6570"),(0,i.kt)("p",null,'You can also explicitly "hide" ',(0,i.kt)("inlineCode",{parentName:"p"},"external")," function parameters in the JS output, which may be useful if you want to add type constraints to other parameters without impacting the JS side:"),(0,i.kt)("p",null,"\u60a8\u8fd8\u53ef\u4ee5\u5728JS\u8f93\u51fa\u4e2d\u663e\u5f0f\u5730\u201c\u9690\u85cf\u201d ",(0,i.kt)("inlineCode",{parentName:"p"},"external")," \u58f0\u660e\u7684\u51fd\u6570\u7684\u67d0\u4e2a\u53c2\u6570\uff0c\u5982\u679c\u4f60\u60f3\u5728\u4e0d\u5f71\u54cdJS\u7aef\u7684\u60c5\u51b5\u4e0b\u5411\u5176\u4ed6\u53c2\u6570\u6dfb\u52a0\u7c7b\u578b\u7ea6\u675f\uff0c\u8fd9\u4e2a\u7279\u6027\u5c31\u5f88\u5b9e\u7528\uff1a"),(0,i.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res"}),'@val external doSomething: (@ignore \'a, \'a) => unit = "doSomething"\n\ndoSomething("this only shows up in ReScript code", "test")\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'doSomething("test");\n'))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note:")," It's a pretty niche feature, mostly used to map to polymorphic JS APIs."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6ce8\u610f"),"\uff1a \u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5c0f\u4f17\u7684\u7279\u6027\uff0c\u4e3b\u8981\u7528\u4e8e\u6620\u5c04\u5230\u591a\u6001\u7684JS APIs\u3002"),(0,i.kt)("h2",o({},{id:"curry--uncurry--\u67ef\u91cc\u5316\u548c\u65e0\u67ef\u91cc\u5316"}),"Curry & Uncurry | \u67ef\u91cc\u5316\u548c\u65e0\u67ef\u91cc\u5316"),(0,i.kt)("p",null,"Curry is a delicious Indian dish. More importantly, in the context of ReScript (and functional programming in general), currying means that function taking multiple arguments can be applied a few arguments at time, until all the arguments are applied."),(0,i.kt)("p",null,"\u5496\u55b1\u662f\u4e00\u9053\u7f8e\u5473\u7684\u5370\u5ea6\u83dc\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u5728ReScript\uff08\u901a\u5e38\u5728\u51fd\u6570\u5f0f\u7f16\u7a0b\u65b9\u9762\uff09\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0ccurrying \u610f\u5473\u7740\u4e00\u4e2a\u53ef\u4ee5\u63a5\u53d7\u591a\u4e2a\u5f62\u53c2\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u4e00\u6b21\u4f20\u9012\u90e8\u5206\u53c2\u6570\uff0c\u76f4\u5230\u4f20\u9012\u4e86\u6240\u6709\u53c2\u6570\u3002"),(0,i.kt)("p",null,"See the ",(0,i.kt)("inlineCode",{parentName:"p"},"addFive")," intermediate function? ",(0,i.kt)("inlineCode",{parentName:"p"},"add"),' takes in 3 arguments but received only 1. It\'s interpreted as "currying" the argument ',(0,i.kt)("inlineCode",{parentName:"p"},"5")," and waiting for the next 2 arguments to be applied later on. Type signatures:"),(0,i.kt)("p",null,"\u770b\u5230 ",(0,i.kt)("inlineCode",{parentName:"p"},"addFive")," \u4e2d\u95f4\u51fd\u6570\u4e86\u5417\uff1f",(0,i.kt)("inlineCode",{parentName:"p"},"add")," \u63a5\u53d7 3 \u4e2a\u53c2\u6570\uff0c\u4f46\u53ea\u63a5\u6536\u52301\u4e2a\u3002\u8fd9\u79cd\u884c\u4e3a\u88ab\u89e3\u91ca\u4e3a\u201ccurring\u201d\u4e86\u4e00\u4e2a\u53c2\u65705\uff0c\u5e76\u7b49\u5f85\u540e\u97622\u4e2a\u53c2\u6570\u7684\u4f20\u9012\u3002\u7c7b\u578b\u7b7e\u540d\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let add: (int, int, int) => int\nlet addFive: (int, int) => int\nlet twelve: int\n")),(0,i.kt)("p",null,"(In a dynamic language such as JS, currying would be dangerous, since accidentally forgetting to pass an argument doesn't error at compile time)."),(0,i.kt)("p",null,"\uff08\u5728\u50cfJS\u8fd9\u6837\u7684\u52a8\u6001\u8bed\u8a00\u4e2d\uff0ccurring\u64cd\u4f5c\u662f\u6709\u98ce\u9669\u7684\uff0c\u56e0\u4e3a\u5728\u7f16\u8bd1\u65f6\u5982\u679c\u5fd8\u4e86\u4f20\u9012\u53c2\u6570\u5e76\u4e0d\u4f1a\u62a5\u9519\uff09\u3002"),(0,i.kt)("h3",o({},{id:"drawback--\u7f3a\u70b9"}),"Drawback | \u7f3a\u70b9"),(0,i.kt)("p",null,"Unfortunately, due to JS not having currying because of the aforementioned reason, it's hard for ReScript multi-argument functions to map cleanly to JS functions 100% of the time:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"When all the arguments of a function are supplied (aka no currying), ReScript does its best to to compile e.g. a 3-arguments call into a plain JS call with 3 arguments.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"If it's too hard to detect whether a function application is complete","*",", ReScript will use a runtime mechanism (the ",(0,i.kt)("inlineCode",{parentName:"p"},"Curry")," module) to curry as many args as we can and check whether the result is fully applied.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Some JS APIs like ",(0,i.kt)("inlineCode",{parentName:"p"},"throttle"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"debounce")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"promise")," might mess with context, aka use the function ",(0,i.kt)("inlineCode",{parentName:"p"},"bind")," mechanism, carry around ",(0,i.kt)("inlineCode",{parentName:"p"},"this"),", etc. Such implementation clashes with the previous currying logic."))),(0,i.kt)("p",null,"\u4e0d\u5e78\u7684\u662f\uff0c\u7531\u4e8eJS\u7531\u4e8e\u4e0a\u8ff0\u539f\u56e0\u6ca1\u6709curring\uff0cReScript\u591a\u53c2\u6570\u51fd\u6570\u5f88\u96be100%\u5730\u6e05\u6670\u5730\u6620\u5c04\u5230JS\u51fd\u6570\uff1a"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u5f53\u4e00\u4e2a\u51fd\u6570\u7684\u6240\u6709\u53c2\u6570\u90fd\u88ab\u4f20\u9012\uff08\u4e5f\u79f0\u4e3a\u65e0currying\uff09\u65f6","*","\uff0cReScript\u4f1a\u5c3d\u6700\u5927\u52aa\u529b\u7528\u6700\u4f73\u7684\u65b9\u5f0f\u8fdb\u884c\u7f16\u8bd1\uff0c\u4f8b\u5982\u62e5\u67093\u4e2a\u53c2\u6570\u7684\u51fd\u6570\u8c03\u7528\u7f16\u8bd1\u6210\u4e00\u4e2a\u4f20\u90123\u4e2a\u53d8\u91cf\u7684\u666e\u901aJS\u51fd\u6570\u8c03\u7528\u3002")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u5982\u679c\u5f88\u96be\u68c0\u6d4b\u51fd\u6570\u5e94\u7528\u662f\u5426\u6267\u884c\u5b8c\u6210\uff0cReScript\u4f1a\u4f7f\u7528\u8fd0\u884c\u65f6\u673a\u5236\uff08\u201cCurry\u201d\u6a21\u5757\uff09\u6765\u5c3d\u53ef\u80fd\u591a\u5730\u5904\u7406\u53c2\u6570\uff0c\u5e76\u68c0\u67e5\u7ed3\u679c\u662f\u5426\u6267\u884c\u5b8c\u6210\u3002")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"\u4e00\u4e9bJS API\uff08\u5982",(0,i.kt)("inlineCode",{parentName:"p"},"throttle"),"\u3001",(0,i.kt)("inlineCode",{parentName:"p"},"debounce"),"\u548c",(0,i.kt)("inlineCode",{parentName:"p"},"promise"),"\uff09\u53ef\u80fd\u4f1a\u4e0e\u4e0a\u4e0b\u6587\u53d1\u751f\u51b2\u7a81\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528\u51fd\u6570",(0,i.kt)("inlineCode",{parentName:"p"},"bind"),"\u673a\u5236\u3001\u5faa\u73af",(0,i.kt)("inlineCode",{parentName:"p"},"this"),"\u7b49\u3002\u8fd9\u79cd\u5b9e\u73b0\u65b9\u5f0f\u56de\u5408curring\u903b\u8f91\u53d1\u751f\u51b2\u7a81\u3002"))),(0,i.kt)("p",null,"*"," If the call site is typed as having 3 arguments, we sometimes don't know whether it's a function that's being curried, or if the original one indeed has only 3 arguments."),(0,i.kt)("p",null,"*","\u5982\u679c\u8c03\u7528\u70b9\u88ab\u7c7b\u578b\u58f0\u660e\u4e3a\u5177\u67093\u4e2a\u53c2\u6570\uff0c\u6211\u4eec\u6709\u65f6\u4e0d\u77e5\u9053\u5b83\u662f\u4e00\u4e2a\u6b63\u5728\u88ab\u8c03\u7528\u7684\u51fd\u6570\uff0c\u8fd8\u662f\u4e00\u4e2a\u786e\u5b9e\u53ea\u6709\u4e09\u4e2a\u53c2\u6570\u7684\u539f\u59cb\u51fd\u6570\u3002"),(0,i.kt)("p",null,"ReScript tries to do #1 as much as it can. Even when it bails and uses #2's currying mechanism, it's usually harmless."),(0,i.kt)("p",null,"ReScript\u5c1d\u8bd5\u5c3d\u53ef\u80fd\u591a\u5730\u6267\u884c\u6b65\u9aa4#1\u3002\u5373\u4f7f\u5f53#1\u8df3\u8fc7\u5e76\u4f7f\u7528#2\u7684curring\u673a\u5236\u65f6\uff0c\u901a\u5e38\u4e5f\u662f\u6ca1\u6709\u8d1f\u9762\u5f71\u54cd\u7684\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"However"),", if you encounter #3, heuristics are not good enough: you need a guaranteed way of fully applying a function, without intermediate currying steps. We provide such guarantee through the use of the ",(0,i.kt)("a",o({parentName:"p"},{href:"./function#uncurried-function"}),'"uncurrying" syntax')," on a function declaration & call site."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u7136\u800c"),"\uff0c\u5982\u679c\u4f60\u9047\u5230#3\uff0c\u8bd5\u63a2\u6cd5\u4e0d\u662f\u6700\u597d\u7684\u65b9\u6cd5\uff1a\u9700\u8981\u4e00\u79cd\u6709\u4fdd\u969c\u673a\u5236\u6765\u5b8c\u6574\u5730\u8c03\u7528\u51fd\u6570\uff0c\u800c\u4e0d\u9700\u8981\u4e2d\u95f4\u7684curring\u6b65\u9aa4\u3002\u6211\u4eec\u901a\u8fc7\u5728\u51fd\u6570\u58f0\u660e\u548c\u8c03\u7528\u70b9\u4e0a\u4f7f\u7528","[\u201cuncurring\u201d\u8bed\u6cd5]","(./function#uncurred function)\u6765\u63d0\u4f9b\u8fd9\u79cd\u4fdd\u969c\u673a\u5236\u3002"),(0,i.kt)("h3",o({},{id:"solution-use-guaranteed-uncurrying--\u89e3\u51b3\u65b9\u6848\uff1a\u4fdd\u8bc1\u65e0\u67ef\u91cc\u5316"}),"Solution: Use Guaranteed Uncurrying | \u89e3\u51b3\u65b9\u6848\uff1a\u4fdd\u8bc1\u65e0\u67ef\u91cc\u5316"),(0,i.kt)("p",null,(0,i.kt)("a",o({parentName:"p"},{href:"function.md#uncurried-function"}),"Uncurried function")," annotation also works on ",(0,i.kt)("inlineCode",{parentName:"p"},"external"),":"),(0,i.kt)("p",null,(0,i.kt)("a",o({parentName:"p"},{href:"function.md#uncurried-function"}),"Uncurried function")," \u6ce8\u89e3\u540c\u6837\u53ef\u4ee5\u5e94\u7528\u4e8e",(0,i.kt)("inlineCode",{parentName:"p"},"external"),"\uff1a"),(0,i.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'type timerId\n@val external setTimeout: ((. unit) => unit, int) => timerId = "setTimeout"\n\nlet id = setTimeout((.) => Js.log("hello"), 1000)\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'var id = setTimeout(function () {\n  console.log("hello");\n}, 1000);\n'))),(0,i.kt)("h4",o({},{id:"extra-solution--\u989d\u5916\u7684\u89e3\u51b3\u65b9\u6848"}),"Extra Solution | \u989d\u5916\u7684\u89e3\u51b3\u65b9\u6848"),(0,i.kt)("p",null,"The above solution is safe, guaranteed, and performant, but sometimes visually a little burdensome. We provide an alternative solution if:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"you're using ",(0,i.kt)("inlineCode",{parentName:"li"},"external")),(0,i.kt)("li",{parentName:"ul"},"the ",(0,i.kt)("inlineCode",{parentName:"li"},"external")," function takes in an argument that's another function"),(0,i.kt)("li",{parentName:"ul"},"you want the user ",(0,i.kt)("strong",{parentName:"li"},"not")," to need to annotate the call sites with the dot")),(0,i.kt)("p",null,"\u4e0a\u9762\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5b89\u5168\u7684\u3001\u6709\u4fdd\u8bc1\u7684\u3001\u6027\u80fd\u826f\u597d\u7684\uff0c\u4f46\u6709\u65f6\u5728\u9605\u8bfb\u4e0a\u6709\u70b9\u5fc3\u667a\u8d1f\u62c5\u3002\u5982\u679c\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u4f60\u6b63\u5728\u4f7f\u7528",(0,i.kt)("inlineCode",{parentName:"li"},"external")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"external"),"\u51fd\u6570\u63a5\u53d7\u53e6\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570"),(0,i.kt)("li",{parentName:"ul"},"\u60a8\u5e0c\u671b\u7528\u6237",(0,i.kt)("strong",{parentName:"li"},"\u4e0d\u9700\u8981"),"\u7528",(0,i.kt)("inlineCode",{parentName:"li"},"."),"\u6ce8\u91ca\u8c03\u7528\u70b9")),(0,i.kt)("p",null,"Then try ",(0,i.kt)("inlineCode",{parentName:"p"},"@uncurry"),":"),(0,i.kt)("p",null,"\u8bd5\u8bd5 ",(0,i.kt)("inlineCode",{parentName:"p"},"@uncurry"),":"),(0,i.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"@send external map: (array<'a>, @uncurry ('a => 'b)) => array<'b> = \"map\"\nmap([1, 2, 3], x => x + 1)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"// Empty output\n"))),(0,i.kt)("p",null,"In general, ",(0,i.kt)("inlineCode",{parentName:"p"},"uncurry")," is recommended; the compiler will do lots of optimizations to resolve the currying to uncurrying at compile time. However, there are some cases the compiler can't optimize it. In these cases, it will be converted to a runtime check."),(0,i.kt)("p",null,"\u4e00\u822c\u6765\u8bf4\uff0c\u63a8\u8350\u4f7f\u7528 ",(0,i.kt)("inlineCode",{parentName:"p"},"uncurry"),"\uff1b\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u5c06\u8fdb\u884c\u5927\u91cf\u4f18\u5316\uff0c\u4ee5\u89e3\u51b3\u4ececurring\u5230uncurring\u3002\u7136\u800c\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5668\u65e0\u6cd5\u5bf9\u5176\u8fdb\u884c\u4f18\u5316\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5b83\u5c06\u88ab\u8f6c\u6362\u4e3a\u8fd0\u884c\u65f6\u68c0\u67e5\u3002"),(0,i.kt)("h2",o({},{id:"modeling-this-based-callbacks--\u57fa\u4e8ethis\u7684callback"}),"Modeling ",(0,i.kt)("inlineCode",{parentName:"h2"},"this"),"-based Callbacks | \u57fa\u4e8ethis\u7684callback"),(0,i.kt)("p",null,"Many JS libraries have callbacks which rely on this (the source), for example:"),(0,i.kt)("p",null,"\u6709\u5f88\u591aJS\u5e93\u7684\u56de\u8c03\u51fd\u6570\u4f9d\u8d56\u4e8ethis\uff08\u6e90\u4ee3\u7801\u4e2d\uff09\uff0c\u4f8b\u5982\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"x.onload = function(v) {\n  console.log(this.response + v)\n}\n")),(0,i.kt)("p",null,"Here, ",(0,i.kt)("inlineCode",{parentName:"p"},"this")," would point to ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," (actually, it depends on how ",(0,i.kt)("inlineCode",{parentName:"p"},"onload")," is called, but we digress). It's not correct to declare ",(0,i.kt)("inlineCode",{parentName:"p"},"x.onload")," of type ",(0,i.kt)("inlineCode",{parentName:"p"},"(. unit) -> unit"),". Instead, we introduced a special attribute, ",(0,i.kt)("inlineCode",{parentName:"p"},"this"),", which allows us to type ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," as so:"),(0,i.kt)("p",null,"\u8fd9\u91cc\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"this"),"\u662f\u6307\u5411",(0,i.kt)("inlineCode",{parentName:"p"},"x"),"\u7684\uff08\u5b9e\u9645\u4e0a\uff0c\u8fd9\u53d6\u51b3\u4e8e",(0,i.kt)("inlineCode",{parentName:"p"},"onload"),"\u65b9\u6cd5\u662f\u5982\u4f55\u88ab\u8c03\u7528\u7684\uff0c\u4f46\u662f\u8ba8\u8bba\u8fd9\u4e2a\u6211\u4eec\u5c31\u504f\u9898\u4e86\uff09\u3002\u5c06",(0,i.kt)("inlineCode",{parentName:"p"},"x.onload"),"\u7684\u7c7b\u578b\u58f0\u660e\u4e3a",(0,i.kt)("inlineCode",{parentName:"p"},"(. unit) -> unit"),"\u662f\u4e0d\u5bf9\u7684\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u4e2a\u7279\u6b8a\u7684\u5c5e\u6027\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"this"),", \u80fd\u8ba9\u6211\u4eec\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," \u4f5c\u7c7b\u578b\u58f0\u660e:"),(0,i.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'type x\n@val external x: x = "x"\n@set external setOnload: (x, @this ((x, int) => unit)) => unit = "onload"\n@get external resp: x => int = "response"\nsetOnload(x, @this ((o, v) => Js.log(resp(o) + v)))\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"x.onload = function (v) {\n  var o = this;\n  console.log((o.response + v) | 0);\n};\n"))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"this")," has its first parameter is reserved for ",(0,i.kt)("inlineCode",{parentName:"p"},"this")," and for arity of 0, there is no need for a redundant ",(0,i.kt)("inlineCode",{parentName:"p"},"unit")," type."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"this")," \u6709\u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f",(0,i.kt)("inlineCode",{parentName:"p"},"this"),"\u672c\u8eab\u6b64\u4fdd\u7559\u7684\uff0c\u5bf9\u4e8e\u53c2\u6570\u4e3a0\u7684\u51fd\u6570\uff0c\u58f0\u660e\u65f6\u4e0d\u9700\u8981\u5197\u4f59\u7684unit\u7c7b\u578b\u3002"),(0,i.kt)("h2",o({},{id:"function-nullable-return-value-wrapping--\u51fd\u6570\u53ef\u4e3anull\u7c7b\u578b\u7684\u8fd4\u56de\u503c"}),"Function Nullable Return Value Wrapping | \u51fd\u6570\u53ef\u4e3aNull\u7c7b\u578b\u7684\u8fd4\u56de\u503c"),(0,i.kt)("p",null,"For JS functions that return a value that can also be ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),", we provide ",(0,i.kt)("inlineCode",{parentName:"p"},"@return(...)"),". To automatically convert that value to an ",(0,i.kt)("inlineCode",{parentName:"p"},"option")," type (recall that ReScript ",(0,i.kt)("inlineCode",{parentName:"p"},"option")," type's ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," value only compiles to ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," and not ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),")."),(0,i.kt)("p",null,"\u5bf9\u4e8e\u8fd4\u56de\u503c\u53ef\u4ee5\u662f",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),"\u6216",(0,i.kt)("inlineCode",{parentName:"p"},"null"),"\u7684JS\u51fd\u6570\uff0c\u6211\u4eec\u63d0\u4f9b",(0,i.kt)("inlineCode",{parentName:"p"},"@return(...)"),"\u8bed\u6cd5\uff0c\u53ef\u4ee5\u81ea\u52a8\u5c06\u8be5\u503c\u8f6c\u6362\u4e3a",(0,i.kt)("inlineCode",{parentName:"p"},"option"),"\u7c7b\u578b\uff08\u8bf7\u8bb0\u4f4f\uff0cReScript",(0,i.kt)("inlineCode",{parentName:"p"},"option"),"\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"None"),"\u503c\u4ec5\u7f16\u8bd1\u4e3a",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),"\u800c\u4e0d\u662f",(0,i.kt)("inlineCode",{parentName:"p"},"null"),"\uff09\u3002"),(0,i.kt)(u,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'type element\ntype dom\n\n@send @return(nullable)\nexternal getElementById: (dom, string) => option<element> = "getElementById"\n\nlet test = dom => {\n  let elem = dom->(getElementById("haha"))\n  switch (elem) {\n  | None => 1\n  | Some(_ui) => 2\n  }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'function test(dom) {\n  var elem = dom.getElementById("haha");\n  if (elem == null) {\n    return 1;\n  } else {\n    console.log(elem);\n    return 2;\n  }\n}\n\n'))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"return(nullable)")," attribute will automatically convert ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"option")," type."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"return\uff08nullable\uff09"),"\u5c5e\u6027\u5c06\u81ea\u52a8\u5c06 ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," \u548c ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," \u8f6c\u6362\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"option")," \u7c7b\u578b\u3002"),(0,i.kt)("p",null,"Currently 4 directives are supported: ",(0,i.kt)("inlineCode",{parentName:"p"},"null_to_opt"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined_to_opt"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"nullable")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"identity"),"."),(0,i.kt)("p",null,"\u5f53\u524d\u652f\u63014\u4e2a\u6307\u4ee4\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"null_to_opt"),"\u3001",(0,i.kt)("inlineCode",{parentName:"p"},"undefined_to_opt_"),"\u3001",(0,i.kt)("inlineCode",{parentName:"p"},"nullable"),"\u548c",(0,i.kt)("inlineCode",{parentName:"p"},"identity"),"\u3002"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"identity")," will make sure that compiler will do nothing about the returned value. It is rarely used, but introduced here for debugging purpose."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"identity"),"\u5c06\u786e\u4fdd\u7f16\u8bd1\u5668\u4e0d\u4f1a\u5bf9\u8fd4\u56de\u7684\u503c\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\u8fd9\u5f88\u5c11\u4f7f\u7528\uff0c\u4f46\u5728\u8fd9\u91cc\u4f5c\u4ecb\u7ecd\u662f\u4e3a\u4e86\u8c03\u8bd5\u3002"))}d.isMDXComponent=!0,d.frontmatter={title:"\u7ed1\u5b9a\u5230JS\u51fd\u6570",description:"JS interop with functions in ReScript",canonical:"/docs/manual/latest/bind-to-js-function",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs-cn/manual/latest/bind-to-js-function.mdx"}},75084:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs-cn/manual/latest/bind-to-js-function",function(){return t(89004)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return n=75084,e(e.s=n);var n}));var n=e.O();_N_E=n}]);