(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[11505],{17375:function(e,n,t){"use strict";function a(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}t.d(n,{Z:function(){return a}})},78698:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return u}});var a=t(17375),r=t(96156),i=(t(67294),t(3905));function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){(0,r.Z)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var p,s=(p="CodeTab",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",o({},e))}),d={};function u(e){var n=e.components,t=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",o(o(o({},d),t),{},{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",o({},{id:"\u51fd\u6570"}),"\u51fd\u6570"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Cheat sheet for the full function syntax at the end"),"."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"\u6240\u6709\u5173\u4e8e\u51fd\u6570\u7684\u8bed\u6cd5\u6e05\u5355\u5728\u672c\u7ae0\u8282\u7684\u6700\u540e\u9762")),(0,i.kt)("p",null,"ReScript functions are declared with an arrow and return an expression, just like JS functions. They compile to clean JS functions too."),(0,i.kt)("p",null,"ReScript\u51fd\u6570\u7528\u7bad\u5934\u58f0\u660e\uff0c\u5e76\u4f1a\u8fd4\u56de\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5c31\u50cf JS \u4e2d\u7684\u51fd\u6570\u4e00\u6837\u3002\u5b83\u4eec\u4e5f\u4f1a\u7f16\u8bd1\u6210\u7b80\u6d01\u7684\u7684 JS \u51fd\u6570\u3002"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"prelude",prelude:!0}),'let greet = (name) => "Hello " ++ name\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'function greet(name) {\n  return "Hello " + name;\n}\n'))),(0,i.kt)("p",null,"This declares a function and assigns to it the name ",(0,i.kt)("inlineCode",{parentName:"p"},"greet"),", which you can call like so:"),(0,i.kt)("p",null,"\u8fd9\u4f1a\u58f0\u660e\u4e00\u4e2a\u51fd\u6570\uff0c\u5e76\u7ed9\u5b83\u6307\u5b9a\u4e86",(0,i.kt)("inlineCode",{parentName:"p"},"greet"),"\u7684\u540d\u5b57\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u8c03\u7528\u5b83\u3002"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'greet("world!") // "Hello world!"\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'greet("world!");\n'))),(0,i.kt)("p",null,"Multi-arguments functions have arguments separated by comma:"),(0,i.kt)("p",null,"\u591a\u53c2\u6570\u51fd\u6570\u7684\u53c2\u6570\u7531\u9017\u53f7\u5206\u9694\uff1a"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"let add = (x, y, z) => x + y + z\nadd(1, 2, 3) // 6\n")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"function add(x, y, z) {\n  return (x + y | 0) + z | 0;\n}\n"))),(0,i.kt)("p",null,"For longer functions, you'd surround the body with a block:"),(0,i.kt)("p",null,"\u5bf9\u4e8e\u8f83\u957f\u7684\u51fd\u6570\uff0c\u4f60\u53ef\u4ee5\u628a\u51fd\u6570\u4f53\u7528\u5927\u62ec\u53f7\u5305\u88f9\u8d77\u6765\uff1a"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'let greetMore = (name) => {\n  let part1 = "Hello"\n  part1 ++ " " ++ name\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'function greetMore(name) {\n  return "Hello " + name;\n}\n'))),(0,i.kt)("p",null,"If your function has no argument, just write ",(0,i.kt)("inlineCode",{parentName:"p"},"let greetMore = () => {...}"),"."),(0,i.kt)("p",null,"\u5982\u679c\u4f60\u7684\u51fd\u6570\u6ca1\u6709\u53c2\u6570\uff0c\u53ea\u9700\u8981\u5199 ",(0,i.kt)("inlineCode",{parentName:"p"},"let greetMore = () => {...}"),"."),(0,i.kt)("h2",o({},{id:"labeled-arguments--\u6807\u7b7e\u53c2\u6570"}),"Labeled Arguments | \u6807\u7b7e\u53c2\u6570"),(0,i.kt)("p",null,"Multi-arguments functions, especially those whose arguments are of the same type, can be confusing to call."),(0,i.kt)("p",null,"\u591a\u53c2\u6570\u51fd\u6570\uff0c\u7279\u522b\u662f\u90a3\u4e9b\u53c2\u6570\u7c7b\u578b\u76f8\u540c\u7684\u51fd\u6570\uff0c\u5728\u8c03\u7528\u65f6\u53ef\u80fd\u4f1a\u5f88\u6df7\u4e71\u3002"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res"}),"let addCoordinates = (x, y) => {\n  // use x and y here\n}\n// ...\naddCoordinates(5, 6) // which is x, which is y?\n")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"function addCoordinates(x, y) {\n  // use x and y here\n}\n\naddCoordinates(5, 6);\n"))),(0,i.kt)("p",null,"You can attach labels to an argument by prefixing the name with the ",(0,i.kt)("inlineCode",{parentName:"p"},"~")," symbol:"),(0,i.kt)("p",null,"\u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a\u53c2\u6570\u4e0a\u9644\u52a0\u6807\u7b7e\uff0c\u65b9\u5f0f\u662f\u5728\u53c2\u6570\u540d\u5b57\u524d\u52a0\u4e0a",(0,i.kt)("inlineCode",{parentName:"p"},"~"),"\u7b26\u53f7\u3002"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res"}),"let addCoordinates = (~x, ~y) => {\n  // use x and y here\n}\n// ...\naddCoordinates(~x=5, ~y=6)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"function addCoordinates(x, y) {\n  // use x and y here\n}\n\naddCoordinates(5, 6);\n"))),(0,i.kt)("p",null,"You can provide the arguments in ",(0,i.kt)("strong",{parentName:"p"},"any order"),":"),(0,i.kt)("p",null,"\u4f60\u53ef\u4ee5\u6309",(0,i.kt)("strong",{parentName:"p"},"\u4efb\u610f\u987a\u5e8f"),"\u4f20\u5165\u6807\u7b7e\u53c2\u6570"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res"}),"addCoordinates(~y=6, ~x=5)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"addCoordinates(5, 6);\n"))),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"~x")," part in the declaration means the function accepts an argument labeled ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," and can refer to it in the function body by the same name. You can also refer to the arguments inside the function body by a different name for conciseness:"),(0,i.kt)("p",null,"\u58f0\u660e\u4e2d\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"~x"),"\u90e8\u5206\u610f\u5473\u7740\u8be5\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u6807\u7b7e\u4e3a",(0,i.kt)("inlineCode",{parentName:"p"},"x"),"\u7684\u53c2\u6570\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u51fd\u6570\u4f53\u4e2d\u7528\u76f8\u540c\u7684\u540d\u79f0\u6765\u6307\u4ee3\u5b83\u3002\u4f60\u4e5f\u53ef\u4ee5\u5728\u51fd\u6570\u4f53\u4e2d\u7528\u4e0d\u540c\u7684\u540d\u5b57\u6765\u6307\u4ee3\u53c2\u6570\u4ee5\u63d0\u5347\u7b80\u6d01\u6027\uff1a"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res"}),'let drawCircle = (~radius as r, ~color as c) => {\n  setColor(c)\n  startAt(r, r)\n  // ...\n}\n\ndrawCircle(~radius=10, ~color="red")\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'function drawCircle(r, c) {\n  setColor(c);\n  return startAt(r, r);\n}\n\ndrawCircle(10, "red");\n'))),(0,i.kt)("p",null,"As a matter of fact, ",(0,i.kt)("inlineCode",{parentName:"p"},"(~radius)")," is just a shorthand for ",(0,i.kt)("inlineCode",{parentName:"p"},"(~radius as radius)"),"."),(0,i.kt)("p",null,"\u4e8b\u5b9e\u4e0a\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"(~radius)"),"\u53ea\u662f",(0,i.kt)("inlineCode",{parentName:"p"},"(~radius as radius)"),"\u7684\u4e00\u4e2a\u7f29\u5199\u3002"),(0,i.kt)("p",null,"Here's the syntax for typing the arguments:"),(0,i.kt)("p",null,"\u4e0b\u9762\u662f\u7ed9\u53c2\u6570\u52a0\u4e0a\u7c7b\u578b\u7684\u8bed\u6cd5\uff1a"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res"}),"let drawCircle = (~radius as r: int, ~color as c: string) => {\n  // code here\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"function drawCircle(r, c) {\n  // code here\n}\n"))),(0,i.kt)("h2",o({},{id:"optional-labeled-arguments--\u53ef\u9009\u7684\u6807\u7b7e\u53c2\u6570"}),"Optional Labeled Arguments | \u53ef\u9009\u7684\u6807\u7b7e\u53c2\u6570"),(0,i.kt)("p",null,"Labeled function arguments can be made optional during declaration. You can then omit them when calling the function."),(0,i.kt)("p",null,"\u6807\u8bb0\u7684\u51fd\u6570\u53c2\u6570\u53ef\u4ee5\u5728\u58f0\u660e\u4e3a\u53ef\u9009\u7684\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5728\u8c03\u7528\u51fd\u6570\u65f6\u7701\u7565\u5b83\u4eec\u4e86\uff1a"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res"}),"// radius can be omitted\nlet drawCircle = (~color, ~radius=?, ()) => {\n  setColor(color)\n  switch radius {\n  | None => startAt(1, 1)\n  | Some(r_) => startAt(r_, r_)\n  }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'var Caml_option = require("./stdlib/caml_option.js");\n\nfunction drawCircle(color, radius, param) {\n  setColor(color);\n  if (radius === undefined) {\n    return startAt(1, 1);\n  }\n  var r_ = Caml_option.valFromOption(radius);\n  return startAt(r_, r_);\n}\n'))),(0,i.kt)("p",null,"When given in this syntax, ",(0,i.kt)("inlineCode",{parentName:"p"},"radius")," is ",(0,i.kt)("strong",{parentName:"p"},"wrapped")," in the standard library's ",(0,i.kt)("inlineCode",{parentName:"p"},"option")," type, defaulting to ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),". If provided, it'll be wrapped with a ",(0,i.kt)("inlineCode",{parentName:"p"},"Some"),". So ",(0,i.kt)("inlineCode",{parentName:"p"},"radius"),"'s type value is ",(0,i.kt)("inlineCode",{parentName:"p"},"None | Some(int)")," here."),(0,i.kt)("p",null,"\u5f53\u4f7f\u7528\u8fd9\u79cd\u8bed\u6cd5\u7684\u65f6\u5019\uff0cradius\u662f\u88ab",(0,i.kt)("strong",{parentName:"p"},"\u5305\u88f9"),"\u5728\u6807\u51c6\u5e93\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"option"),"\u7c7b\u578b\u4e2d\u7684\uff0c\u9ed8\u8ba4\u503c\u4e3a",(0,i.kt)("inlineCode",{parentName:"p"},"None"),". \u5982\u679c\u63d0\u4f9b\u4e86\uff0c\u90a3\u4e48\u4f1a\u88ab\u5305\u88f9\u5230\u6784\u9020\u5668",(0,i.kt)("inlineCode",{parentName:"p"},"Some"),"\u4e2d\u3002\u6240\u4ee5\uff0c\u8fd9\u91cc",(0,i.kt)("inlineCode",{parentName:"p"},"radius"),"\u7684\u7c7b\u578b\u53ef\u80fd\u53ef\u80fd\u503c\u6709",(0,i.kt)("inlineCode",{parentName:"p"},"None| Some(int)"),"."),(0,i.kt)("p",null,"More on ",(0,i.kt)("inlineCode",{parentName:"p"},"option")," type ",(0,i.kt)("a",o({parentName:"p"},{href:"null-undefined-option.md"}),"here"),"."),(0,i.kt)("p",null,"\u5728",(0,i.kt)("a",o({parentName:"p"},{href:"null-undefined-option.md"}),"\u8fd9\u91cc"),"\u67e5\u770b\u5173\u4e8e",(0,i.kt)("inlineCode",{parentName:"p"},"option"),"\u7c7b\u578b\u7684\u66f4\u591a\u4fe1\u606f\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note")," for the sake of the type system, whenever you have an optional argument, you need to ensure that there's also at least one positional argument (aka non-labeled, non-optional argument) after it. If there's none, provide a dummy ",(0,i.kt)("inlineCode",{parentName:"p"},"unit")," (aka ",(0,i.kt)("inlineCode",{parentName:"p"},"()"),") argument."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6ce8\u610f"),"\u4e3a\u4e86\u7c7b\u578b\u7cfb\u7edf\u7684\u7f18\u6545\uff0c\u53ea\u8981\u4f60\u6709\u4e00\u4e2a\u53ef\u9009\u53c2\u6570\uff0c\u4f60\u5c31\u9700\u8981\u786e\u4fdd\u5728\u5b83\u540e\u9762\u81f3\u5c11\u6709\u4e00\u4e2a\u4f4d\u7f6e\u53c2\u6570(positional argument, \u53c8\u79f0\u975e\u6807\u8bb0\u7684\uff0c\u975e\u53ef\u9009\u7684\u53c2\u6570). \u5982\u679c\u6ca1\u6709\uff0c\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u5047\u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"unit"),"(\u4e5f\u5c31\u662f",(0,i.kt)("inlineCode",{parentName:"p"},"()"),")\u53c2\u6570\u3002"),(0,i.kt)("h3",o({},{id:"signatures-and-type-annotations--\u7b7e\u540d\u548c\u7c7b\u578b\u6ce8\u89e3"}),"Signatures and Type Annotations | \u7b7e\u540d\u548c\u7c7b\u578b\u6ce8\u89e3"),(0,i.kt)("p",null,"Functions with optional labeled arguments can be confusing when it comes to signature and type annotations. Indeed, the type of an optional labeled argument looks different depending on whether you're calling the function, or working inside the function body. Outside the function, a raw value is either passed in (",(0,i.kt)("inlineCode",{parentName:"p"},"int"),", for example), or left off entirely. Inside the function, the parameter is always there, but its value is an option (",(0,i.kt)("inlineCode",{parentName:"p"},"option<int>"),"). This means that the type signature is different, depending on whether you're writing out the function type, or the parameter type annotation. The first being a raw value, and the second being an option."),(0,i.kt)("p",null,"\u5f53\u6d89\u53ca\u5230\u7b7e\u540d\u548c\u7c7b\u578b\u6ce8\u91ca\u65f6\uff0c\u5e26\u6709\u53ef\u9009\u6807\u8bb0\u53c2\u6570\u7684\u51fd\u6570\u53ef\u80fd\u4f1a\u4ee4\u4eba\u56f0\u60d1\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4e00\u4e2a\u53ef\u9009\u7684\u6807\u8bb0\u53c2\u6570\u7684\u7c7b\u578b\u770b\u8d77\u6765\u662f\u4e0d\u540c\u7684\uff0c\u8fd9\u53d6\u51b3\u4e8e\u4f60\u662f\u5728\u51fd\u6570\u7684\u8c03\u7528\u70b9\uff0c\u8fd8\u662f\u5728\u51fd\u6570\u4f53\u5185\u90e8\u3002\u5728\u51fd\u6570\u5916\u90e8\uff0c\u4e00\u4e2a\u539f\u59cb\u503c\u8981\u4e48\u88ab\u4f20\u5165(\u4f8b\u5982\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"int"),"), \u8981\u4e48\u88ab\u5b8c\u5168\u820d\u5f03\u4e0d\u4f20\u5165\u503c\u3002\u5728\u51fd\u6570\u5185\u90e8\uff0c\u53c2\u6570\u603b\u662f\u5b58\u5728\u7684\uff0c\u4f46\u5176\u503c\u662f\u4e00\u4e2a\u9009\u9879(",(0,i.kt)("inlineCode",{parentName:"p"},"option<int>"),"). \u8fd9\u610f\u5473\u7740\u7c7b\u578b\u7b7e\u540d\u662f\u4e0d\u540c\u7684\uff0c\u53d6\u51b3\u4e8e\u4f60\u662f\u5199\u51fa\u51fd\u6570\u7c7b\u578b\uff0c\u8fd8\u662f\u4e3a\u53c2\u6570\u5199\u7c7b\u578b\u6ce8\u91ca\uff0c\u524d\u8005\u662f\u4e00\u4e2a\u539f\u59cb\u503c\uff0c\u540e\u8005\u662f\u4e00\u4e2a",(0,i.kt)("inlineCode",{parentName:"p"},"option"),"."),(0,i.kt)("p",null,"If we get back to our previous example and both add a signature and type annotations to its argument, we get this:"),(0,i.kt)("p",null,"\u5982\u679c\u6211\u4eec\u56de\u5230\u4e4b\u524d\u7684\u4f8b\u5b50\uff0c\u540c\u65f6\u7ed9\u5b83\u6dfb\u52a0\u4e00\u4e2a\u7b7e\u540d\u548c\u53c2\u6570\u7c7b\u578b\u6ce8\u91ca\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u8fd9\u6837\u7684\u7ed3\u679c\u3002"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res"}),"let drawCircle: (~color: color, ~radius: int=?, unit) => unit =\n  (~color: color, ~radius: option<int>=?, ()) => {\n    setColor(color)\n    switch radius {\n    | None => startAt(1, 1)\n    | Some(r_) => startAt(r_, r_)\n    }\n  }\n")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"function drawCircle(color, radius, param) {\n  setColor(color);\n  if (radius !== undefined) {\n    return startAt(radius, radius);\n  } else {\n    return startAt(1, 1);\n  }\n}\n"))),(0,i.kt)("p",null,"The first line is the function's signature, we would define it like that in an interface file (see ",(0,i.kt)("a",o({parentName:"p"},{href:"module.md#signatures"}),"Signatures"),"). The function's signature describes the types that the ",(0,i.kt)("strong",{parentName:"p"},"outside world")," interacts with, hence the type ",(0,i.kt)("inlineCode",{parentName:"p"},"int")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"radius")," because it indeed expects an ",(0,i.kt)("inlineCode",{parentName:"p"},"int")," when called."),(0,i.kt)("p",null,"\u7b2c\u4e00\u884c\u662f\u51fd\u6570\u7684\u7b7e\u540d\uff0c\u6211\u4eec\u4f1a\u5728\u63a5\u53e3\u6587\u4ef6\u4e2d\u8fd9\u6837\u5b9a\u4e49\u5b83(\u770b",(0,i.kt)("a",o({parentName:"p"},{href:"module.md#signatures"}),"\u7b7e\u540d"),"\u7ae0\u8282). \u8be5\u51fd\u6570\u7684\u7b7e\u540d\u63cf\u8ff0\u4e86",(0,i.kt)("strong",{parentName:"p"},"\u5916\u90e8\u4e16\u754c"),"\u4ea4\u4e92\u7684\u7c7b\u578b\uff0c\u56e0\u6b64 ",(0,i.kt)("inlineCode",{parentName:"p"},"radius")," \u7684\u7c7b\u578b\u662f ",(0,i.kt)("inlineCode",{parentName:"p"},"int"),", \u56e0\u4e3a\u5b83\u5728\u8c03\u7528\u65f6\u671f\u671b\u7684\u8f93\u5165\u662f ",(0,i.kt)("inlineCode",{parentName:"p"},"int"),"."),(0,i.kt)("p",null,"In the second line, we annotate the arguments to help us remember the types of the arguments when we use them ",(0,i.kt)("strong",{parentName:"p"},"inside")," the function's body, here indeed ",(0,i.kt)("inlineCode",{parentName:"p"},"radius")," will be an ",(0,i.kt)("inlineCode",{parentName:"p"},"option<int>")," inside the function."),(0,i.kt)("p",null,"\u5728\u7b2c\u4e8c\u884c\u4e2d\uff0c\u6211\u4eec\u5bf9\u53c2\u6570\u8fdb\u884c\u6ce8\u89e3\uff0c\u4ee5\u5e2e\u52a9\u6211\u4eec\u5728",(0,i.kt)("strong",{parentName:"p"},"\u51fd\u6570\u5185\u90e8"),"\u4f7f\u7528\u53c2\u6570\u65f6\u8bb0\u4f4f\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u8fd9\u91cc",(0,i.kt)("inlineCode",{parentName:"p"},"radius"),"\u5728\u51fd\u6570\u5185\u90e8\u5c06\u662f\u4e00\u4e2a",(0,i.kt)("inlineCode",{parentName:"p"},"option<int>"),"."),(0,i.kt)("p",null,"So if you happen to struggle when writing the signature of a function with optional labeled arguments, try to remember this!"),(0,i.kt)("p",null,"\u56e0\u6b64\u5982\u679c\u60a8\u5728\u7f16\u5199\u5e26\u6709\u53ef\u9009\u6807\u8bb0\u53c2\u6570\u7684\u51fd\u6570\u7b7e\u540d\u65f6\u78b0\u5de7\u9047\u5230\u4e86\u56f0\u96be\uff0c\u8bf7\u8bb0\u4f4f\u8fd9\u4e00\u70b9!"),(0,i.kt)("h3",o({},{id:"explicitly-passed-optional--\u663e\u5f0f\u7684\u4f20\u5165\u53ef\u9009\u503c"}),"Explicitly Passed Optional | \u663e\u5f0f\u7684\u4f20\u5165\u53ef\u9009\u503c"),(0,i.kt)("p",null,"Sometimes, you might want to forward a value to a function without knowing whether the value is ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Some(a)"),". Naively, you'd do:"),(0,i.kt)("p",null,"\u6709\u65f6\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u5c06\u503c\u8f6c\u53d1\u7ed9\u51fd\u6570\uff0c\u4f46\u4e0d\u786e\u5b9a\u8be5\u503c\u662f",(0,i.kt)("inlineCode",{parentName:"p"},"None"),"\u8fd8\u662f",(0,i.kt)("inlineCode",{parentName:"p"},"Some(a)"),". \u5929\u771f\u5730\uff0c\u4f60\u4f1a\u8fd9\u6837\u505a\uff1a"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res"}),"let result =\n  switch payloadRadius {\n  | None => drawCircle(~color, ())\n  | Some(r) => drawCircle(~color, ~radius=r, ())\n  }\n")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"var r = payloadRadius;\n\nvar result = r !== undefined\n  ? drawCircle(color, Caml_option.valFromOption(r), undefined)\n  : drawCircle(color, undefined);\n"))),(0,i.kt)("p",null,"This quickly gets tedious. We provide a shortcut:"),(0,i.kt)("p",null,"\u8fd9\u5f88\u5feb\u5c31\u4f1a\u8ba9\u4ee3\u7801\u53d8\u5f97\u5197\u957f\u3002\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u77ed\u5199\u6cd5\uff1a"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res"}),"let result = drawCircle(~color, ~radius=?payloadRadius, ())\n")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"var result = drawCircle(1, undefined, undefined);\n"))),(0,i.kt)("p",null,'This means "I understand ',(0,i.kt)("inlineCode",{parentName:"p"},"radius")," is optional, and that when I pass it a value it needs to be an ",(0,i.kt)("inlineCode",{parentName:"p"},"int"),", but I don't know whether the value I'm passing is ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Some(val)"),", so I'll pass you the whole ",(0,i.kt)("inlineCode",{parentName:"p"},"option"),' wrapper".'),(0,i.kt)("p",null,'\u8fd9\u610f\u5473\u7740 "\u6211\u77e5\u9053',(0,i.kt)("inlineCode",{parentName:"p"},"radius"),"\u662f\u53ef\u9009\u503c\uff0c\u5f53\u6211\u7ed9\u5b83\u4f20\u9012\u4e00\u4e2a\u503c\u65f6\uff0c\u5b83\u9700\u8981\u662f\u4e00\u4e2a",(0,i.kt)("inlineCode",{parentName:"p"},"int"),", \u4f46\u6211\u4e0d\u786e\u5b9a\u6211\u4f20\u9012\u7684\u503c\u662f",(0,i.kt)("inlineCode",{parentName:"p"},"None"),"\u8fd8\u662f",(0,i.kt)("inlineCode",{parentName:"p"},"Some(val)"),", \u6240\u4ee5\u6211\u7ed9\u4f60\u4f20\u9012\u6574\u4e2a",(0,i.kt)("inlineCode",{parentName:"p"},"option"),'\u7684\u5305\u88c5".'),(0,i.kt)("h3",o({},{id:"optional-with-default-value--\u9ed8\u8ba4\u53c2\u6570\u7684\u53ef\u9009\u503c"}),"Optional with Default Value | \u9ed8\u8ba4\u53c2\u6570\u7684\u53ef\u9009\u503c"),(0,i.kt)("p",null,"Optional labeled arguments can also be provided a default value. In this case, they aren't wrapped in an ",(0,i.kt)("inlineCode",{parentName:"p"},"option")," type."),(0,i.kt)("p",null,"\u53ef\u9009\u7684\u6807\u7b7e\u53c2\u6570\u4e5f\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u9ed8\u8ba4\u503c\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u4e0d\u80fd\u88ab\u5305\u88f9\u5728",(0,i.kt)("inlineCode",{parentName:"p"},"option"),"\u7c7b\u578b\u4e2d\u3002"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res"}),"let drawCircle = (~radius=1, ~color, ()) => {\n  setColor(color)\n  startAt(radius, radius)\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"function drawCircle(radiusOpt, color, param) {\n  var radius = radiusOpt !== undefined ? radiusOpt : 1;\n  setColor(color);\n  return startAt(radius, radius);\n}\n"))),(0,i.kt)("h2",o({},{id:"recursive-functions--\u9012\u5f52\u51fd\u6570"}),"Recursive Functions | \u9012\u5f52\u51fd\u6570"),(0,i.kt)("p",null,"ReScript chooses the sane default of preventing a function to be called recursively within itself. To make a function recursive, add the ",(0,i.kt)("inlineCode",{parentName:"p"},"rec")," keyword after the ",(0,i.kt)("inlineCode",{parentName:"p"},"let"),":"),(0,i.kt)("p",null,"ReScript\u9009\u62e9\u4e86\u5c06\u51fd\u6570\u4e0d\u80fd\u5728\u5185\u90e8\u8c03\u7528\u81ea\u8eab\u8bbe\u7f6e\u4e3a\u9ed8\u8ba4\u884c\u4e3a\u3002\u8981\u521b\u5efa\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\uff0c\u5728",(0,i.kt)("inlineCode",{parentName:"p"},"let"),"\u540e\u9762\u52a0\u4e0a",(0,i.kt)("inlineCode",{parentName:"p"},"rec"),"\u5173\u952e\u5b57\uff1a"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"let rec neverTerminate = () => neverTerminate()\n")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"function neverTerminate(_param) {\n  while(true) {\n    _param = undefined;\n    continue ;\n  };\n}\n"))),(0,i.kt)("p",null,"A simple recursive function may look like this:"),(0,i.kt)("p",null,"\u4e00\u4e2a\u7b80\u5355\u7684\u9012\u5f52\u51fd\u6570\u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49\uff1a"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"// Recursively check every item on the list until one equals the `item`\n// argument. If a match is found, return `true`, otherwise return `false`\nlet rec listHas = (list, item) =>\n  switch list {\n  | list{} => false\n  | list{a, ...rest} => a === item || listHas(rest, item)\n  }\n")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"function listHas(_list, item) {\n  while(true) {\n    var list = _list;\n    if (!list) {\n      return false;\n    }\n    if (list.hd === item) {\n      return true;\n    }\n    _list = list.tl;\n    continue ;\n  };\n}\n"))),(0,i.kt)("p",null,"Recursively calling a function is bad for performance and the call stack. However, ReScript intelligently compiles ",(0,i.kt)("a",o({parentName:"p"},{href:"https://stackoverflow.com/questions/33923/what-is-tail-recursion"}),"tail recursion")," into a fast JavaScript loop. Try checking the JS output of the above code!"),(0,i.kt)("h3",o({},{id:"mutually-recursive-functions--\u4e92\u9012\u5f52\u51fd\u6570"}),"Mutually Recursive Functions | \u4e92\u9012\u5f52\u51fd\u6570"),(0,i.kt)("p",null,"Mutually recursive functions start like a single recursive function using the\n",(0,i.kt)("inlineCode",{parentName:"p"},"rec")," keyword, and then are chained together with ",(0,i.kt)("inlineCode",{parentName:"p"},"and"),":"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"let rec callSecond = () => callFirst()\nand callFirst = () => callSecond()\n")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"function callSecond(_param) {\n  while(true) {\n    _param = undefined;\n    continue ;\n  };\n}\n\nfunction callFirst(_param) {\n  while(true) {\n    _param = undefined;\n    continue ;\n  };\n}\n"))),(0,i.kt)("h2",o({},{id:"uncurried-function--\u53bb\u67ef\u91cc\u5316\u7684\u51fd\u6570"}),"Uncurried Function | \u53bb\u67ef\u91cc\u5316\u7684\u51fd\u6570"),(0,i.kt)("p",null,"ReScript's functions are curried by default, which is one of the few performance penalties we pay in the compiled JS output. The compiler does a best-effort job at removing those currying whenever possible. However, in certain edge cases, you might want guaranteed uncurrying. In those cases, put a dot in the function's parameter list:"),(0,i.kt)("p",null,"ReScript\u7684\u51fd\u6570\u662f\u9ed8\u8ba4\u67ef\u91cc\u5316\u7684\uff0c\u8fd9\u662f\u5c11\u6570\u7684\u7f16\u8bd1\u5230 JS \u4f1a\u4ea7\u751f\u7684\u6027\u80fd\u5f00\u9500\u60c5\u51b5\u4e4b\u4e00\u3002\u7f16\u8bd1\u5668\u4f1a\u5c3d\u6700\u5927\u53ef\u80fd\u5730\u53bb\u9664\u8fd9\u4e9b\u67ef\u91cc\u5316\uff0c\u7136\u800c\uff0c\u6709\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u4fdd\u8bc1\u67ef\u91cc\u5316\u4e0d\u4f1a\u53d1\u751f\u3002\u8fd9\u4e9b\u60c5\u51b5\uff0c\u53ef\u4ee5\u653e\u4e00\u4e2a\u70b9",(0,i.kt)("inlineCode",{parentName:"p"},"."),"\u5728\u51fd\u6570\u7684\u53c2\u6570\u5217\u8868\u524d\uff1a"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"let add = (. x, y) => x + y\n\nadd(. 1, 2)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"function add(x, y) {\n  return x + y | 0;\n}\n\nadd(1, 2);\n"))),(0,i.kt)("p",null,"If you write down the uncurried function's type, you'll add a dot there as well."),(0,i.kt)("p",null,"\u5982\u679c\u4f60\u5199\u4e0b\u975e\u67ef\u91cc\u5316\u51fd\u6570\u7684\u53c2\u6570\uff0c\u4f60\u4e5f\u8981\u5728\u90a3\u52a0\u4e00\u4e2a\u70b9",(0,i.kt)("inlineCode",{parentName:"p"},".")," . "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),": both the declaration site and the call site need to have the uncurry annotation. That's part of the guarantee/requirement."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6ce8\u610f"),": \u58f0\u660e\u7684\u4f4d\u7f6e\u548c\u8c03\u7528\u70b9\u90fd\u8981\u52a0\u4e0a\u7981\u6b62\u67ef\u91cc\u5316\u7684\u6807\u8bb0\uff0c\u8fd9\u6837\u662f\u4fdd\u8bc1\u51fd\u6570\u4e0d\u4f1a\u88ab\u67ef\u91cc\u5316\u7684\u6761\u4ef6\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"This feature seems trivial"),", but is actually one of our most important features, as a primarily functional language. We encourage you to use it if you'd like to remove any mention of ",(0,i.kt)("inlineCode",{parentName:"p"},"Curry")," runtime in the JS output."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u8fd9\u4e2a\u7279\u6027\u770b\u8d77\u6765\u662f trivial \u7684"),", \u4f46\u662f\u8fd9\u5176\u5b9e\u662f\u6211\u4eec\u4f5c\u4e3a\u4e00\u95e8\u51fd\u6570\u5f0f\u8bed\u8a00\u6700\u91cd\u8981\u7684\u7279\u6027\u4e4b\u4e00\u3002\u5982\u679c\u4f60\u60f3\u8981\u5728 JS \u7684\u7f16\u8bd1\u7ed3\u679c\u4e2d\u79fb\u9664\u6240\u6709\u8fd0\u884c\u65f6\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"\u67ef\u91cc\u5316"),", \u6211\u4eec\u9f13\u52b1\u4f60\u4f7f\u7528\u5b83\u3002"),(0,i.kt)("h2",o({},{id:"the-ignore-function--ignore-\u51fd\u6570"}),"The ignore() Function | ignore() \u51fd\u6570"),(0,i.kt)("p",null,"Occasionally you may want to ignore the return value of a function. ReScript provides an ",(0,i.kt)("inlineCode",{parentName:"p"},"ignore()")," function that discards the value of its argument and returns ",(0,i.kt)("inlineCode",{parentName:"p"},"()"),":"),(0,i.kt)("p",null,"\u5076\u5c14\u4f60\u53ef\u80fd\u60f3\u5ffd\u7565\u4e00\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0cReScript\u63d0\u4f9b\u4e86\u4e00\u4e2a",(0,i.kt)("inlineCode",{parentName:"p"},"ignore()'\u51fd\u6570\uff0c\u5b83\u629b\u5f03\u4e86\u5176\u53c2\u6570\u7684\u503c\uff0c\u5e76\u8fd4\u56de"),"()`."),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res"}),"mySideEffect()->Promise.catch(handleError)->ignore\n\nJs.Global.setTimeout(myFunc, 1000)->ignore\n")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"$$Promise.$$catch(mySideEffect(), function (prim) {\n  return handleError(prim);\n});\n\nsetTimeout(function (prim) {\n  myFunc();\n}, 1000);\n"))),(0,i.kt)("h2",o({},{id:"tips--tricks--\u6280\u5de7--\u8bc0\u7a8d"}),"Tips & Tricks | \u6280\u5de7 & \u8bc0\u7a8d"),(0,i.kt)("p",null,"Cheat sheet for the function syntaxes:"),(0,i.kt)("p",null,"\u6709\u5173\u51fd\u6570\u7684\u8bed\u6cd5\u6e05\u5355\uff1a"),(0,i.kt)("h3",o({},{id:"declaration--\u51fd\u6570\u58f0\u660e"}),"Declaration | \u51fd\u6570\u58f0\u660e"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res"}),"// anonymous function\n(x, y) => 1\n// bind to a name\nlet add = (x, y) => 1\n\n// labeled\nlet add = (~first as x, ~second as y) => x + y\n// with punning sugar\nlet add = (~first, ~second) => first + second\n\n// labeled with default value\nlet add = (~first as x=1, ~second as y=2) => x + y\n// with punning\nlet add = (~first=1, ~second=2) => first + second\n\n// optional\nlet add = (~first as x=?, ~second as y=?) => switch x {...}\n// with punning\nlet add = (~first=?, ~second=?) => switch first {...}\n")),(0,i.kt)("h4",o({},{id:"with-type-annotation--\u5e26\u6709\u7c7b\u578b\u7684\u51fd\u6570\u58f0\u660e"}),"With Type Annotation | \u5e26\u6709\u7c7b\u578b\u7684\u51fd\u6570\u58f0\u660e"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res"}),"// anonymous function\n(x: int, y: int): int => 1\n// bind to a name\nlet add = (x: int, y: int): int => 1\n\n// labeled\nlet add = (~first as x: int, ~second as y: int) : int => x + y\n// with punning sugar\nlet add = (~first: int, ~second: int) : int => first + second\n\n// labeled with default value\nlet add = (~first as x: int=1, ~second as y: int=2) : int => x + y\n// with punning sugar\nlet add = (~first: int=1, ~second: int=2) : int => first + second\n\n// optional\nlet add = (~first as x: option<int>=?, ~second as y: option<int>=?) : int => switch x {...}\n// with punning sugar\n// note that the caller would pass an `int`, not `option<int>`\n// Inside the function, `first` and `second` are `option<int>`.\nlet add = (~first: option<int>=?, ~second: option<int>=?) : int => switch first {...}\n")),(0,i.kt)("h3",o({},{id:"application--\u51fd\u6570\u5e94\u7528"}),"Application | \u51fd\u6570\u5e94\u7528"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res"}),"add(x, y)\n\n// labeled\nadd(~first=1, ~second=2)\n// with punning sugar\nadd(~first, ~second)\n\n// application with default value. Same as normal application\nadd(~first=1, ~second=2)\n\n// explicit optional application\nadd(~first=?Some(1), ~second=?Some(2))\n// with punning\nadd(~first?, ~second?)\n")),(0,i.kt)("h4",o({},{id:"with-type-annotation--\u5728\u51fd\u6570\u5e94\u7528\u4e2d\u52a0\u4e0a\u7c7b\u578b\u6ce8\u89e3"}),"With Type Annotation | \u5728\u51fd\u6570\u5e94\u7528\u4e2d\u52a0\u4e0a\u7c7b\u578b\u6ce8\u89e3"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res"}),"// labeled\nadd(~first=1: int, ~second=2: int)\n// with punning sugar\nadd(~first: int, ~second: int)\n\n// application with default value. Same as normal application\nadd(~first=1: int, ~second=2: int)\n\n// explicit optional application\nadd(~first=?Some(1): option<int>, ~second=?Some(2): option<int>)\n// no punning sugar when you want to type annotate\n")),(0,i.kt)("h3",o({},{id:"standalone-type-signature--\u5206\u79bb\u7684\u7c7b\u578b\u7b7e\u540d"}),"Standalone Type Signature | \u5206\u79bb\u7684\u7c7b\u578b\u7b7e\u540d"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res"}),"// first arg type, second arg type, return type\ntype add = (int, int) => int\n\n// labeled\ntype add = (~first: int, ~second: int) => int\n\n// labeled\ntype add = (~first: int=?, ~second: int=?, unit) => int\n")),(0,i.kt)("h4",o({},{id:"in-interface-files--\u5728\u63a5\u53e3\u6587\u4ef6\u4e2d\u52a0\u4e0a\u7c7b\u578b\u7b7e\u540d"}),"In Interface Files | \u5728\u63a5\u53e3\u6587\u4ef6\u4e2d\u52a0\u4e0a\u7c7b\u578b\u7b7e\u540d"),(0,i.kt)("p",null,"To annotate a function from the implementation file (",(0,i.kt)("inlineCode",{parentName:"p"},".res"),") in your interface file (",(0,i.kt)("inlineCode",{parentName:"p"},".resi"),"):"),(0,i.kt)("p",null,"\u8981\u5728\u4f60\u7684\u63a5\u53e3\u6587\u4ef6(",(0,i.kt)("inlineCode",{parentName:"p"},".res"),")\u4e2d\u4e3a\u4e00\u4e2a\u6765\u81ea\u5b9e\u73b0\u6587\u4ef6(",(0,i.kt)("inlineCode",{parentName:"p"},".res"),")\u7684\u51fd\u6570\u52a0\u4e0a\u7c7b\u578b\u6ce8\u89e3\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"sig",sig:!0}),"let add: (int, int) => int\n")),(0,i.kt)("p",null,"The type annotation part is the same as the previous section on With Type Annotation."),(0,i.kt)("p",null,"\u7c7b\u578b\u7b7e\u540d\u7684\u90e8\u5206\u548c\u4e4b\u524d\u662f\u4e00\u6837\u7684\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't")," confuse ",(0,i.kt)("inlineCode",{parentName:"p"},"let add: myType")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"type add = myType"),". When used in ",(0,i.kt)("inlineCode",{parentName:"p"},".resi")," interface files, the former exports the binding ",(0,i.kt)("inlineCode",{parentName:"p"},"add")," while annotating it as type ",(0,i.kt)("inlineCode",{parentName:"p"},"myType"),". The latter exports the type ",(0,i.kt)("inlineCode",{parentName:"p"},"add"),", whose value is the type ",(0,i.kt)("inlineCode",{parentName:"p"},"myType"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u4e0d\u8981\u641e\u6df7"),(0,i.kt)("inlineCode",{parentName:"p"},"let add: myType")," \u548c ",(0,i.kt)("inlineCode",{parentName:"p"},"type add = myType"),". \u5f53\u5728",(0,i.kt)("inlineCode",{parentName:"p"},".resi"),"\u63a5\u53e3\u6587\u4ef6\u4e2d\uff0c\u524d\u8005\u4f1a\u5bfc\u51fa\u7ed1\u5b9a",(0,i.kt)("inlineCode",{parentName:"p"},"add"),", \u5e76\u5c06\u5176\u7c7b\u578b\u6807\u6ce8\u4e3a",(0,i.kt)("inlineCode",{parentName:"p"},"myType"),"\u7c7b\u578b; \u540e\u8005\u4f1a\u5bfc\u51fa\u7c7b\u578b",(0,i.kt)("inlineCode",{parentName:"p"},"add"),", \u5e76\u58f0\u660e\u8be5\u7c7b\u578b\u548c",(0,i.kt)("inlineCode",{parentName:"p"},"myType"),"\u76f8\u540c\u3002"))}u.isMDXComponent=!0,u.frontmatter={title:"\u51fd\u6570",description:"Function syntax in ReScript",canonical:"/docs/manual/latest/function",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs-cn/manual/latest/function.mdx"}},35807:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs-cn/manual/latest/function",function(){return t(78698)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return n=35807,e(e.s=n);var n}));var n=e.O();_N_E=n}]);