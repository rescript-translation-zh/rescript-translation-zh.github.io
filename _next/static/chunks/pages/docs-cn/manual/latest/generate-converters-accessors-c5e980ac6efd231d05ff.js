(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[55543],{17375:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return a}})},97266:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return u}});var a=n(17375),r=n(96156),i=(n(67294),n(3905));function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var p,s=(p="CodeTab",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",l({},e))}),c={};function u(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",l(l(l({},c),n),{},{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",l({},{id:"generate-converters--helpers--\u751f\u6210\u8f6c\u6362\u5668\u4e0e\u5e2e\u52a9\u51fd\u6570"}),"Generate Converters & Helpers | \u751f\u6210\u8f6c\u6362\u5668\u4e0e\u5e2e\u52a9\u51fd\u6570"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),": if you're looking for:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@deriving(jsConverter)")," for records"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@deriving({jsConverter: newType})")," for records"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@deriving(jsConverter)")," for polymorphic variants")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6ce8\u610f"),": \u4ee5\u4e0b\u88c5\u9970\u5668\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u7528\u4e8e records \u7684 ",(0,i.kt)("inlineCode",{parentName:"li"},"@deriving(jsConverter)")),(0,i.kt)("li",{parentName:"ul"},"\u7528\u4e8e records \u7684 ",(0,i.kt)("inlineCode",{parentName:"li"},"@deriving({jsConverter: newType})")),(0,i.kt)("li",{parentName:"ul"},"\u7528\u4e8e\u591a\u6001 variants \u7684 ",(0,i.kt)("inlineCode",{parentName:"li"},"@deriving(jsConverter)"))),(0,i.kt)("p",null,"These particular ones are no longer needed. Select a doc version lower than ",(0,i.kt)("inlineCode",{parentName:"p"},"9.0")," in the sidebar to see their old docs."),(0,i.kt)("p",null,"\u57289.0\u53ca\u66f4\u65b0\u7684\u7248\u672c\u4e2d\u5df2\u7ecf\u4e0d\u5728\u4f7f\u7528\uff0c\u8bf7\u5728\u4fa7\u8fb9\u680f\u83dc\u5355\u4e2d\u5207\u6362\u81f3\u65e7\u7248\u672c\u7684\u6587\u6863\u8fdb\u884c\u67e5\u770b\u3002"),(0,i.kt)("p",null,"When using ReScript, you will sometimes come into situations where you want to"),(0,i.kt)("p",null,"\u5728\u4f7f\u7528 ReScript \u65f6\uff0c\u6709\u65f6\u60a8\u53ef\u4ee5\u4f1a\u6709\u4ee5\u4e0b\u9700\u8981"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Automatically generate functions that convert between ReScript's internal and JS runtime values (e.g. variants).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Convert a record type into an abstract type with generated creation, accessor and method functions.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Generate some other helper functions, such as functions from record attribute names.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u7528\u4e8e\u5c06\u503c\u5728 ReScript \u5185\u90e8\u4e0eJS\u8fd0\u884c\u65f6\u4e4b\u95f4\u8f6c\u6362\u7684\u81ea\u52a8\u5316\u751f\u6210\u51fd\u6570")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u901a\u8fc7\u751f\u6210\u7684creation\u3001accessor \u548c method \u51fd\u6570\u5c06 record \u7c7b\u578b\u8f6c\u6362\u4e3a\u4e00\u4e2a\u62bd\u8c61\u7c7b\u578b")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u751f\u6210\u4e00\u4e9b\u5e2e\u52a9\u51fd\u6570\uff0c\u5982\u4e00\u4e9b\u4e0e record \u4e2d\u5c5e\u6027\u540d\u76f8\u5173\u7684\u51fd\u6570"))),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving")," decorator for different code generation scenarios. All different options and configurations will be discussed on this page."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@deriving")," \u88c5\u9970\u5668\u53ef\u4ee5\u88ab\u7528\u5728\u4e00\u4e9b\u4e0d\u540c\u7684\u4ee3\u7801\u751f\u6210\u573a\u666f\u4e2d\u4f7f\u7528\uff0c\u6b64\u9875\u4e2d\u4f1a\u5305\u542b\u5bf9\u5168\u90e8\u7684\u9009\u9879\u4e0e\u914d\u7f6e\u7684\u8bf4\u660e\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note:")," Please be aware that extensive use of code generation might make it harder to understand your programs (since the code being generated is not visible in the source code, and you just need to know what kind of functions / values a decorator generates)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6ce8\u610f\uff1a")," \u5927\u91cf\u4f7f\u7528\u4ee3\u7801\u751f\u6210\u53ef\u80fd\u4f1a\u8ba9\u60a8\u7684\u4ee3\u7801\u96be\u4e8e\u7406\u89e3\uff0c\u8bf7\u6089\u77e5(\u56e0\u4e3a\u751f\u6210\u7684\u4ee3\u7801\u662f\u65e0\u6cd5\u5728\u4ee3\u7801\u4e2d\u770b\u89c1\u7684\u5e76\u4e14\u60a8\u53ea\u9700\u8981\u88c5\u9970\u5668\u751f\u6210\u7684\u51fd\u6570\u4e0e\u503c\u5373\u53ef)\u3002"),(0,i.kt)("h2",l({},{id:"generate-functions--plain-values-for-variants-\uff5c-\u4e3a-variants-\u751f\u6210\u51fd\u6570\u4e0e\u503c"}),"Generate Functions & Plain Values for Variants \uff5c \u4e3a Variants \u751f\u6210\u51fd\u6570\u4e0e\u503c"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(accessors)")," on a variant type to create accessor functions for its constructors."),(0,i.kt)("p",null,"\u4f7f\u7528 ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(accessors)")," \u4e3a\u4e00\u4e2a variant \u7c7b\u578b\u521b\u5efa\u88ab\u5176\u6784\u9020\u5668\u4f7f\u7528\u7684accessor"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),"@deriving(accessors)\ntype action =\n  | Click\n  | Submit(string)\n  | Cancel;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-js"}),"function submit(param_0) {\n  return /* Submit */[param_0];\n}\n\nvar click = /* Click */0;\n\nvar cancel = /* Cancel */1;\n\nexports.click  = click;\nexports.submit = submit;\nexports.cancel = cancel;\n"))),(0,i.kt)("p",null,"Variants constructors with payloads generate functions, payload-less constructors generate plain integers (the internal representation of variants)."),(0,i.kt)("p",null,"\u5177\u6709\u53c2\u6570\u7684 variants \u6784\u9020\u8d77\u4f1a\u751f\u6210\u51fd\u6570\uff0c\u800c\u65e0\u53c2\u6570\u7684\u6784\u9020\u5668\u5219\u4f1a\u751f\u6210\u503c\uff08variants\u7684\u5185\u90e8\u8868\u793a\uff09\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The generated accessors are lower-cased."),(0,i.kt)("li",{parentName:"ul"},"You can now use these helpers on the JavaScript side! But don't rely on their actual values please.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6ce8\u610f"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u751f\u6210\u7684 accessor \u90fd\u662f\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684"),(0,i.kt)("li",{parentName:"ul"},"\u867d\u7136\u53ef\u4ee5\u5728 JavaScript \u7aef\u4f7f\u7528\u8fd9\u4e9b\u751f\u6210\u7684\u5e2e\u52a9\u51fd\u6570\uff0c\u4f46\u8bf7\u4e0d\u8981\u4f9d\u8d56\u5b83\u4eec\u5b9e\u9645\u7684\u503c!")),(0,i.kt)("h3",l({},{id:"usage-\uff5c-\u4f7f\u7528\u65b9\u6cd5"}),"Usage \uff5c \u4f7f\u7528\u65b9\u6cd5"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),'let s = submit("hello"); /* gives Submit("hello") */\n')),(0,i.kt)("p",null,"\u53ef\u4ee5\u5728\u4ee5\u4e0b\u60c5\u51b5\u4e2d\u4f7f\u7528\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When you're passing the accessor function as a higher-order function (which plain variant constructors aren't).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When you'd like the JS side to use these values & functions opaquely and pass you back a variant constructor (since JS has no such thing).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u5f53\u4e00\u4e2a accessor \u4f5c\u4e3a\u4e00\u4e2a\u9ad8\u9636\u51fd\u6570\u4f20\u9012\uff08\u666e\u901a\u7684 variant \u6784\u9020\u5668\u65e0\u6cd5\u8fd9\u4e48\u505a\uff09.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u5f53\u5e0c\u671b\u5728 JS \u7aef\u663e\u5f0f\u7684\u4f7f\u7528\u8fd9\u4e9b\u503c\u4e0e\u51fd\u6570\u65f6\uff0c\u5e76\u4f20\u56de\u4e00\u4e2a variant \u6784\u9020\u5668 (\u56e0\u4e3a JS \u4e2d\u6ca1\u6709\u7c7b\u4f3c\u7684\u4e1c\u897f)."))),(0,i.kt)("p",null,"Please note that in case you just want to ",(0,i.kt)("em",{parentName:"p"},"pipe a payload into a constructor"),", you don't need to generate functions for that. Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"->")," syntax instead, e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},'"test"->Submit'),"."),(0,i.kt)("p",null,"\u8bf7\u6ce8\u610f\uff0c\u6709\u4e9b\u65f6\u5019\u5982\u679c\u60a8\u53ea\u662f\u60f3",(0,i.kt)("em",{parentName:"p"},"\u4f20\u5165\u53c2\u6570\u5230\u4e00\u4e2a\u6784\u9020\u5668"),"\uff0c\u90a3\u4e48\u60a8\u4e0d\u9700\u8981\u751f\u6210\u4e00\u4e2a\u51fd\u6570\u6765\u505a\u8fd9\u4ef6\u4e8b\u513f\u3002\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 ",(0,i.kt)("inlineCode",{parentName:"p"},"->")," \u8bed\u6cd5\uff0c\u4f8b\u5982 ",(0,i.kt)("inlineCode",{parentName:"p"},'"test"->Submit'),"\u3002"),(0,i.kt)("h2",l({},{id:"generate-field-accessors-for-records-\uff5c-\u4e3a-record-\u751f\u6210\u5b57\u6bb5accessors"}),"Generate Field Accessors for Records \uff5c \u4e3a Record \u751f\u6210\u5b57\u6bb5Accessors"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(accessors)")," on a record type to create accessors for its record field names."),(0,i.kt)("p",null,"\u4f7f\u7528 ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(accessors)")," \u4e3a\u4e00\u4e2a record \u7c7b\u578b\u521b\u5efa\u88ab\u5176\u5b57\u6bb5\u540d\u79f0\u4f7f\u7528\u7684accessors"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),'@deriving(accessors)\ntype pet = {name: string}\n\nlet pets = [{name: "bob"}, {name: "bob2"}]\n\npets\n ->Belt.Array.map(name)\n ->Js.Array2.joinWith("&")\n ->Js.log\n')),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-js"}),'function name(param) {\n  return param.name;\n}\n\nvar pets = [\n  {\n    name: "bob"\n  },\n  {\n    name: "bob2"\n  }\n];\n\nconsole.log(Belt_Array.map(pets, name).join("&"));\n'))),(0,i.kt)("h2",l({},{id:"generate-converters-for-js-integer-enums-and-variants-\uff5c-\u4e3a-javascript-\u4e2d\u7684\u6574\u6570\uff08integer\uff09\u3001\u679a\u4e3e\uff08enum\uff09\u53ca-variants-\u7c7b\u578b\u751f\u6210\u8f6c\u6362\u5668"}),"Generate Converters for JS Integer Enums and Variants \uff5c \u4e3a JavaScript \u4e2d\u7684\u6574\u6570\uff08Integer\uff09\u3001\u679a\u4e3e\uff08Enum\uff09\u53ca Variants \u7c7b\u578b\u751f\u6210\u8f6c\u6362\u5668"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(jsConverter)")," on a variant type to create converter functions that allow back and forth conversion between JS integer enum and ReScript variant values."),(0,i.kt)("p",null,"\u53ef\u4ee5\u4e3a\u4e00\u4e2a variant \u7c7b\u578b\u6dfb\u52a0 ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(jsConverter)")," \u6765\u521b\u5efa\u8f6c\u6362\u5668\u51fd\u6570\u3002\u8fd9\u4e9b\u51fd\u6570\u53ef\u4ee5\u5c06 variant \u8f6c\u6362\u4e3a\u5728JS\u4e2d\u4f7f\u7528\u7684\u6574\u6570\uff08Integer\uff09\u4e0e\u679a\u4e3e\uff08Enum\uff09\uff0c\u4e5f\u53ef\u4ee5\u5c06\u8fd9\u4e24\u4e2a\u7c7b\u578b\u8f6c\u6362\u4e3a\u5728 ReScript \u4e2d\u4f7f\u7528\u7684variant\u503c\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),"@deriving(jsConverter)\ntype fruit =\n  | Apple\n  | Orange\n  | Kiwi\n  | Watermelon;\n")),(0,i.kt)("p",null,"This option causes ",(0,i.kt)("inlineCode",{parentName:"p"},"jsConverter")," to, again, generate functions of the following types:\n",(0,i.kt)("inlineCode",{parentName:"p"},"jsConverter")," \u4f1a\u518d\u6b21\u751f\u6210\u4ee5\u4e0b\u7c7b\u578b\u7684\u51fd\u6570\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-resi"}),"let fruitToJs: fruit => int;\n\nlet fruitFromJs: int => option(fruit);\n")),(0,i.kt)("p",null,"For ",(0,i.kt)("inlineCode",{parentName:"p"},"fruitToJs"),", each fruit variant constructor would map into an integer, starting at 0, in the order they're declared."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"fruitToJs")," \u4f1a\u4e3a\u6bcf\u4e2a\u540d\u4e3a fruit \u7684variant\u7684\u6784\u9020\u5668\u6620\u5c04\u8fdb\u4e00\u4e2a\u6574\u6570\uff08integer\uff09\u3002\u4ece0\u5f00\u59cb\uff0c\u6309\u7167 variant \u4e2d\u7684\u58f0\u660e\u7684\u987a\u5e8f\u8fdb\u884c\u7d2f\u52a0\u3002"),(0,i.kt)("p",null,"For ",(0,i.kt)("inlineCode",{parentName:"p"},"fruitFromJs"),", the return value is an ",(0,i.kt)("inlineCode",{parentName:"p"},"option"),", because not every int maps to a constructor."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"fruitFromJs")," \u4f1a\u8fd4\u56de\u4e00\u4e2a variant \u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"option"),"\uff0c\u4f46\u662f\u4e0d\u4f1a\u6bcf\u4e2a\u6574\u6570\u90fd\u53ef\u4ee5\u6620\u5c04\u8fdb\u4e00\u4e2a\u6784\u9020\u5668\u3002"),(0,i.kt)("p",null,"You can also attach a ",(0,i.kt)("inlineCode",{parentName:"p"},"@as(1234)")," to each constructor to customize their output."),(0,i.kt)("p",null,"\u4e5f\u53ef\u4ee5\u4e3a variant \u4e2d\u7684\u6784\u9020\u5668\u6dfb\u52a0 ",(0,i.kt)("inlineCode",{parentName:"p"},"@as(1234)")," \u6765\u81ea\u5b9a\u4e49\u5176\u8f93\u51fa\u3002"),(0,i.kt)("h3",l({},{id:"usage-\uff5c-\u7528\u6cd5"}),"Usage \uff5c \u7528\u6cd5"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),'@deriving(jsConverter)\ntype fruit =\n  | Apple\n  | @as(10) Orange\n  | @as(100) Kiwi\n  | Watermelon\n\nlet zero = fruitToJs(Apple) /* 0 */\n\nswitch fruitFromJs(100) {\n| Some(Kiwi) => Js.log("this is Kiwi")\n| _ => Js.log("received something wrong from the JS side")\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),": by using ",(0,i.kt)("inlineCode",{parentName:"p"},"@as")," here, all subsequent number encoding changes. ",(0,i.kt)("inlineCode",{parentName:"p"},"Apple")," is still ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Orange")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"10"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Kiwi")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"100")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Watermelon")," is ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"101")),"!"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6ce8\u610f"),": \u56e0\u4e3a\u4f7f\u7528",(0,i.kt)("inlineCode",{parentName:"p"},"@as"),", \u8fd9\u91cc\u7684\u6570\u5b57\u7f16\u53f7\u4ea7\u751f\u4e86\u53d8\u5316\u3002",(0,i.kt)("inlineCode",{parentName:"p"},"Apple")," \u8fd8\u662f ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),", \u4f46 ",(0,i.kt)("inlineCode",{parentName:"p"},"Orange")," \u53d8\u4e3a\u4e86 ",(0,i.kt)("inlineCode",{parentName:"p"},"10"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Kiwi")," \u53d8\u4e3a\u4e86 ",(0,i.kt)("inlineCode",{parentName:"p"},"100")," \uff0c \u56e0\u6b64 ",(0,i.kt)("inlineCode",{parentName:"p"},"Watermelon")," \u53d8\u6210\u4e86 ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"101")),"!"),(0,i.kt)("h3",l({},{id:"more-safety-\uff5c-\u66f4\u597d\u7684\u5b89\u5168\u6027"}),"More Safety \uff5c \u66f4\u597d\u7684\u5b89\u5168\u6027"),(0,i.kt)("p",null,"Similar to the JS object <-> record deriving, you can hide the fact that the JS enum are ints by using the same ",(0,i.kt)("inlineCode",{parentName:"p"},"newType")," option with ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(jsConverter)"),":"),(0,i.kt)("p",null,"\u4e0e JS\u5bf9\u8c61 <-> record \u7c7b\u578b\u95f4\u7684\u8f6c\u6362\u7c7b\u4f3c\uff0c\u901a\u8fc7\u4f7f\u7528 ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(jsConverter)")," \u53ca\u5176\u9009\u9879 ",(0,i.kt)("inlineCode",{parentName:"p"},"newType")," \uff0c JS\u7684 enum \u662f\u6574\u6570\u7684\u4e8b\u5b9e\u4f1a\u88ab\u9690\u85cf\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),"@deriving({jsConverter: newType})\ntype fruit =\n  | Apple\n  | @as(100) Kiwi\n  | Watermelon;\n")),(0,i.kt)("p",null,"This option causes ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(jsConverter)")," to generate functions of the following types:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@deriving({jsConverter: newType})")," \u4f1a\u751f\u6210\u4ee5\u4e0b\u7c7b\u578b\u7684\u51fd\u6570\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-resi"}),"let fruitToJs: fruit => abs_fruit;\n\nlet fruitFromJs: abs_fruit => fruit;\n")),(0,i.kt)("p",null,"For ",(0,i.kt)("inlineCode",{parentName:"p"},"fruitFromJs"),", the return value, unlike the previous non-abstract type case, doesn't contain an ",(0,i.kt)("inlineCode",{parentName:"p"},"option"),", because there's no way a bad value can be passed into it; the only creator of ",(0,i.kt)("inlineCode",{parentName:"p"},"abs_fruit")," values is ",(0,i.kt)("inlineCode",{parentName:"p"},"fruitToJs"),"!"),(0,i.kt)("p",null,"\u8fd9\u6b21\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"fruitFromJs")," \u8fd4\u56de\u7684\u503c\u4e0e\u4e4b\u524d\u7684\u975e\u62bd\u8c61\u7c7b\u578b\uff08non-abstract type \uff09\u4e0d\u540c\uff0c \u5b83\u4e0d\u5305\u542b  ",(0,i.kt)("inlineCode",{parentName:"p"},"option"),"\u3002\u800c\u4e14\u56e0\u4e3a\u53ea\u6709 ",(0,i.kt)("inlineCode",{parentName:"p"},"fruitToJs")," \u53ef\u4ee5\u521b\u5efa ",(0,i.kt)("inlineCode",{parentName:"p"},"abs_fruit")," \u7c7b\u578b\u7684\u503c\uff0c\u8fd9\u4e5f\u8ba9\u5b83\u907f\u514d\u4e86\u63a5\u6536\u5230\u9519\u8bef\u503c\u7684\u53ef\u80fd\u6027\u3002"),(0,i.kt)("h4",l({},{id:"usage--\u4f7f\u7528\u65b9\u6cd5"}),"Usage | \u4f7f\u7528\u65b9\u6cd5"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),'@deriving({jsConverter: newType})\ntype fruit =\n  | Apple\n  | @as(100) Kiwi\n  | Watermelon\n\nlet opaqueValue = fruitToJs(Apple)\n\n@module("myJSFruits") external jsKiwi: abs_fruit = "iSwearThisIsAKiwi"\nlet kiwi = fruitFromJs(jsKiwi)\n\nlet error = fruitFromJs(100) /* nope, can\'t take a random int */\n')),(0,i.kt)("h2",l({},{id:"convert-record-type-to-abstract-record--\u8f6c\u6362-record-\u5230\u62bd\u8c61record\u7c7b\u578b"}),"Convert Record Type to Abstract Record | \u8f6c\u6362 Record \u5230\u62bd\u8c61Record\u7c7b\u578b"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Note"),": For ReScript >= v7, we recommend using ",(0,i.kt)("a",l({parentName:"p"},{href:"bind-to-js-object#bind-to-record-like-js-objects"}),"plain records to compile to JS objects"),".\nThis feature might still be useful for certain scenarios, but the ergonomics might be worse")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"\u6ce8\u610f"),": \u5bf9\u4e8ev7\u4ee5\u4e0a\u7248\u672c\u7684ReScript, \u63a8\u8350\u4f7f\u7528",(0,i.kt)("a",l({parentName:"p"},{href:"bind-to-js-object#bind-to-record-like-js-objects"}),"\u7528\u4e8e\u7f16\u8bd1\u4f4d JS \u5bf9\u8c61\u7684record"),".\n\u5bf9\u4e8e\u7279\u5b9a\u573a\u666f\uff0c\u8fd9\u4e2a\u529f\u80fd\u53ef\u4ee5\u4ecd\u7136\u4f1a\u975e\u5e38\u6709\u7528\uff0c\u4f46\u662f\u4f7f\u7528\u4f53\u68c0\u6bd4\u8f83\u7cdf\u7cd5\u3002")),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(abstract)")," on a record type to expand the type into a creation, and a set of getter / setter functions for fields and methods.\n\u7ed9\u4e00\u4e2a record \u7c7b\u578b\u6dfb\u52a0 ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(abstract)")," \uff0c\u53ef\u4ee5\u81ea\u52a8\u4e3a\u5176\u5b57\u6bb5\uff08fields\uff09\u548c\u65b9\u6cd5\uff08methods\uff09 \u751f\u6210getter / setter \u51fd\u6570\uff0c\u5e76\u4f7f\u5176\u672c\u8eab\u53ef\u4ee5\u88ab\u6269\u5c55\u3002"),(0,i.kt)("p",null,"Usually you'd just use ReScript records to compile to JS objects of the same shape. There is still one particular use-case left where the ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(abstract)")," convertion is still useful: Whenever you need compile a record with an optional field where the JS object attribute shouldn't show up in the resulting JS when undefined (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},'{name: "Carl", age: undefined}')," vs ",(0,i.kt)("inlineCode",{parentName:"p"},'{name: "Carl"}'),"). Check the ",(0,i.kt)("a",l({parentName:"p"},{href:"#optional-labels"}),"Optional Labels")," section for more infos on this particular scenario."),(0,i.kt)("p",null,"\u901a\u5e38\uff0c\u6211\u4eec\u4f1a\u60f3\u5c06 ReScript \u7684record\u7c7b\u578b\u7f16\u8bd1\u4e3a\u5177\u6709\u76f8\u540c\u7ed3\u6784\u7684 JS \u5bf9\u8c61\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u5173\u4e8e ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(abstract)")," \u7684\u7279\u5b9a\u8f6c\u6362\u4f7f\u7528\u573a\u666f\u53ef\u80fd\u4f1a\u5bf9\u6b64\u6709\u5e2e\u52a9\uff1a \u5f53\u4e0d\u60f3\u5c06 record \u4e2d\u7684\u53ef\u9009\u5b57\u6bb5\u4f5c\u4e3a\u4e00\u4e2aJS\u5bf9\u8c61\u4e2d undefined \u5b57\u6bb5\u65f6\uff08\u4f8b\u5982\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},'{name: "Carl", age: undefined}')," \u4e0e ",(0,i.kt)("inlineCode",{parentName:"p"},'{name: "Carl"}'),"\uff09\uff0c\u8bf7\u67e5\u770b",(0,i.kt)("a",l({parentName:"p"},{href:"#optional-labels"}),"\u53ef\u9009\u6807\u7b7e\uff08Optional Labels\uff09"),"\u6765\u4e86\u89e3\u5173\u4e8e\u8be5\u573a\u666f\u7684\u66f4\u591a\u7ec6\u8282\u3002"),(0,i.kt)("h3",l({},{id:"usage-example-\uff5c-\u4f7f\u7528\u65b9\u6cd5\u793a\u4f8b"}),"Usage Example \uff5c \u4f7f\u7528\u65b9\u6cd5\u793a\u4f8b"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),'@deriving(abstract)\ntype person = {\n  name: string,\n  age: int,\n  job: string,\n};\n\n@val external john : person = "john";\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),": the ",(0,i.kt)("inlineCode",{parentName:"p"},"person")," type is ",(0,i.kt)("strong",{parentName:"p"},"not")," a record! It's a record-looking type that uses the record's syntax and type-checking. The ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(abstract)")," decorator turns it into an \"abstract type\" (aka you don't know what the actual value's shape)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6ce8\u610f"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"person")," \u7c7b\u578b ",(0,i.kt)("strong",{parentName:"p"},"\u4e0d\u662f")," \u4e00\u4e2arecord! \u5b83\u662f\u4e00\u4e2a\u4f7f\u7528 record \u8bed\u6cd5\u548c\u7c7b\u578b\u68c0\u67e5\u7684record-looking\u7c7b\u578b\u3002 ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(abstract)")," \u88c5\u9970\u5668\u4f1a\u628a\u5b83\u8f6c\u6362\u4e3a\u4e00\u4e2a \u201c\u62bd\u8c61\u7c7b\u578b\u201d (\u4f17\u6240\u5468\u77e5\uff0c\u6211\u4eec\u65e0\u6cd5\u77e5\u9053\u62bd\u8c61\u7c7b\u578b\u7684\u5b9e\u9645\u503c\u662f\u4ec0\u4e48)."),(0,i.kt)("h3",l({},{id:"creation--\u521b\u5efa"}),"Creation | \u521b\u5efa"),(0,i.kt)("p",null,"You don't have to bind to an existing ",(0,i.kt)("inlineCode",{parentName:"p"},"person")," object from the JS side. You can also create such ",(0,i.kt)("inlineCode",{parentName:"p"},"person")," JS object from ReScript's side."),(0,i.kt)("p",null,"\u7ed1\u5b9a\u4e00\u4e2a\u6765\u81ea JS \u7aef\u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"person")," \u5bf9\u8c61\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5728 ReScript \u7aef\u521b\u5efa\u4e00\u4e2a ",(0,i.kt)("inlineCode",{parentName:"p"},"person")," JS\u5bf9\u8c61\u3002"),(0,i.kt)("p",null,"Since ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(abstract)")," turns the above ",(0,i.kt)("inlineCode",{parentName:"p"},"person")," record into an abstract type, you can't directly create a person record as you would usually. This doesn't work: ",(0,i.kt)("inlineCode",{parentName:"p"},'{name: "Joe", age: 20, job: "teacher"}'),"."),(0,i.kt)("p",null,"\u7531\u4e8e ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(abstract)")," \u4f1a\u628a ",(0,i.kt)("inlineCode",{parentName:"p"},"person")," record \u8f6c\u6362\u4e3a\u4e00\u4e2a\u62bd\u8c61\u7c7b\u578b\uff0c\u56e0\u6b64\u8fd9\u91cc\u65e0\u6cd5\u50cf\u5f80\u5e38\u4e00\u6837\u76f4\u63a5\u521b\u5efa\u4e00\u4e2a ",(0,i.kt)("inlineCode",{parentName:"p"},"person")," record\u3002 ",(0,i.kt)("inlineCode",{parentName:"p"},'{name: "Joe", age: 20, job: "teacher"}')," \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u662f\u65e0\u7528\u7684\u3002"),(0,i.kt)("p",null,"Instead, you'd use the ",(0,i.kt)("strong",{parentName:"p"},"creation function")," of the same name as the record type, implicitly generated by the ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(abstract)")," annotation:"),(0,i.kt)("p",null,"\u76f8\u5e94\u5730\uff0c\u53ef\u4ee5\u4f7f\u7528 ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(abstract)")," \u9690\u5f0f\u751f\u6210\u5e76\u4e0e\u8be5 record \u7c7b\u578b\u5177\u6709\u76f8\u540c\u540d\u5b57\u7684 ",(0,i.kt)("strong",{parentName:"p"},"\u521b\u5efa\u51fd\u6570\uff08creation function\uff09")," \u6765\u89e3\u51b3\u6b64\u7c7b\u95ee\u9898\uff1a"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),'let joe = person(~name="Joe", ~age=20, ~job="teacher")\n')),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-js"}),'var joe = {\n  name: "Joe",\n  age: 20,\n  job: "teacher"\n};\n'))),(0,i.kt)("p",null,"Note how in the example above there is no JS runtime overhead."),(0,i.kt)("p",null,"\u8bf7\u6ce8\u610f\uff0c\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u662f\u6ca1\u6709 JS \u8fd0\u884c\u65f6\u5f00\u9500\u7684\u3002"),(0,i.kt)("h4",l({},{id:"rename-fields-\uff5c-\u5b57\u6bb5\u91cd\u547d\u540d\uff08fields\uff09"}),"Rename Fields \uff5c \u5b57\u6bb5\u91cd\u547d\u540d\uff08Fields\uff09"),(0,i.kt)("p",null,"Sometimes you might be binding to a JS object with field names that are invalid in ReScript. Two examples would be ",(0,i.kt)("inlineCode",{parentName:"p"},'{type: "foo"}')," (reserved keyword in ReScript) and ",(0,i.kt)("inlineCode",{parentName:"p"},'{"aria-checked": true}'),". Choose a valid field name then use ",(0,i.kt)("inlineCode",{parentName:"p"},"@as")," to circumvent this:"),(0,i.kt)("p",null,"\u6709\u4e9b\u65f6\u5019\uff0c\u4f1a\u9700\u8981\u7ed1\u5b9a\u4e00\u4e9b\u5728 ReScript \u4e2d\u65e0\u6548\u7684\u7684\u5b57\u6bb5\u540d\u5230JS\u5bf9\u8c61\u4e2d\u3002\u4f8b\u5982\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},'{type: "foo"}')," \u548c ",(0,i.kt)("inlineCode",{parentName:"p"},'{"aria-checked": true}')," \u4e2d\u7684\u5b57\u6bb5\u540d\u79f0\u5728 ReScript \u4e2d\u662f\u4fdd\u7559\u7684\u5173\u952e\u5b57\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528 ",(0,i.kt)("inlineCode",{parentName:"p"},"@as")," \u6765\u89c4\u907f\u8fd9\u4e2a\u95ee\u9898\uff1a"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),'@deriving(abstract)\ntype data = {\n  @as("type") type_: string,\n  @as("aria-label") ariaLabel: string,\n};\n\nlet d = data(~type_="message", ~ariaLabel="hello");\n')),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-js"}),'var d = {\n  type: "message",\n  "aria-label": "hello"\n};\n'))),(0,i.kt)("h4",l({},{id:"optional-labels-\uff5c-\u53ef\u9009\u6807\u7b7e\uff08optional-labels\uff09"}),"Optional Labels \uff5c \u53ef\u9009\u6807\u7b7e\uff08Optional Labels\uff09"),(0,i.kt)("p",null,"You can omit fields during the creation of the object:"),(0,i.kt)("p",null,"\u53ef\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u5ffd\u7565\u8be5\u5b57\u6bb5\uff1a"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),'@deriving(abstract)\ntype person = {\n  @optional name: string,\n  age: int,\n  job: string,\n};\n\nlet joe = person(~age=20, ~job="teacher", ());\n')),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-js"}),'var joe = {\n  age: 20,\n  job: "teacher"\n};\n'))),(0,i.kt)("p",null,"Optional values that are not defined, will not show up as an attribute in the resulting JS object. In the example above, you will see that ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," was omitted."),(0,i.kt)("p",null,"\u672a\u5b9a\u4e49\u7684\u53ef\u9009\u503c\u4e0d\u4f1a\u4f5c\u4e3a\u4e00\u4e2a\u5c5e\u6027\u51fa\u73b0\u5728\u6700\u7ec8\u751f\u6210\u7684 JS \u5bf9\u8c61\u4e2d\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u53ef\u4ee5\u770b\u5230 ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," \u5b57\u6bb5\u88ab\u5ffd\u7565\u4e86\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note")," that the ",(0,i.kt)("inlineCode",{parentName:"p"},"@optional")," tag turned the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," field optional. Merely typing ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"option<string>")," wouldn't work."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6ce8\u610f")," ",(0,i.kt)("inlineCode",{parentName:"p"},"@optional")," \u6807\u7b7e\u628a ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," \u6807\u8bb0\u4e3a\u53ef\u9009\u3002\u4f46\u5982\u679c\u53ea\u662f\u5c06 ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," \u7684\u7c7b\u578b\u6807\u8bb0\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"option<string>"),"\u662f\u4e0d\u4f1a\u628a\u8be5\u5b57\u6bb5\u6807\u8bb0\u4e3a\u53ef\u9009\u7684\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),": now that your creation function contains optional fields, we mandate an unlabeled ",(0,i.kt)("inlineCode",{parentName:"p"},"()")," at the end to indicate that ",(0,i.kt)("a",l({parentName:"p"},{href:"function#optional-labeled-arguments"}),"you've finished applying the function"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6ce8\u610f"),"\uff1a\u56e0\u4e3a\u521b\u5efa\u51fd\u6570\uff08creation function\uff09\u5305\u542b\u53ef\u9009\u5b57\u6bb5\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528 ",(0,i.kt)("inlineCode",{parentName:"p"},"()")," \u6765\u66ff\u4ee3\u53ef\u9009\u5b57\u6bb5\uff0c\u4ee5\u8868\u793a",(0,i.kt)("a",l({parentName:"p"},{href:"function#optional-labeled-arguments"}),"\u5df2\u5b8c\u6210\u8be5\u51fd\u6570\u7684\u8c03\u7528")),(0,i.kt)("h3",l({},{id:"accessors-\uff5c-\u5b58\u53d6\u5668\uff08accessors\uff09"}),"Accessors \uff5c \u5b58\u53d6\u5668\uff08Accessors\uff09"),(0,i.kt)("p",null,"Again, since ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(abstract)")," hides the actual record shape, you can't access a field using e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"joe.age"),". We remediate this by generating getter and setters."),(0,i.kt)("p",null,"\u518d\u6b21\u5f3a\u8c03\uff0c\u7531\u4e8e ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(abstract)")," \u9690\u85cf\u4e86\u8be5 record \u7684\u5b9e\u9645\u7ed3\u6784\uff0c\u6240\u4ee5\u65e0\u6cd5\u901a\u8fc7\u4f7f\u7528\u7c7b\u4f3c ",(0,i.kt)("inlineCode",{parentName:"p"},"joe.age")," \u7684\u5f62\u5f0f\u6765\u8bbf\u95ee\u5b57\u6bb5\u3002\u9700\u8981\u901a\u8fc7\u751f\u6210 getter \u548c setters \u65b9\u6cd5\u6765\u8865\u6551\u3002"),(0,i.kt)("h4",l({},{id:"read-\uff5c-\u8bfb\u53d6"}),"Read \uff5c \u8bfb\u53d6"),(0,i.kt)("p",null,"One getter function is generated per ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(abstract)")," record type field. In the above example, you'd get 3 functions: ",(0,i.kt)("inlineCode",{parentName:"p"},"nameGet"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ageGet"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"jobGet"),". They take in a ",(0,i.kt)("inlineCode",{parentName:"p"},"person")," value and return ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," respectively:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(abstract)")," \u7684 record \u7c7b\u578b\u4f1a\u4e3a\u6bcf\u4e2a\u5b57\u6bb5\u751f\u6210\u4e00\u4e2a\u5bf9\u5e94\u7684 getter \u51fd\u6570\u3002\u4ee5\u4e0a\u9762\u7684\u4ee3\u7801\u4e3a\u4f8b\uff0c\u5b83\u4f1a\u751f\u6210\u4e09\u4e2a\u51fd\u6570\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"nameGet"),"\u3001 ",(0,i.kt)("inlineCode",{parentName:"p"},"ageGet")," \u548c ",(0,i.kt)("inlineCode",{parentName:"p"},"jobGet"),"\u3002 \u5b83\u4eec\u4f1a\u63a5\u6536\u4e00\u4e2a ",(0,i.kt)("inlineCode",{parentName:"p"},"person")," \u503c\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u5206\u522b\u8fd4\u56de",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"\u3001 ",(0,i.kt)("inlineCode",{parentName:"p"},"int")," \u548c ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),"let twenty = ageGet(joe)\n")),(0,i.kt)("p",null,"Alternatively, you can use the ",(0,i.kt)("a",l({parentName:"p"},{href:"pipe"}),"Pipe")," operator (",(0,i.kt)("inlineCode",{parentName:"p"},"->"),") for a nicer-looking access syntax:"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),"let twenty = joe->ageGet\n")),(0,i.kt)("p",null,"If you prefer shorter names for the getter functions, we also support a ",(0,i.kt)("inlineCode",{parentName:"p"},"light")," setting:"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),'@deriving({abstract: light})\ntype person = {\n  name: string,\n  age: int,\n}\n\nlet joe = person(~name="Joe", ~age=20)\nlet joeName = name(joe)\n')),(0,i.kt)("p",null,"The getter functions will now have the same names as the object fields themselves."),(0,i.kt)("h4",l({},{id:"write-\uff5c-\u5199\u5165"}),"Write \uff5c \u5199\u5165"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(abstract)")," value is immutable by default. To mutate such value, you need to first mark one of the abstract record field as ",(0,i.kt)("inlineCode",{parentName:"p"},"mutable"),", the same way you'd mark a normal record as mutable:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(abstract)")," \u503c\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684\uff08immutable\uff09\u3002\u5982\u679c\u60f3\u5c06\u5176\u53d8\u4e3a\u53ef\u53d8\uff08mutatale\uff09\uff0c\u9700\u8981\u5c06\u8be5\u62bd\u8c61 record \u7684\u5b57\u6bb5\u6807\u8bb0\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"mutable"),"\uff0c\u5c31\u50cf\u6807\u8bb0\u4e00\u4e2a\u666e\u901a\u7684 record \u4e3a\u53ef\u53d8\uff08mutable\uff09\u4e00\u6837\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),"@deriving(abstract)\ntype person = {\n  name: string,\n  mutable age: int,\n  job: string,\n}\n")),(0,i.kt)("p",null,"Then, a setter of the name ",(0,i.kt)("inlineCode",{parentName:"p"},"ageSet")," will be generated. Use it like so:"),(0,i.kt)("p",null,"\u7136\u540e\uff0c\u4f1a\u751f\u6210\u4e00\u4e2a\u540d\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"ageSet")," \u7684 setter \u51fd\u6570\u3002\u53ef\u4ee5\u50cf\u8fd9\u6837\u4f7f\u7528\u5b83\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),'let joe = person(~name="Joe", ~age=20, ~job="teacher");\nageSet(joe, 21);\n')),(0,i.kt)("p",null,"Alternatively, with the Pipe First syntax:"),(0,i.kt)("p",null,"\u4e5f\u53ef\u4ee5\u901a\u8fc7 Pipe First \u8bed\u6cd5\u6765\u4f7f\u7528\u5b83\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),"joe->ageSet(21)\n")),(0,i.kt)("h3",l({},{id:"methods-\uff5c-\u65b9\u6cd5"}),"Methods \uff5c \u65b9\u6cd5"),(0,i.kt)("p",null,"You can attach arbitrary methods onto a type (",(0,i.kt)("em",{parentName:"p"},"any")," type, as a matter of fact. Not just ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(abstract)")," record types). See ",(0,i.kt)("a",l({parentName:"p"},{href:"bind-to-js-function#object-method"}),"Object Method"),' in the "Bind to JS Function" section for more infos.'),(0,i.kt)("p",null,"\u53ef\u4ee5\u9644\u52a0\u4efb\u610f\u65b9\u6cd5\u5230\u4e00\u4e2a\u7c7b\u578b\u4e0a\uff08\u4e8b\u5b9e\u4e0a\uff0c\u4e0d\u53ea\u662f ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(abstract)")," \u4e86\u7684 record \u7c7b\u578b\uff0c\u5b83\u53ef\u4ee5\u662f ",(0,i.kt)("em",{parentName:"p"},"\u4efb\u4f55")," \u7c7b\u578b\uff09\u3002\u67e5\u770b ",(0,i.kt)("a",l({parentName:"p"},{href:"bind-to-js-function#object-method"}),"\u5bf9\u8c61\u65b9\u6cd5\uff08Object Method\uff09")," \u9875\u9762\u4e2d\u7684 \u201c\u7ed1\u5b9a JS \u51fd\u6570\u201d \u5c0f\u8282\u53ef\u4ee5\u83b7\u5f97\u66f4\u591a\u4fe1\u606f\u3002 "),(0,i.kt)("h3",l({},{id:"tips--tricks-\uff5c-\u5c0f\u5efa\u8bae"}),"Tips & Tricks \uff5c \u5c0f\u5efa\u8bae"),(0,i.kt)("p",null,"You can leverage ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(abstract)")," for finer-grained access control."),(0,i.kt)("p",null,"\u53ef\u4ee5\u5229\u7528 ",(0,i.kt)("inlineCode",{parentName:"p"},"@deriving(abstract)")," \u66f4\u7ec6\u7c92\u5ea6\u7684\u8bbf\u95ee\u63a7\u5236\uff08access control\uff09\u3002"),(0,i.kt)("h4",l({},{id:"mutability-\uff5c-\u53ef\u53d8\u6027"}),"Mutability \uff5c \u53ef\u53d8\u6027"),(0,i.kt)("p",null,"You can mark a field as mutable in the implementation (",(0,i.kt)("inlineCode",{parentName:"p"},".res"),") file, while ",(0,i.kt)("em",{parentName:"p"},"hiding")," such mutability in the interface file:"),(0,i.kt)("p",null,"\u53ef\u4ee5\u5728\u5b9e\u73b0\u6587\u4ef6\uff08",(0,i.kt)("inlineCode",{parentName:"p"},".res"),"\u6587\u4ef6\uff09\u4e2d\u5c06\u5b57\u6bb5\u6807\u8bb0\u4e3a\u53ef\u53d8\uff08mutable\uff09\uff0c\u800c\u5728\u63a5\u53e3\u6587\u4ef6\uff08",(0,i.kt)("inlineCode",{parentName:"p"},".resi"),"\u6587\u4ef6\uff09\u4e2d",(0,i.kt)("em",{parentName:"p"},"\u9690\u85cf"),"\u8fd9\u79cd\u53ef\u53d8\u6027\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),"/* test.res */\n@deriving(abstract)\ntype cord = {\n  @optional mutable x: int,\n  y: int,\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-resi"}),"/* test.resi */\n@deriving(abstract)\ntype cord = {\n  @optional x: int,\n  y: int,\n};\n")),(0,i.kt)("p",null,"Tada! Now you can mutate inside your own file as much as you want, and prevent others from doing so!"),(0,i.kt)("p",null,"\u597d\u4e86\uff01\u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u6309\u9700\u5728\u81ea\u5df1\u7684\u6587\u4ef6\u4e2d\u6807\u8bb0\u53ef\u53d8\uff08mutable\uff09\uff0c\u5e76\u9632\u6b62\u5176\u4ed6\u4eba\u8fd9\u4e48\u505a\u3002"),(0,i.kt)("h4",l({},{id:"hide-the-creation-function-\uff5c-\u9690\u85cf\u521b\u5efa\u51fd\u6570\uff08creation-function\uff09"}),"Hide the Creation Function \uff5c \u9690\u85cf\u521b\u5efa\u51fd\u6570\uff08Creation Function\uff09"),(0,i.kt)("p",null,"Mark the record as ",(0,i.kt)("inlineCode",{parentName:"p"},"private")," to disable the creation function:"),(0,i.kt)("p",null,"\u5c06 record \u6807\u8bb0\u4e3a ",(0,i.kt)("inlineCode",{parentName:"p"},"private")," \u53ef\u4ee5\u5173\u95ed\u521b\u5efa\u51fd\u6570\uff08creation function\uff09\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),"@deriving(abstract)\ntype cord = private {\n  @optional x: int,\n  y: int,\n}\n")),(0,i.kt)("p",null,"The accessors are still there, but you can no longer create such data structure. Great for binding to a JS object while preventing others from creating more such object!"),(0,i.kt)("p",null,"\u5b58\u53d6\u5668\uff08Accessors\uff09\u4f9d\u7136\u5b58\u5728\uff0c\u53ea\u662f\u65e0\u6cd5\u518d\u521b\u5efa\u8be5\u6570\u636e\u7ed3\u6784\u3002\u56e0\u6b64\uff0c\u5b83\u975e\u5e38\u9002\u5408\u963b\u6b62\u522b\u4eba\u5728\u7ed1\u5b9a JS \u5bf9\u8c61\u7684\u540c\u65f6\u521b\u5efa\u66f4\u591a\u8be5\u5bf9\u8c61\u3002"),(0,i.kt)("h4",l({},{id:"use-submodules-to-prevent-naming-collisions-and-binding-shadowing-\uff5c-\u4f7f\u7528\u81ea\u6a21\u5757\uff08submodules\uff09\u4ee5\u9632\u6b62\u547d\u540d\u51b2\u7a81\uff08naming-collisions\uff09\u548c\u7ed1\u5b9a\u906e\u853d\uff08binding-shadowing\uff09"}),"Use submodules to prevent naming collisions and binding shadowing \uff5c \u4f7f\u7528\u81ea\u6a21\u5757\uff08submodules\uff09\u4ee5\u9632\u6b62\u547d\u540d\u51b2\u7a81\uff08naming collisions\uff09\u548c\u7ed1\u5b9a\u906e\u853d\uff08binding shadowing\uff09"),(0,i.kt)("p",null,"Oftentimes you will have multiple abstract types with similar attributes. Since\nReScript will expand all abstract getter, setter and creation functions in the\nsame scope where the type is defined, you will eventually run into value shadowing problems."),(0,i.kt)("p",null,"\u5f88\u591a\u65f6\u5019\uff0c\u591a\u4e2a\u62bd\u8c61\u7c7b\u578b\u4f1a\u62e5\u6709\u7c7b\u4f3c\u7684\u5c5e\u6027\u3002\u7531\u4e8e ReScript \u4f1a\u5728\u7c7b\u578b\u88ab\u5b9a\u4e49\u7684\u4f5c\u7528\u57df\u4e2d\u5c55\u5f00\u5168\u90e8\u7684\u62bd\u8c61getter\u3001 setter \u548c\u521b\u5efa\u51fd\u6570\uff08creation functions\uff09\uff0c\u6700\u7ec8\u5b83\u4f1a\u5bfc\u81f4\u503c\u906e\u853d\uff08value shadowing\uff09\u95ee\u9898\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"For example:"),"\n",(0,i.kt)("strong",{parentName:"p"},"\u4f8b\u5982\uff1a")),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),'@deriving(abstract)\ntype person = {name: string}\n\n@deriving(abstract)\ntype cat = {\n  name: string,\n  isLazy: bool,\n};\n\nlet person = person(~name="Alice")\n\n/* Error: This expression has type person but an expression was expected\n   of type cat */\n/* \u9519\u8bef\uff1a\u8be5\u8868\u8fbe\u5f0f\u5177\u6709 type person\uff0c\u4f46\u8fd9\u91cc\u5e0c\u671b\u8be5\u8868\u8fbe\u5f0f\u662f type cat  */\nperson->nameGet()\n')),(0,i.kt)("p",null,"To get around this issue, you can use modules to group a type with its related\nfunctions and later use them via local open statements:\n\u8981\u89e3\u51b3\u8be5\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528\u6a21\u5757\uff08module\uff09\u5c06\u7c7b\u578b\u4e0e\u5176\u76f8\u5173\u51fd\u6570\u5c01\u88c5\u5728\u4e00\u8d77\uff0c\u5e76\u5728\u7a0d\u540e\u901a\u8fc7\u4f7f\u7528\u672c\u5730 open \u58f0\u660e\u6765\u4f7f\u7528\u5b83\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),'module Person = {\n  @deriving(abstract)\n  type t = {name: string}\n}\n\nmodule Cat = {\n  @deriving(abstract)\n  type t = {\n    name: string,\n    isLazy: bool,\n  }\n}\n\nlet person = Person.t(~name="Alice")\nlet cat = Cat.t(~name="Snowball", ~isLazy=true)\n\n/* We can use each nameGet function separately now */\n/* \u73b0\u5728\u53ef\u4ee5\u5206\u522b\u4f7f\u7528\u6bcf\u4e2a nameGet \u51fd\u6570 */\nlet shoutPersonName = {\n  open Person\n  person->nameGet->Js.String.toUpperCase\n}\n\n/* Note how we use a local `open Cat` expression to\n get access to Cat\'s nameGet function */\n /* \u8bf7\u6ce8\u610f\u6211\u4eec\u662f\u5982\u4f55\u4f7f\u7528\u4e00\u4e2a\u672c\u5730\u7684 `open Cat` \u8868\u8fbe\u5f0f\u6765\u8bbf\u95ee Cat \u7684 nameGet \u51fd\u6570\u7684 */\nlet whisperCatName = {\n  open Cat\n  cat->nameGet->Js.String.toLowerCase\n}\n')),(0,i.kt)("h2",l({},{id:"convert-external-into-js-object-creation-function-\uff5c-\u5c06\u5916\u90e8\u8f6c\u6362\u4e3a-js-\u5bf9\u8c61\u521b\u5efa\u51fd\u6570"}),"Convert External into JS Object Creation Function \uff5c \u5c06\u5916\u90e8\u8f6c\u6362\u4e3a JS \u5bf9\u8c61\u521b\u5efa\u51fd\u6570"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"@obj")," on an ",(0,i.kt)("inlineCode",{parentName:"p"},"external")," binding to create a function that, when called, will evaluate to a JS object with fields corresponding to the function's parameter labels."),(0,i.kt)("p",null,"\u4f7f\u7528\u5177\u6709 ",(0,i.kt)("inlineCode",{parentName:"p"},"@obj")," \u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"external")," \u7ed1\u5b9a\u6765\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\u3002\u5f53\u8c03\u7528\u8be5\u51fd\u6570\u65f6\uff0c\u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u4e0e\u8be5\u51fd\u6570\u53c2\u6570\u6807\u7b7e\u76f8\u5bf9\u5e94\u5b57\u6bb5\u7684 JS \u5bf9\u8c61\u3002"),(0,i.kt)("p",null,"This is very handy because you can make some of those labelled parameters optional and if you don't pass them in, the output object won't include the corresponding fields. Thus you can use it to dynamically create objects with the subset of fields you need at runtime."),(0,i.kt)("p",null,"\u8fd9\u6837\u505a\u975e\u5e38\u65b9\u4fbf\uff01\u56e0\u4e3a\u5982\u679c\u6709\u4e00\u4e9b\u4e0d\u60f3\u88ab\u4f20\u9012\u7684\u53c2\u6570\uff0c\u5219\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u6807\u7b7e\u5316\u7684\u53c2\u6570\u6807\u8bb0\u4e3a\u53ef\u9009\uff08optional\uff09\u3002\u8fd9\u6837\uff0c\u751f\u6210\u7684\u5bf9\u8c61\u4fbf\u4e0d\u4f1a\u5305\u542b\u8fd9\u4e9b\u53ef\u9009\u5b57\u6bb5\u3002\u56e0\u6b64\uff0c\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u5728\u8fd0\u884c\u65f6\u4e2d\u52a8\u6001\u521b\u5efa\u5bf9\u8c61\uff0c\u53ef\u4ee5\u8ba9\u5176\u53ea\u5305\u542b\u9700\u8981\u7684\u5b57\u6bb5\u3002"),(0,i.kt)("p",null,"For example, suppose you need a JavaScript object like this:"),(0,i.kt)("p",null,"\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u9700\u8981\u4e00\u4e2a\u50cf\u8fd9\u6837\u7684 JavaScript \u5bf9\u8c61\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-js"}),'var homeRoute = {\n  type: "GET",\n  path: "/",\n  action: () => console.log("Home"),\n  // options: ...\n};\n')),(0,i.kt)("p",null,"But only the first three fields are required; the options field is optional. You can declare the binding function like so:"),(0,i.kt)("p",null,"\u4f46\u53ea\u9700\u8981\u524d\u4e09\u4e2a\u5b57\u6bb5\u3002options \u5b57\u6bb5\u662f\u53ef\u9009\u7684\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a\u50cf\u8fd9\u6837\u7684\u7ed1\u5b9a\u51fd\u6570\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),'@obj\nexternal route: (\n  ~\\"type": string,\n  ~path: string,\n  ~action: list<string> => unit,\n  ~options: {..}=?,\n  unit,\n) => _ = ""\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),": the ",(0,i.kt)("inlineCode",{parentName:"p"},' = ""')," part at the end is just a dummy placeholder, due to syntactic limitations. It serves no purpose currently."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6ce8\u610f"),": \u7531\u4e8e\u8bed\u6cd5\u9650\u5236\uff0c\u672b\u5c3e\u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},' = ""')," \u53ea\u662f\u4e00\u4e2a\u865a\u62df\u5360\u4f4d\u7b26\u3002"),(0,i.kt)("p",null,"This function has four labelled parameters (the fourth one optional), one unlabelled parameter at the end (which we mandate for functions with ",(0,i.kt)("a",l({parentName:"p"},{href:"function#optional-labeled-arguments"}),"optional parameters"),", and one parameter (",(0,i.kt)("inlineCode",{parentName:"p"},'\\"type"'),") that required quoting to ",(0,i.kt)("a",l({parentName:"p"},{href:"use-illegal-identifier-names"}),"avoid clashing")," with the reserved ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," keyword."),(0,i.kt)("p",null,"\u8be5\u51fd\u6570\u6709\u56db\u4e2a\u5e26\u6807\u7b7e\u7684\u53c2\u6570\uff08\u7b2c\u56db\u4e2a\u662f\u53ef\u9009\u7684\uff09\uff0c\u548c\u5728\u672b\u5c3e\u5904\u7684\u4e00\u4e2a\u65e0\u6807\u7b7e\u7684\u53c2\u6570\u3002\u5176\u4e2d\uff0c\u53c2\u6570 options \u662f\u4e00\u4e2a",(0,i.kt)("a",l({parentName:"p"},{href:"function#optional-labeled-arguments"}),"\u53ef\u9009\u53c2\u6570"),"\uff0c\u800c\u7531\u4e8e\u5728 ReScript \u4e2d type \u662f\u4e00\u4e2a\u4fdd\u7559\u7684\u5173\u952e\u5b57\uff0c\u6240\u4ee5\u53c2\u6570 ",(0,i.kt)("inlineCode",{parentName:"p"},'\\"type"')," \u5fc5\u987b\u5e26\u6709\u53cc\u5f15\u53f7\u4ece\u800c",(0,i.kt)("a",l({parentName:"p"},{href:"use-illegal-identifier-names"}),"\u907f\u514d\u51b2\u7a81"),"\u3002"),(0,i.kt)("p",null,"Also of interest is the return type: ",(0,i.kt)("inlineCode",{parentName:"p"},"_"),", which tells ReScript to automatically infer the full type of the JS object, sparing you the hassle of writing down the type manually!"),(0,i.kt)("p",null,"\u540c\u6837\u6709\u8da3\u7684\u662f\u5176\u8fd4\u56de\u7c7b\u578b\uff1a",(0,i.kt)("inlineCode",{parentName:"p"},"_")," \u4f1a\u8ba9 ReScript \u81ea\u52a8\u5bf9JS\u5bf9\u8c61\u7684\u5168\u7c7b\u578b\u8fdb\u884c\u63a8\u5bfc\uff0c\u907f\u514d\u4e86\u9700\u8981\u624b\u5199\u7c7b\u578b\u7684\u9ebb\u70e6\uff01"),(0,i.kt)("p",null,"The function is called like so:"),(0,i.kt)("p",null,"\u8be5\u51fd\u6570\u4f1a\u50cf\u8fd9\u6837\u88ab\u8c03\u7528\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",l({parentName:"pre"},{className:"language-res"}),'let homeRoute = route(\n  ~\\"type"="GET",\n  ~path="/",\n  ~action=_ => Js.log("Home"),\n  (),\n)\n')))}u.isMDXComponent=!0,u.frontmatter={title:"Generate Converters & Helpers",description:"All about the @deriving decorator, and how to generate code from types",canonical:"/docs/manual/latest/generate-converters-accessors",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs-cn/manual/latest/generate-converters-accessors.mdx"}},75098:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs-cn/manual/latest/generate-converters-accessors",function(){return n(97266)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=75098,e(e.s=t);var t}));var t=e.O();_N_E=t}]);