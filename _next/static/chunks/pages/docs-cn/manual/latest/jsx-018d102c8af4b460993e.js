(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1489],{17375:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return a}})},43908:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return d}});var a=n(17375),r=n(96156),o=(n(67294),n(3905));function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var p,s=(p="CodeTab",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",i({},e))}),c={};function d(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",i(i(i({},c),n),{},{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",i({},{id:"jsx"}),"JSX"),(0,o.kt)("p",null,"Would you like some HTML syntax in your ReScript? If not, quickly skip over this section and pretend you didn't see anything!"),(0,o.kt)("p",null,"\u4f60\u662f\u5426\u60f3\u8981\u5728 ReScript \u4e2d\u4f7f\u7528\u4e00\u4e9bHTML\u8bed\u6cd5? \u5982\u679c\u4e0d\u9700\u8981\uff0c\u53ef\u8df3\u8fc7\u8fd9\u4e9b\u5047\u88c5\u4f60\u4ec0\u4e48\u4e5f\u6ca1\u770b\u5230!"),(0,o.kt)("p",null,"ReScript supports the JSX syntax, with some slight differences compared to the one in ",(0,o.kt)("a",i({parentName:"p"},{href:"https://facebook.github.io/react/docs/introducing-jsx.html"}),"ReactJS"),". ReScript JSX isn't tied to ReactJS; they translate to normal function calls:"),(0,o.kt)("p",null,"ReScript \u652f\u6301 JSX \u8bed\u6cd5\uff0c\u4e0e ",(0,o.kt)("a",i({parentName:"p"},{href:"https://facebook.github.io/react/docs/introducing-jsx.html"}),"ReactJS")," \u4e2d\u7684\u8bed\u6cd5\u76f8\u6bd4\u6709\u4e00\u4e9b\u7ec6\u5fae\u7684\u5dee\u522b\u3002ReScript\u7684 JSX \u5e76\u4e0d\u4e0eReactJS\u7ed1\u5b9a\uff0c\u5b83\u4eec\u4f1a\u8f6c\u5316\u4e3a\u6b63\u5e38\u7684\u51fd\u6570\u8c03\u7528\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note")," for ",(0,o.kt)("a",i({parentName:"p"},{href:"https://reasonml.github.io/reason-react/en/"}),"ReasonReact")," readers: this isn't what ReasonReact turns JSX into, in the end. See Usage section for more info."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u6ce8\u610f"),", \u5bf9\u4e8e\u4f7f\u7528",(0,o.kt)("a",i({parentName:"p"},{href:"https://reasonml.github.io/reason-react/en/"}),"ReasonReact"),"\u7684\u8bfb\u8005\uff1a\u8fd9\u5e76\u4e0d\u662f ReasonReact \u6700\u7ec8\u5c06JSX\u53d8\u6210\u7684\u4e1c\u897f\uff0c\u66f4\u591a\u4fe1\u606f\u8bf7\u89c1\u7528\u6cd5\u90e8\u5206\u3002"),(0,o.kt)("h2",i({},{id:"capitalized-tag--\u9996\u5b57\u6bcd\u5927\u5199\u6807\u7b7e"}),"Capitalized Tag | \u9996\u5b57\u6bcd\u5927\u5199\u6807\u7b7e"),(0,o.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-res"}),'<MyComponent name={"ReScript"} />\n')),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),'React.createElement(\n  MyComponent.make,\n  MyComponent.makeProps("ReScript", undefined)\n);\n'))),(0,o.kt)("p",null,"\u53d8\u6210"),(0,o.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-res"}),'@JSX MyComponent.createElement(~name="ReScript", ~children=list{}, ())\n')),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),'React.createElement(\n  MyComponent.make,\n  MyComponent.makeProps("ReScript", undefined)\n);\n'))),(0,o.kt)("h2",i({},{id:"uncapitalized-tag--\u975e\u9996\u5b57\u6bcd\u5927\u5199\u7684\u6807\u7b7e"}),"Uncapitalized Tag | \u975e\u9996\u5b57\u6bcd\u5927\u5199\u7684\u6807\u7b7e"),(0,o.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-res"}),"<div onClick={handler}> child1 child2 </div>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),'React.createElement("div", {\n  onClick: handler\n}, child1, child2);\n'))),(0,o.kt)("p",null,"\u4f1a\u53d8\u6210"),(0,o.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-res"}),"@JSX div(~onClick=handler, ~children=list{child1, child2}, ())\n")),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),'React.createElement("div", {\n  onClick: handler\n}, child1, child2);\n'))),(0,o.kt)("h2",i({},{id:"fragment--\u7247\u6bb5"}),"Fragment | \u7247\u6bb5"),(0,o.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-res"}),"<> child1 child2 </>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),"React.createElement(React.Fragment, undefined, child1, child2);\n"))),(0,o.kt)("p",null,"\u4f1a\u53d8\u6210"),(0,o.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-res"}),"@JSX list{child1, child2}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),"React.createElement(React.Fragment, undefined, child1, child2);\n"))),(0,o.kt)("h3",i({},{id:"children--\u5b50\u8282\u70b9"}),"Children | \u5b50\u8282\u70b9"),(0,o.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-res"}),"<MyComponent> child1 child2 </MyComponent>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),"React.createElement(MyComponent.make, MyComponent.makeProps(null, undefined), child1, child2);\n"))),(0,o.kt)("p",null,"This is the syntax for passing a list of two items, ",(0,o.kt)("inlineCode",{parentName:"p"},"child1")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"child2"),", to the children position. It desugars to a list containing ",(0,o.kt)("inlineCode",{parentName:"p"},"child1")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"child2"),":"),(0,o.kt)("p",null,"\u8fd9\u662f\u4f20\u9012\u4e24\u4e2a\u5217\u8868\u9879\u76ee",(0,o.kt)("inlineCode",{parentName:"p"},"child1"),"\u548c",(0,o.kt)("inlineCode",{parentName:"p"},"child2"),"\u5230 children \u4f4d\u7f6e\u7684\u8bed\u6cd5\u3002\u5b83\u89e3\u6784\u4e3a\u4e00\u4e2a\u5305\u542b",(0,o.kt)("inlineCode",{parentName:"p"},"child1"),"\u548c",(0,o.kt)("inlineCode",{parentName:"p"},"child2"),"\u7684\u5217\u8868\u3002"),(0,o.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-res"}),"@JSX MyComponent.createElement(~children=list{child1, child2}, ())\n")),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),"React.createElement(MyComponent.make, MyComponent.makeProps(null, undefined), child1, child2);\n"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note")," again that this isn't the transform for ReasonReact; ReasonReact turns the final list into an array. But the idea still applies."),(0,o.kt)("p",null,"\u518d\u6b21",(0,o.kt)("strong",{parentName:"p"},"\u6ce8\u610f"),", \u8fd9\u4e0d\u662f ReasonReact \u7684\u53d8\u6362; ReasonReact\u4f1a\u5c06\u6700\u7ec8\u7684\u5217\u8868\u53d8\u6210\u4e00\u4e2a\u6570\u7ec4\uff0c\u4f46\u662f\u8fd9\u4e2a\u60f3\u6cd5\u4ecd\u7136\u9002\u7528\u3002"),(0,o.kt)("p",null,"So naturally, ",(0,o.kt)("inlineCode",{parentName:"p"},"<MyComponent> myChild </MyComponent>")," desugars to ",(0,o.kt)("inlineCode",{parentName:"p"},"@JSX MyComponent.createElement(~children=list{myChild}, ())"),". I.e. whatever you do, the arguments passed to the children position will be wrapped in a list. What if you don't want that? ",(0,o.kt)("strong",{parentName:"p"},"What if you want to directly pass ",(0,o.kt)("inlineCode",{parentName:"strong"},"myChild")," without an extra wrapping"),"?"),(0,o.kt)("p",null,"\u6240\u4ee5\u5f88\u81ea\u7136\u5730\uff0c",(0,o.kt)("inlineCode",{parentName:"p"},"<MyComponent> myChild </MyComponent>"),"\u88ab\u53bb\u7cd6(desugar)\u4e3a",(0,o.kt)("inlineCode",{parentName:"p"},"@JSX MyComponent.createElement(~children=list{myChild}, ())"),". \u4e5f\u5c31\u662f\u8bf4\uff0c\u65e0\u8bba\u4f60\u505a\u4ec0\u4e48\uff0c\u4f20\u9012\u5230 children \u4f4d\u7f6e\u7684\u53c2\u6570\u90fd\u4f1a\u88ab\u5305\u88f9\u5728\u4e00\u4e2a\u5217\u8868\u4e2d\u3002\u5982\u679c\u4f60\u4e0d\u5e0c\u671b\u8fd9\u6837\u5462? ",(0,o.kt)("strong",{parentName:"p"},"\u5982\u679c\u4f60\u60f3\u76f4\u63a5\u4f20\u9012",(0,o.kt)("inlineCode",{parentName:"strong"},"myChild"),"\u800c\u4e0d\u9700\u8981\u989d\u5916\u7684\u5305\u88c5"),"\u5462?"),(0,o.kt)("h4",i({},{id:"children-spread--\u5b50\u8282\u70b9\u5c55\u5f00"}),"Children Spread | \u5b50\u8282\u70b9\u5c55\u5f00"),(0,o.kt)("p",null,"To solve the above problem, we've introduced"),(0,o.kt)("p",null,"\u4e3a\u4e86\u89e3\u51b3\u4e0a\u9762\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5f15\u5165\u8fd9\u6837\u7684\u7528\u6cd5\uff1a"),(0,o.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-res"}),"<MyComponent> ...myChild </MyComponent>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),"React.createElement(MyComponent.make, MyComponent.makeProps(myChild, undefined));\n"))),(0,o.kt)("p",null,"This passes the value ",(0,o.kt)("inlineCode",{parentName:"p"},"myChild")," ",(0,o.kt)("em",{parentName:"p"},"without")," wrapping it in a list (or array, in the case of ReasonReact). Aka, this desugars to:"),(0,o.kt)("p",null,"\u4f20\u9012\u7684\u503c ",(0,o.kt)("inlineCode",{parentName:"p"},"myChild"),"\u6ca1\u6709\u5305\u88f9\u5230\u4e00\u4e2a\u5217\u8868\u4e2d(\u5728 ReasonReact \u7684\u60c5\u51b5\u4e0b\u662f\u6570\u7ec4). \u4e5f\u5c31\u662f\u53bb\u7cd6\u4e3a\uff1a"),(0,o.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-res"}),"@JSX MyComponent.createElement(~children=myChild, ())\n")),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),"React.createElement(MyComponent.make, MyComponent.makeProps(myChild, undefined));\n"))),(0,o.kt)("p",null,"This is extra useful in the cases where you are handled ",(0,o.kt)("inlineCode",{parentName:"p"},"myChild")," that is already a list of things, and want to forward that without wrapping it an extra time (which would be a type error) ","*",". It also allows you to pass arbitrary data structures at ",(0,o.kt)("inlineCode",{parentName:"p"},"children")," position (remember, JSX ",(0,o.kt)("inlineCode",{parentName:"p"},"children")," is really just a totally normal prop):"),(0,o.kt)("p",null,"\u8fd9\u5728\u4f60\u5904\u7406\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"myChild"),"\u5df2\u7ecf\u662f\u4e00\u4e2a\u5217\u8868\u7684\u60c5\u51b5\u4e0b\u662f\u975e\u5e38\u6709\u7528\u7684\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u8f6c\u53d1\u800c\u4e0d\u9700\u8981\u989d\u5916\u5305\u88c5\u5b83(\u8fd9\u5c06\u4ea7\u751f\u4e00\u4e2a\u7c7b\u578b\u9519\u8bef) /*. \u5b83\u8fd8\u5141\u8bb8\u4f60\u5728",(0,o.kt)("inlineCode",{parentName:"p"},"children"),"\u4f4d\u7f6e\u4f20\u9012\u4efb\u610f\u7684\u6570\u636e\u7ed3\u6784(\u8bb0\u4f4f\uff0cJSX\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"children"),"\u5b9e\u9645\u4e0a\u53ea\u662f\u4e00\u4e2a\u5e38\u89c4\u7684prop)."),(0,o.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-res"}),'<MyComponent> ...((theClassName) => <div className=theClassName />) </MyComponent>\n\n<MyForm> ...("Hello", "Submit") </MyForm>\n')),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),'React.createElement(\n  make,\n  makeProps(function (theClassName) {\n    return React.createElement("div", {\n      className: theClassName,\n    });\n  }, undefined)\n);\n\nReact.createElement(MyForm.make, MyForm.makeProps(["Hello", "Submit"], undefined));\n'))),(0,o.kt)("h2",i({},{id:"usage--\u7528\u6cd5"}),"Usage | \u7528\u6cd5"),(0,o.kt)("p",null,"See ",(0,o.kt)("a",i({parentName:"p"},{href:"https://reasonml.github.io/reason-react/docs/en/jsx"}),"ReasonReact JSX")," for an example application of JSX, which transforms the above calls into a ReasonReact-specific call."),(0,o.kt)("p",null,"\u53c2\u89c1",(0,o.kt)("a",i({parentName:"p"},{href:"https://reasonml.github.io/reason-react/docs/en/jsx"}),"ReasonReact JSX"),", \u4e86\u89e3 JSX \u7684\u5e94\u7528\u5b9e\u4f8b\uff0c\u5b83\u5c06\u4e0a\u8ff0\u8c03\u7528\u8f6c\u5316\u4e3a ReasonReact \u7684\u7279\u5b9a\u8c03\u7528\u3002"),(0,o.kt)("p",null,"Here's a JSX tag that shows most of the features."),(0,o.kt)("p",null,"\u8fd9\u662f\u4e00\u4e2a\u663e\u793a\u4e86\u5927\u90e8\u5206\u7279\u6027\u7684 JSX \u6807\u7b7e\u3002"),(0,o.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-res"}),'<MyComponent\n  booleanAttribute={true}\n  stringAttribute="string"\n  intAttribute=1\n  forcedOptional=?{Some("hello")}\n  onClick={handleClick}>\n  <div> {React.string("hello")} </div>\n</MyComponent>\n')),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),'React.createElement(\n  MyComponent.make,\n  MyComponent.makeProps(\n    true,\n    "string",\n    1,\n    "hello",\n    handleClick,\n    React.createElement("div", undefined, "hello"),\n    undefined\n  )\n);\n'))),(0,o.kt)("h2",i({},{id:"departures-from-js-jsx--\u79bb\u5f00js-jsx"}),"Departures From JS JSX | \u79bb\u5f00JS JSX"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Attributes and children don't mandate ",(0,o.kt)("inlineCode",{parentName:"p"},"{}"),", but we show them anyway for ease of learning. Once you format your file, some of them go away and some turn into parentheses.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"There is no support for JSX prop spread: ",(0,o.kt)("inlineCode",{parentName:"p"},"<Comp {...props} />"),". Though somewhat related,  we do have children spread, described above: ",(0,o.kt)("inlineCode",{parentName:"p"},"<Comp> ...children </Comp>"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Punning!")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u5c5e\u6027\u548c\u5b50\u8282\u70b9\u5e76\u6ca1\u6709\u5f3a\u5236\u8981\u6c42",(0,o.kt)("inlineCode",{parentName:"p"},"{}"),", \u4f46\u4e3a\u4e86\u4fbf\u4e8e\u5b66\u4e60\u6211\u4eec\u8fd8\u662f\u5c55\u793a\u4e86\u5b83\u4eec\u3002\u4e00\u65e6\u4f60\u683c\u5f0f\u5316\u4e86\u4f60\u7684\u6587\u4ef6\uff0c\u5b83\u4eec\u4e2d\u7684\u4e00\u4e9b\u5c31\u4f1a\u6d88\u5931\uff0c\u4e00\u4e9b\u53d8\u6210\u4e86\u62ec\u53f7\u3002")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u6ca1\u6709\u5bf9JSX prop\u5c55\u5f00\u7684\u652f\u6301\uff1a",(0,o.kt)("inlineCode",{parentName:"p"},"<Comp {...props}}. />"),". \u867d\u7136\u6709\u4e9b\u5173\u8054\uff0c\u4f46\u6211\u4eec\u786e\u5b9e\u6709\u5b50\u8282\u70b9\u5c55\u5f00\uff0c\u50cf\u4e0a\u9762\u63cf\u8ff0\u7684\u90a3\u6837",(0,o.kt)("inlineCode",{parentName:"p"},"<Comp> ...children </Comp>"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Punning"))),(0,o.kt)("h3",i({},{id:"punning--\u53cc\u5173\u8bedprunning"}),"Punning | \u53cc\u5173\u8bed(Prunning)"),(0,o.kt)("p",null,'"Punning" refers to the syntax shorthand for when a label and a value are the same. For example, in JavaScript, instead of doing ',(0,o.kt)("inlineCode",{parentName:"p"},"return {name: name}"),", you can do ",(0,o.kt)("inlineCode",{parentName:"p"},"return {name}"),"."),(0,o.kt)("p",null,'"\u53cc\u5173\u8bed"\u662f\u6307\u6807\u7b7e\u548c\u503c\u76f8\u540c\u65f6\u7684\u8bed\u6cd5\u7b80\u5199\u3002\u4f8b\u5982\uff0c\u5728 JavaScript \u4e2d\uff0c\u4e0d\u7528\u5199',(0,o.kt)("inlineCode",{parentName:"p"},"return {name: name}"),", \u800c\u662f\u53ef\u4ee5\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"return {name}"),"\u4ee3\u66ff\u3002"),(0,o.kt)("p",null,"Reason JSX supports punning. ",(0,o.kt)("inlineCode",{parentName:"p"},"<input checked />")," is just a shorthand for ",(0,o.kt)("inlineCode",{parentName:"p"},"<input checked=checked />"),". The formatter will help you format to the punned syntax whenever possible. This is convenient in the cases where there are lots of props to pass down:"),(0,o.kt)("p",null,"Reason\u7684 JSX \u652f\u6301\u53cc\u5173\u8bed\uff0c",(0,o.kt)("inlineCode",{parentName:"p"},"<input checked />"),"\u53ea\u662f",(0,o.kt)("inlineCode",{parentName:"p"},"<input checked=checked />"),"\u7684\u7f29\u5199\u3002\u683c\u5f0f\u5316\u5de5\u5177\u5c06\u5e2e\u52a9\u4f60\u5c3d\u53ef\u80fd\u5730\u6309\u7167\u53cc\u5173\u8bed\u7684\u8bed\u6cd5\u8fdb\u884c\u683c\u5f0f\u5316\uff0c\u8fd9\u5728\u6709\u5f88\u591a props \u9700\u8981\u4f20\u9012\u7684\u60c5\u51b5\u4e0b\u5f88\u65b9\u4fbf\u3002"),(0,o.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-res"}),"<MyComponent isLoading text onClick />\n")),(0,o.kt)("pre",null,(0,o.kt)("code",i({parentName:"pre"},{className:"language-js"}),"React.createElement(\n  MyComponent.make,\n  MyComponent.makeProps(isLoading, text, onClick, undefined)\n);\n"))),(0,o.kt)("p",null,"Consequently, a Reason JSX component can cram in a few more props before reaching for extra libraries solutions that avoids props passing."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note")," that this is a departure from ReactJS JSX, which does ",(0,o.kt)("strong",{parentName:"p"},"not")," have punning. ReactJS' ",(0,o.kt)("inlineCode",{parentName:"p"},"<input checked />")," desugars to ",(0,o.kt)("inlineCode",{parentName:"p"},"<input checked=true />"),", in order to conform to DOM's idioms and for backward compatibility."),(0,o.kt)("h2",i({},{id:"tip--tricks--\u6280\u5de7--\u8bc0\u7a8d"}),"Tip & Tricks | \u6280\u5de7 & \u8bc0\u7a8d"),(0,o.kt)("p",null,"For library authors wanting to take advantage of the JSX: the ",(0,o.kt)("inlineCode",{parentName:"p"},"@JSX")," attribute above is a hook for potential ppx macros to spot a function wanting to format as JSX. Once you spot the function, you can turn it into any other expression."),(0,o.kt)("p",null,"\u5bf9\u4e8e\u60f3\u8981\u5229\u7528 JSX \u7684\u5e93\u4f5c\u8005\u6765\u8bf4\uff1a\u4e0a\u9762\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"@JSX"),"\u5c5e\u6027\u662f\u6f5c\u5728\u7684 ppx \u5b8f\u7684\u4e00\u4e2a\u94a9\u5b50\uff0c\u53ef\u4ee5\u53d1\u73b0\u60f3\u8981\u683c\u5f0f\u5316\u4e3a JSX \u7684\u51fd\u6570\u3002\u4e00\u65e6\u4f60\u53d1\u73b0\u4e86\u8fd9\u4e2a\u51fd\u6570\uff0c\u4f60\u53ef\u4ee5\u628a\u5b83\u53d8\u6210\u4efb\u4f55\u5176\u4ed6\u8868\u8fbe\u5f0f\u3002"),(0,o.kt)("p",null,"This way, everyone gets to benefit the JSX syntax without needing to opt into a specific library using it, e.g. ReasonReact."),(0,o.kt)("p",null,"\u8fd9\u6837\uff0c\u6bcf\u4e2a\u4eba\u90fd\u80fd\u4ece JSX \u8bed\u6cd5\u4e2d\u53d7\u76ca\u800c\u4e0d\u9700\u8981\u9009\u62e9\u4f7f\u7528\u5b83\u7684\u7279\u5b9a\u5e93\uff0c\u5982ReasonReact."),(0,o.kt)("p",null,"JSX calls supports the features of ",(0,o.kt)("a",i({parentName:"p"},{href:"function.md#labeled-arguments"}),"labeled functions"),": optional, explicitly passed optional and optional with default."),(0,o.kt)("p",null,"JSX\u8c03\u7528\u652f\u6301",(0,o.kt)("a",i({parentName:"p"},{href:"function.md#labeled-arguments"}),"\u6807\u7b7e\u51fd\u6570"),"\u7684\u7279\u5f81\uff1a\u53ef\u9009\u53c2\u6570\uff0c\u663e\u5f0f\u4f20\u9012\u7684\u53ef\u9009\u53c2\u6570\u548c\u9ed8\u8ba4\u7684\u53ef\u9009\u53c2\u6570\u3002"),(0,o.kt)("h2",i({},{id:"design-decisions--\u8bbe\u8ba1\u51b3\u7b56"}),"Design Decisions | \u8bbe\u8ba1\u51b3\u7b56"),(0,o.kt)("p",null,"*"," You might wonder why you never needed such children spread in ReactJS; ReactJS uses some special runtime logic + special syntax transforms + variadic argument detection & marking to avoid most of these cases (",(0,o.kt)("a",i({parentName:"p"},{href:"https://github.com/facebook/react/blob/9b36df86c6ccecb73ca44899386e6a72a83ad445/packages/react/src/ReactElement.js#L207"}),"see here"),"). Such dynamic usage complexifies the type system detection ",(0,o.kt)("em",{parentName:"p"},"quite a bit"),". Since we control the whole syntax and ReasonReact, we decided to introduce children spread to disambiguate between the case of wrapping vs not wrapping, without compile-time & runtime cost!"),(0,o.kt)("p",null,"*"," \u4f60\u53ef\u80fd\u4f1a\u60f3\uff0c\u4e3a\u4ec0\u4e48\u5728 ReactJS \u4e2d\u4ece\u6765\u4e0d\u9700\u8981\u8fd9\u6837\u7684\u5b50\u8282\u70b9\u5c55\u5f00\u5462; ReactJS\u4f7f\u7528\u4e00\u4e9b\u7279\u6b8a\u7684\u8fd0\u884c\u65f6\u903b\u8f91+\u7279\u6b8a\u7684\u8bed\u6cd5\u8f6c\u6362+\u53d8\u91cf\u53c2\u6570\u68c0\u6d4b\u548c\u6807\u8bb0\u6765\u907f\u514d\u5927\u591a\u6570\u7684\u8fd9\u4e9b\u60c5\u51b5(",(0,o.kt)("a",i({parentName:"p"},{href:"https://github.com/facebook/react/blob/9b36df86c6ccecb73ca44899386e6a72a83ad445/packages/react/src/ReactElement.js#L207"}),"\u89c1\u8fd9\u91cc"),"). \u8fd9\u6837\u7684\u52a8\u6001\u4f7f\u7528\u4f7f\u7c7b\u578b\u7cfb\u7edf\u590d\u6742\u5316\u4e86 ",(0,o.kt)("em",{parentName:"p"},"\u76f8\u5f53\u591a"),". \u7531\u4e8e\u6211\u4eec\u63a7\u5236\u4e86\u6574\u4e2a\u8bed\u6cd5\u548cReasonReact, \u6211\u4eec\u51b3\u5b9a\u5f15\u5165\u5b50\u8282\u70b9\u5c55\u5f00\u6765\u533a\u5206\u5305\u88c5\u548c\u4e0d\u5305\u88c5\u7684\u60c5\u51b5\uff0c\u800c\u4e0d\u9700\u8981\u5f15\u5165\u7f16\u8bd1\u65f6\u548c\u8fd0\u884c\u65f6\u5f00\u9500\u3002"))}d.isMDXComponent=!0,d.frontmatter={title:"JSX",description:"JSX syntax in ReScript and React",canonical:"/docs/manual/latest/jsx",__ghEditHref:"https://github.com/butterunderflow/rescript-lang.org-chinese-translation/tree/chinese-translation/pages/docs-cn/manual/latest/jsx.mdx"}},59170:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs-cn/manual/latest/jsx",function(){return n(43908)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=59170,e(e.s=t);var t}));var t=e.O();_N_E=t}]);