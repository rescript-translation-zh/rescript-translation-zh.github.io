(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[91184],{17375:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}n.d(t,{Z:function(){return a}})},72886:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return c}});var a=n(17375),l=n(96156),r=(n(67294),n(3905));function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){(0,l.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var o,p=(o="CodeTab",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",s({},e))}),u={};function c(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,r.kt)("wrapper",s(s(s({},u),n),{},{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",s({},{id:"let-binding--let\u7ed1\u5b9a"}),"Let Binding | Let\u7ed1\u5b9a"),(0,r.kt)("p",null,'A "let binding", in other languages, might be called a "variable declaration". ',(0,r.kt)("inlineCode",{parentName:"p"},"let")," ",(0,r.kt)("em",{parentName:"p"},"binds")," values to names. They can be seen and referenced by code that comes ",(0,r.kt)("em",{parentName:"p"},"after")," them."),(0,r.kt)("p",null,'\u4e00\u4e2a"let\u7ed1\u5b9a"\u5728\u5176\u4ed6\u8bed\u8a00\u53ef\u80fd\u88ab\u79f0\u4f5c"\u53d8\u91cf\u5b9a\u4e49". ',(0,r.kt)("inlineCode",{parentName:"p"},"let")," \u5c06\u503c ",(0,r.kt)("em",{parentName:"p"},"\u7ed1\u5b9a")," \u5230\u540d\u5b57, \u7ed1\u5b9a\u7684\u540d\u5b57\u5728\u4e4b\u540e\u7684\u4ee3\u7801\u53ef\u89c1, \u4e14\u53ef\u4ee5\u88ab\u8bbf\u95ee."),(0,r.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'let greeting = "hello!"\nlet score = 10\nlet newScore = 10 + score\n')),(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-js"}),'var greeting = "hello!";\nvar score = 10;\nvar newScore = 20;\n'))),(0,r.kt)("h2",s({},{id:"block-scope--\u5757\u4f5c\u7528\u57df"}),"Block Scope | \u5757\u4f5c\u7528\u57df"),(0,r.kt)("p",null,"Bindings can be scoped through ",(0,r.kt)("inlineCode",{parentName:"p"},"{}"),"."),(0,r.kt)("p",null,"\u53ef\u4ee5\u901a\u8fc7",(0,r.kt)("inlineCode",{parentName:"p"},"{}"),"\u9650\u5236\u7ed1\u5b9a\u7684\u4f5c\u7528\u57df"),(0,r.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'let message = {\n  let part1 = "hello"\n  let part2 = "world"\n  part1 ++ " " ++ part2\n}\n// `part1` \u548c `part2` \u65e0\u6cd5\u5728\u6b64\u5904\u88ab\u8bbf\u95ee!\n')),(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-js"}),'var message = "hello world";\n'))),(0,r.kt)("p",null,"The value of the last line of a scope is implicitly returned."),(0,r.kt)("p",null,"\u5757\u7684\u6700\u540e\u4e00\u884c\u7684\u503c\u88ab\u9690\u5f0f\u7684\u8fd4\u56de\u4f5c\u4e3a\u5757\u7684\u503c."),(0,r.kt)("h3",s({},{id:"design-decisions--\u8bbe\u8ba1\u51b3\u7b56"}),"Design Decisions | \u8bbe\u8ba1\u51b3\u7b56"),(0,r.kt)("p",null,"ReScript's ",(0,r.kt)("inlineCode",{parentName:"p"},"if"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," and functions all use the same block scoping mechanism. The code below works ",(0,r.kt)("strong",{parentName:"p"},"not"),' because of some special "if scope"; but simply because it\'s the same scope syntax and feature you just saw:'),(0,r.kt)("p",null,"ReScript\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"if"),"\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"while"),'\u548c\u51fd\u6570\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u5757\u4f5c\u7528\u57df\u673a\u5236. \u4ee5\u4e0b\u4ee3\u7801\u4e4b\u6240\u4ee5\u6709\u6548, \u5e76\u4e0d\u662f\u56e0\u4e3a\u6709\u4ec0\u4e48\u7279\u6b8a\u7684 "if\u4f5c\u7528\u57df"; \u53ea\u662f\u56e0\u4e3a\u5176\u4e0e\u4f60\u521a\u624d\u6240\u770b\u5230\u7684\u4f5c\u7528\u57df\u8bed\u6cd5\u548c\u7279\u5f81\u76f8\u540c.'),(0,r.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-res"}),'if displayGreeting {\n  let message = "Enjoying the docs so far?"\n  Js.log(message)\n}\n// `message` \u65e0\u6cd5\u5728\u6b64\u5904\u88ab\u8bbf\u95ee!\n')),(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-js"}),'if (displayGreeting) {\n  console.log("Enjoying the docs so far?");\n}\n'))),(0,r.kt)("h2",s({},{id:"bindings-are-immutable--\u7ed1\u5b9a\u662f\u4e0d\u53ef\u53d8\u7684"}),"Bindings Are Immutable | \u7ed1\u5b9a\u662f\u4e0d\u53ef\u53d8\u7684"),(0,r.kt)("p",null,'Let bindings are "immutable", aka "cannot change". This helps our type system deduce and optimize much more than other languages (and in turn, help you more).'),(0,r.kt)("p",null,'Let\u7ed1\u5b9a\u65f6"\u4e0d\u53ef\u53d8\u7684", \u5373"\u65e0\u6cd5\u6539\u53d8". \u8fd9\u5e2e\u52a9ReScript\u5728\u7c7b\u578b\u7cfb\u7edf\u7684\u63a8\u5bfc\u548c\u4f18\u5316\u4e0a\u53ef\u4ee5\u505a\u5230\u6bd4\u5176\u4ed6\u8bed\u8a00\u66f4\u8fdb\u4e00\u6b65(\u4ece\u800c\u66f4\u597d\u7684\u5e2e\u52a9\u4f60)'),(0,r.kt)("h2",s({},{id:"binding-shadowing--\u7ed1\u5b9a\u8986\u76d6"}),"Binding Shadowing | \u7ed1\u5b9a\u8986\u76d6"),(0,r.kt)("p",null,"The above restriction might sound unpractical at first. How would you change a value then? Usually, 2 ways:"),(0,r.kt)("p",null,"\u4ee5\u4e0a\u7684\u9650\u5236\u53ef\u80fd\u542c\u8d77\u6765\u4e0d\u592a\u5b9e\u7528. \u4f60\u5c06\u5982\u4f55\u6539\u53d8\u4e00\u4e2a\u503c\u5462? \u901a\u5e38\u6709\u4e24\u79cd\u65b9\u5f0f:"),(0,r.kt)("p",null,"The first is to realize that many times, what you want isn't to mutate a variable's value. For example, this JavaScript pattern:"),(0,r.kt)("p",null,"\u7b2c\u4e00\u79cd\u65b9\u6cd5\u662f\u5148\u8ba4\u8bc6\u5230, \u5f88\u591a\u65f6\u5019\u4f60\u60f3\u8981\u7684\u5e76\u4e0d\u662f\u6539\u53d8\u4e00\u4e2a\u53d8\u91cf\u7684\u503c. \u6bd4\u5982\u8bf4, \u4ee5\u4e0b\u662fJavaScript\u7684\u6a21\u5f0f:"),(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-js"}),"var result = 0;\nresult = calculate(result);\nresult = calculateSomeMore(result);\n")),(0,r.kt)("p",null,"...is really just to comment on intermediate steps. You didn't need to mutate ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," at all! You could have just written this JS:"),(0,r.kt)("p",null,"...\u8fd9\u79cd\u5199\u6cd5\u53ea\u662f\u76f8\u5f53\u4e8e\u5bf9\u4e2d\u95f4\u7ed3\u679c\u8fdb\u884c\u6ce8\u91ca, \u4f60\u5b8c\u5168\u4e0d\u9700\u8981\u4fee\u6539",(0,r.kt)("inlineCode",{parentName:"p"},"result"),"\u7684\u503c. \u4f60\u5728JS\u4e2d\u53ef\u4ee5\u8fd9\u4e48\u5199:"),(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-js"}),"var result1 = 0;\nvar result2 = calculate(result1);\nvar result3 = calculateSomeMore(result2);\n")),(0,r.kt)("p",null,"In ReScript, this obviously works too:"),(0,r.kt)("p",null,"\u5728ReScript, \u8fd9\u4e5f\u660e\u663e\u53ef\u884c:"),(0,r.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-res"}),"let result1 = 0\nlet result2 = calculate(result1)\nlet result3 = calculateSomeMore(result2)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-js"}),"var result1 = 0;\nvar result2 = calculate(0);\nvar result3 = calculateSomeMore(result2);\n"))),(0,r.kt)("p",null,"Additionally, reusing the same let binding name overshadows the previous bindings with the same name. So you can write this too:"),(0,r.kt)("p",null,"\u6b64\u5916, \u91cd\u7528\u76f8\u540c\u7684let\u7ed1\u5b9a\u540d\u5b57\u4f1a\u8986\u76d6\u4e4b\u524d\u76f8\u540c\u540d\u5b57\u7684\u7ed1\u5b9a. \u6240\u4ee5\u4f60\u4e5f\u53ef\u4ee5\u8fd9\u4e48\u5199:"),(0,r.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-res"}),"let result = 0\nlet result = calculate(result)\nlet result = calculateSomeMore(result)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-js"}),"var result = calculate(0);\nvar result$1 = calculateSomeMore(result);\n"))),(0,r.kt)("p",null,"(Though for the sake of clarity, we don't recommend this)."),(0,r.kt)("p",null,"(\u6240\u4ee5, \u4e3a\u4e86\u4ee3\u7801\u7684\u6e05\u6670, \u6211\u4eec\u4e0d\u63a8\u8350\u8fd9\u4e48\u5199)"),(0,r.kt)("p",null,"As a matter of fact, even this is valid code:"),(0,r.kt)("p",null,"\u4e8b\u5b9e\u4e0a, \u5373\u4f7f\u8fd9\u4e5f\u662f\u6709\u6548\u7684\u4ee3\u7801:"),(0,r.kt)(p,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'let result = "hello"\nJs.log(result) // prints "hello"\nlet result = 1\nJs.log(result) // prints 1\n')),(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-js"}),'var result = 1;\nconsole.log("hello");\nconsole.log(1);\n'))),(0,r.kt)("p",null,"The binding you refer to is whatever's the closest upward. No mutation here!\nIf you need ",(0,r.kt)("em",{parentName:"p"},"real")," mutation, e.g. passing a value around, have it modified by many pieces of code, we provide a slightly heavier ",(0,r.kt)("a",s({parentName:"p"},{href:"mutation.md"}),"mutation feature"),"."),(0,r.kt)("p",null,"\u4f60\u8bbf\u95ee\u7684\u7ed1\u5b9a\u65f6\u6700\u8fd1\u7684\u5411\u4e0a\u67e5\u627e\u7684\u7ed3\u679c. \u8fd9\u91cc\u5e76\u6ca1\u6709\u53d1\u751f\u503c\u7684\u4fee\u6539! \u5982\u679c\u4f60\u9700\u8981 ",(0,r.kt)("em",{parentName:"p"},"\u771f\u4fee\u6539"),", (\u6bd4\u5982\u8bf4\u4f20\u9012\u4e00\u4e2a\u503c\u4f5c\u4e3a\u53c2\u6570, \u8ba9\u88ab\u67d0\u4e9b\u4ee3\u7801\u4fee\u6539\u8fd9\u4e2a\u503c), \u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7a0d\u663e\u627f\u91cd\u7684",(0,r.kt)("a",s({parentName:"p"},{href:"mutation.md"}),"mutation\u7279\u6027"),"."),(0,r.kt)("h2",s({},{id:"private-let-bindings"}),"Private let bindings"),(0,r.kt)("p",null,"Private let bindings are introduced in the release ",(0,r.kt)("a",s({parentName:"p"},{href:"https://rescript-lang.org/blog/bucklescript-release-7-2"}),"7.2"),"."),(0,r.kt)("p",null,"\u79c1\u6709let\u7ed1\u5b9a\u5728",(0,r.kt)("a",s({parentName:"p"},{href:"https://rescript-lang.org/blog/bucklescript-release-7-2"}),"7.2"),"\u7248\u672c\u88ab\u5f15\u5165."),(0,r.kt)("p",null,"In the module system, everything is public by default,\nthe only way to hide some values is by providing a separate signature to\nlist public fields and their types:"),(0,r.kt)("p",null,"\u5728\u6a21\u5757\u7cfb\u7edf\u4e2d, \u6240\u6709\u4e1c\u897f\u90fd\u9ed8\u8ba4\u662f\u516c\u5f00(public)\u7684, \u9690\u85cf\u67d0\u4e9b\u503c\u7684\u552f\u4e00\u65b9\u5f0f\u662f\u63d0\u4f9b\u4e00\u4e2a\u5206\u79bb\u7684\u6a21\u5757\u7b7e\u540d, \u5217\u51fa\u6a21\u5757\u4e2d\u7684\u516c\u5171\u5c5e\u6027\u548c\u4ed6\u4eec\u7684\u7c7b\u578b"),(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-res"}),"module A: {\n  let b: int\n} = {\n  let a = 3\n  let b = 4\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"%%private")," gives you an option to mark private fields directly"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"%%private")," \u4f7f\u4f60\u53ef\u4ee5\u76f4\u63a5\u6807\u6ce8\u67d0\u4e2a\u5c5e\u6027\u4e3a\u79c1\u6709"),(0,r.kt)("pre",null,(0,r.kt)("code",s({parentName:"pre"},{className:"language-res"}),"module A = {\n  %%private(let a = 3)\n  let b = 4\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"%%private")," also applies to file level modules, so in some cases,\nusers do not need to provide a separate interface file just to hide some particular values."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"%%private"),"\u4e5f\u53ef\u4ee5\u88ab\u5e94\u7528\u5230\u6587\u4ef6\u7ea7\u522b\u7684\u6a21\u5757, \u6240\u4ee5\u6709\u7684\u65f6\u5019\u4e3a\u4e86\u9690\u85cf\u67d0\u4e9b\u7279\u5b9a\u7684\u503c, \u7528\u6237\u53ef\u4ee5\u4e0d\u7528\u63d0\u4f9b\u4e00\u4e2a\u5355\u72ec\u7684\u6a21\u5757\u63a5\u53e3\u6587\u4ef6."),(0,r.kt)("p",null,"Note interface files are still recommended as a general best practice since they give you better\nseparate compilation units and also they're better for documentation."),(0,r.kt)("p",null,"\u8bf7\u6ce8\u610f, \u63d0\u4f9b\u4e00\u4e2a\u63a5\u53e3\u6587\u4ef6\u4ecd\u7136\u662f\u88ab\u63a8\u8350\u7684\u901a\u7528\u6700\u4f73\u5b9e\u8df5, \u56e0\u4e3a\u8fd9\u53ef\u4ee5\u63d0\u4f9b\u66f4\u597d\u7684\u5206\u79bb\u7684\u7f16\u8bd1\u5355\u5143\u5e76\u4e14\u4e5f\u4e3a\u7f16\u5199\u6587\u6863\u63d0\u4f9b\u4e86\u65b9\u4fbf."),(0,r.kt)("p",null,"Still, ",(0,r.kt)("inlineCode",{parentName:"p"},"%%private")," is useful in the following scenarios:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Code generators.")," Some code generators want to hide some values but it is sometimes very hard or time consuming for code generators to synthesize the types for public fields.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Quick prototyping.")," During prototyping, we still want to hide some values, but the interface file is not stable yet, ",(0,r.kt)("inlineCode",{parentName:"p"},"%%private")," provide you such convenience."))),(0,r.kt)("p",null,"\u5c3d\u7ba1\u5982\u6b64, ",(0,r.kt)("inlineCode",{parentName:"p"},"%%private"),"\u4ecd\u7136\u5728\u4ee5\u4e0b\u573a\u666f\u662f\u6709\u7528\u7684:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"\u4ee3\u7801\u751f\u6210.")," \u4e00\u4e9b\u4ee3\u7801\u751f\u6210\u5668\u5e0c\u671b\u9690\u85cf\u67d0\u4e9b\u503c, \u4f46\u5bf9\u4ee3\u7801\u751f\u6210\u5668\u6765\u8bf4, \u5408\u6210\u516c\u5171\u5b57\u6bb5\u7684\u7c7b\u578b\u6709\u7684\u65f6\u5019\u662f\u5341\u5206\u56f0\u96be\u6216\u8005\u8017\u65f6\u7684.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"\u5feb\u901f\u539f\u578b.")," \u5728\u539f\u578b\u5f00\u53d1\u8fc7\u7a0b\u4e2d, \u6211\u4eec\u4ecd\u7136\u5e0c\u671b\u9690\u85cf\u4e00\u4e9b\u503c, \u4f46\u6b64\u65f6\u63a5\u53e3\u6587\u4ef6\u8fd8\u4e0d\u7a33\u5b9a, ",(0,r.kt)("inlineCode",{parentName:"p"},"%%private"),"\u4e3a\u4f60\u63d0\u4f9b\u4e86\u5c06\u8fd9\u4e9b\u503c\u9690\u85cf\u8d77\u6765\u7684\u4fbf\u5229."))))}c.isMDXComponent=!0,c.frontmatter={title:"Let\u7ed1\u5b9a",description:"Let binding syntax for binding to values in ReScript",canonical:"/docs/manual/latest/let-binding",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs-cn/manual/latest/let-binding.mdx"}},99715:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs-cn/manual/latest/let-binding",function(){return n(72886)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=99715,e(e.s=t);var t}));var t=e.O();_N_E=t}]);