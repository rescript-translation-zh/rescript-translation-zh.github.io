(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[47363],{17375:function(e,t,n){"use strict";function i(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}n.d(t,{Z:function(){return i}})},78739:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return s}});var i=n(96156),a=n(17375),r=(n(67294),n(3905));function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var p={};function s(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,r.kt)("wrapper",o(o(o({},p),n),{},{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",o({},{id:"migrate-from-bucklescriptreason--\u4ecebucklescriptreason\u8fc1\u79fb\u5230rescript"}),"Migrate from BuckleScript/Reason | \u4eceBuckleScript/Reason\u8fc1\u79fb\u5230ReScript"),(0,r.kt)("p",null,"ReScript is a rebranding and cleanup of BuckleScript (since ",(0,r.kt)("inlineCode",{parentName:"p"},"v8.2.0"),") & Reason (",(0,r.kt)("inlineCode",{parentName:"p"},"v3.6"),") that enables us to ship a tighter compile-to-JS stack with more coherent documentation & tools. If you're an existing user of BuckleScript & Reason, here's the gist:"),(0,r.kt)("p",null,"ReScript\u662fBuckleScript(",(0,r.kt)("inlineCode",{parentName:"p"},"v8.2.0"),"\u4ee5\u540e)\u548cReason(",(0,r.kt)("inlineCode",{parentName:"p"},"v3.6"),"\u4ee5\u540e)\u7684\u518d\u7248\u548c\u6536\u5c3e\u5de5\u4f5c, \u4f7f\u5f97\u6211\u4eec",(0,r.kt)("inlineCode",{parentName:"p"},"to ship a tighter compile-to-JS stack with more coherent documentation & tools.")," \u5982\u679c\u4f60\u5df2\u7ecf\u662fBuckleScript\u6216Reason\u7684\u7528\u6237, \u90a3\u4e48\u6709\u4ee5\u4e0b\u4e24\u4e2a\u8981\u70b9:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"ReScript is mostly just BuckleScript rebranded, with a new syntax that's like the Reason syntax, but catered more toward the JavaScript crowd.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"All your existing code will keep working even if you don't upgrade.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"ReScript\u51e0\u4e4e\u53ea\u662fBuckleScript\u7684\u518d\u7248, \u6709\u4e00\u4e2a\u66f4\u50cfReason\u7684\u65b0\u8bed\u6cd5(\u4e3b\u8981\u662f\u4e3a\u4e86\u8fce\u5408JavaScript\u7684\u7528\u6237\u7fa4\u4f53).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\u5373\u4f7f\u4f60\u4e0d\u5347\u7ea7, \u6240\u6709\u73b0\u6709\u4ee3\u7801\u4f9d\u7136\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c."))),(0,r.kt)("h2",o({},{id:"upgrade-your-codebase--\u5347\u7ea7\u4f60\u7684\u4ee3\u7801\u5e93"}),"Upgrade Your Codebase | \u5347\u7ea7\u4f60\u7684\u4ee3\u7801\u5e93"),(0,r.kt)("p",null,"There are lots of exciting improvements in the new syntax (features, speed, error messages, etc.). The upgrade is trivial, backward-compatible and can be done on a per-file basis:"),(0,r.kt)("p",null,"\u65b0\u7684\u8bed\u6cd5\u6709\u5f88\u591a\u632f\u594b\u4eba\u5fc3\u7684\u63d0\u5347(\u7279\u6027, \u901f\u5ea6, \u9519\u8bef\u63d0\u793a\u7b49). \u5347\u7ea7\u662f\u540e\u5411\u517c\u5bb9\u7684, \u5e76\u4e14\u53ef\u4ee5\u9010\u4e2a\u6587\u4ef6\u7684\u5b8c\u6210."),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{}),"npm install rescript@9 --save-dev\n\n# Also works with .rei / .ml / .mli / etc\nnpx rescript convert src/MyFile.re\n")),(0,r.kt)("p",null,"Enjoy the improved experience!"),(0,r.kt)("p",null,"\u4eab\u53d7\u5347\u7ea7\u540e\u7684\u7528\u6237\u4f53\u9a8c\u5427!"),(0,r.kt)("h3",o({},{id:"upgrade-individual-folders--\u5bf9\u5355\u4e2a\u6587\u4ef6\u5939\u8fdb\u884c\u5347\u7ea7"}),"Upgrade Individual Folders | \u5bf9\u5355\u4e2a\u6587\u4ef6\u5939\u8fdb\u884c\u5347\u7ea7"),(0,r.kt)("p",null,"This is useful for per-directory convertions:"),(0,r.kt)("p",null,"\u4ee5\u4e0b\u547d\u4ee4\u53ef\u4ee5\u7528\u4e8e\u9010\u4e2a\u6587\u4ef6\u5939\u7684\u8f6c\u6362:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{className:"language-console"}),"# *.rei, *.ml, *.mli,....\nfor f in your-folder/**/*.re; do; node_modules/.bin/rescript convert $f && rm $f; done;\n")),(0,r.kt)("h3",o({},{id:"upgrade-an-entire-codebase--\u5347\u7ea7\u6574\u4e2a\u4ee3\u7801\u5e93"}),"Upgrade an Entire Codebase | \u5347\u7ea7\u6574\u4e2a\u4ee3\u7801\u5e93"),(0,r.kt)("p",null,"In case you are confident in converting your codebase in one step, use the following:"),(0,r.kt)("p",null,"\u5982\u679c\u4f60\u786e\u4fe1\u53ef\u4ee5\u4e00\u6b65\u8f6c\u6362\u6574\u4e2a\u4ee3\u7801\u5e93, \u90a3\u4f60\u53ef\u4ee5\u8fd9\u4e48\u505a:"),(0,r.kt)("pre",null,(0,r.kt)("code",o({parentName:"pre"},{}),"npx rescript convert -all\n")),(0,r.kt)("h2",o({},{id:"difference-with-old-reason--\u4e0e\u4ee5\u524d\u7684reason\u7684\u4e0d\u540c\u4e4b\u5904"}),"Difference With Old Reason | \u4e0e\u4ee5\u524d\u7684Reason\u7684\u4e0d\u540c\u4e4b\u5904"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Complete removal of semicolon (you can still write them)."),(0,r.kt)("li",{parentName:"ul"},"No need for parentheses around ",(0,r.kt)("inlineCode",{parentName:"li"},"if"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"switch")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"try"),"."),(0,r.kt)("li",{parentName:"ul"},"Type arguments: from ",(0,r.kt)("inlineCode",{parentName:"li"},"option(int)")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"option<int>"),"."),(0,r.kt)("li",{parentName:"ul"},"Old interpolated string: from ",(0,r.kt)("inlineCode",{parentName:"li"},"{j|hello ${name}|j}")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"j`hello ${name}`"),". Now with proper unicode support!"),(0,r.kt)("li",{parentName:"ul"},"New interpolated string: ",(0,r.kt)("inlineCode",{parentName:"li"},"`hello world`"),". Also supports multiline and unicode. ",(0,r.kt)("inlineCode",{parentName:"li"},'"hello world"')," string is now singleline."),(0,r.kt)("li",{parentName:"ul"},"Polymorphic variants: from ",(0,r.kt)("inlineCode",{parentName:"li"}," `red")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"#red"),"."),(0,r.kt)("li",{parentName:"ul"},"Arrays: from ",(0,r.kt)("inlineCode",{parentName:"li"},"[|1,2,3|]")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"[1,2,3]"),". In JS, arrays are the right default."),(0,r.kt)("li",{parentName:"ul"},"Lists: from ",(0,r.kt)("inlineCode",{parentName:"li"},"[1,2,3]")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"list[1,2,3]")," (",(0,r.kt)("em",{parentName:"li"},"8.1.1 update"),": now it is ",(0,r.kt)("inlineCode",{parentName:"li"},"list{1, 2, 3}"),"). This ties with upcoming plans to access containers in a uniform way: ",(0,r.kt)("inlineCode",{parentName:"li"},"set[...]")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"map[...]"),". Maybe temporary."),(0,r.kt)("li",{parentName:"ul"},"Exception: from ",(0,r.kt)("inlineCode",{parentName:"li"},'try (compute()) { | Not_found => Js.log("oops")}')," to ",(0,r.kt)("inlineCode",{parentName:"li"},'try compute() catch { | Not_found => Js.log("oops")}'),"."),(0,r.kt)("li",{parentName:"ul"},"First class module: from ",(0,r.kt)("inlineCode",{parentName:"li"},"(module S: Student)")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"module(S: Student)"),"."),(0,r.kt)("li",{parentName:"ul"},"No custom infix operator for now (including ",(0,r.kt)("inlineCode",{parentName:"li"},"mod"),")."),(0,r.kt)("li",{parentName:"ul"},"Object access: from ",(0,r.kt)("inlineCode",{parentName:"li"},"settings##visible #= true")," to ",(0,r.kt)("inlineCode",{parentName:"li"},'settings["visible"] = true'),". Rejoice!"),(0,r.kt)("li",{parentName:"ul"},"Object: from ",(0,r.kt)("inlineCode",{parentName:"li"},'Js.t({"age": int})')," to just ",(0,r.kt)("inlineCode",{parentName:"li"},'{"age": int}'),". The ",(0,r.kt)("inlineCode",{parentName:"li"},"Js.t")," part is now uneeded."),(0,r.kt)("li",{parentName:"ul"},"Attribute: from ",(0,r.kt)("inlineCode",{parentName:"li"},'[@myAttribute "hello"]')," to ",(0,r.kt)("inlineCode",{parentName:"li"},'@myAttribute("hello")'),". From ",(0,r.kt)("inlineCode",{parentName:"li"},"[%re bla]")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"%re(bla)"),"."),(0,r.kt)("li",{parentName:"ul"},"Removed dereference syntax ",(0,r.kt)("inlineCode",{parentName:"li"},"result^"),". Just use ",(0,r.kt)("inlineCode",{parentName:"li"},"result.contents"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fun")," pattern matching syntax removed."),(0,r.kt)("li",{parentName:"ul"},"Type declaration is non-recursive by default, consistent with let bindings. To have recursive types, use ",(0,r.kt)("inlineCode",{parentName:"li"},"type rec myList<'a> = Nil | Cons('a, myList<'a>)"),"."),(0,r.kt)("li",{parentName:"ul"},"Use any words, including reserved keywords, as your identifier name: ",(0,r.kt)("inlineCode",{parentName:"li"},'let \\"try" = true'),".")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5b8c\u5168\u53bb\u9664\u4e86\u5206\u53f7(\u4f60\u4ecd\u7136\u53ef\u4ee5\u52a0\u4e0a)."),(0,r.kt)("li",{parentName:"ul"},"\u4e0d\u518d\u9700\u8981 ",(0,r.kt)("inlineCode",{parentName:"li"},"if"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"switch")," \u548c ",(0,r.kt)("inlineCode",{parentName:"li"},"try"),"\u8868\u8fbe\u5f0f\u7684\u62ec\u53f7."),(0,r.kt)("li",{parentName:"ul"},"\u7c7b\u578b\u53c2\u6570\u7684\u8bed\u6cd5: \u4ece ",(0,r.kt)("inlineCode",{parentName:"li"},"option(int)")," \u53d8\u4e3a ",(0,r.kt)("inlineCode",{parentName:"li"},"option<int>"),"."),(0,r.kt)("li",{parentName:"ul"},"\u65e7\u5185\u63d2\u5b57\u7b26\u4e32\u5199\u6cd5: \u4ece ",(0,r.kt)("inlineCode",{parentName:"li"},"{j|hello ${name}|j}")," \u53d8\u4e3a ",(0,r.kt)("inlineCode",{parentName:"li"},"j`hello ${name}`"),". \u73b0\u5728\u5df2\u7ecf\u6709\u4e86\u66f4\u597d\u7684unicode\u652f\u6301!"),(0,r.kt)("li",{parentName:"ul"},"\u65b0\u7684\u5185\u63d2\u5b57\u7b26\u4e32\u5199\u6cd5: ",(0,r.kt)("inlineCode",{parentName:"li"},"`hello world`"),". \u540c\u6837\u652f\u6301\u591a\u884c\u548cunicode. ",(0,r.kt)("inlineCode",{parentName:"li"},'"hello world"')," string is now singleline."),(0,r.kt)("li",{parentName:"ul"},"\u591a\u6001\u53d8\u4f53(Polymorphic variants): \u4ece ",(0,r.kt)("inlineCode",{parentName:"li"}," `red")," \u53d8\u4e3a ",(0,r.kt)("inlineCode",{parentName:"li"},"#red"),"."),(0,r.kt)("li",{parentName:"ul"},"\u6570\u7ec4(Array)\u5199\u6cd5: \u4ece ",(0,r.kt)("inlineCode",{parentName:"li"},"[|1,2,3|]")," \u53d8\u4e3a ",(0,r.kt)("inlineCode",{parentName:"li"},"[1,2,3]"),". \u5728JS\u4e2d, \u6570\u7ec4\u9ed8\u8ba4\u5c31\u662f\u53f3\u8fb9\u7684\u5f62\u5f0f."),(0,r.kt)("li",{parentName:"ul"},"\u5217\u8868(List)\u5199\u6cd5: \u4ece ",(0,r.kt)("inlineCode",{parentName:"li"},"[1,2,3]")," \u53d8\u4e3a ",(0,r.kt)("inlineCode",{parentName:"li"},"list[1,2,3]")," (_8.1.1 \u7248\u672c\u66f4\u65b0: \u73b0\u5728\u7684\u5199\u6cd5\u662f ",(0,r.kt)("inlineCode",{parentName:"li"},"list{1, 2, 3}"),"). \u8fd9\u4e0e\u5373\u5c06\u5230\u6765\u7684\u4ee5\u7edf\u4e00\u65b9\u5f0f\u8bbf\u95ee\u5bb9\u5668\u7684\u8ba1\u5212\u6709\u5173, \u6bd4\u5982\u8bf4: ",(0,r.kt)("inlineCode",{parentName:"li"},"set[...]")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"map[...]"),". \u4e5f\u8bb8\u53ea\u662f\u6682\u65f6\u4fee\u6539."),(0,r.kt)("li",{parentName:"ul"},"\u5f02\u5e38\u5199\u6cd5: \u4ece ",(0,r.kt)("inlineCode",{parentName:"li"},'try (compute()) { | Not_found => Js.log("oops")}')," \u53d8\u4e3a ",(0,r.kt)("inlineCode",{parentName:"li"},'try compute() catch { | Not_found => Js.log("oops")}'),"."),(0,r.kt)("li",{parentName:"ul"},"\u6a21\u5757\u7684\u4e00\u7b49\u516c\u6c11\u7528\u6cd5: \u4ece ",(0,r.kt)("inlineCode",{parentName:"li"},"(module S: Student)")," \u53d8\u4e3a ",(0,r.kt)("inlineCode",{parentName:"li"},"module(S: Student)"),"."),(0,r.kt)("li",{parentName:"ul"},"\u76ee\u524d\u6ca1\u6709\u81ea\u5b9a\u4e49\u4e2d\u7f00\u8fd0\u7b97\u7b26\u7684\u652f\u6301 (\u5305\u62ec ",(0,r.kt)("inlineCode",{parentName:"li"},"mod"),")."),(0,r.kt)("li",{parentName:"ul"},"\u5bf9\u8c61\u8bbf\u95ee\u7684\u5199\u6cd5: \u4ece ",(0,r.kt)("inlineCode",{parentName:"li"},"settings##visible #= true")," \u53d8\u4e3a ",(0,r.kt)("inlineCode",{parentName:"li"},'settings["visible"] = true'),". \u6b22\u547c\u5427!"),(0,r.kt)("li",{parentName:"ul"},"\u5bf9\u8c61\u521b\u5efa\u7684\u5199\u6cd5: \u4ece ",(0,r.kt)("inlineCode",{parentName:"li"},'Js.t({"age": int})')," \u53d8\u6210\u4e86\u53ea\u9700\u8981 ",(0,r.kt)("inlineCode",{parentName:"li"},'{"age": int}'),". \u524d\u9762\u7684 ",(0,r.kt)("inlineCode",{parentName:"li"},"Js.t")," \u90e8\u5206\u5df2\u7ecf\u4e0d\u518d\u9700\u8981\u4e86."),(0,r.kt)("li",{parentName:"ul"},"Attribute: from ",(0,r.kt)("inlineCode",{parentName:"li"},'[@myAttribute "hello"]')," to ",(0,r.kt)("inlineCode",{parentName:"li"},'@myAttribute("hello")'),". From ",(0,r.kt)("inlineCode",{parentName:"li"},"[%re bla]")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"%re(bla)"),"."),(0,r.kt)("li",{parentName:"ul"},"\u4ee5\u524d\u89e3\u5f15\u7528\u7684\u5199\u6cd5 ",(0,r.kt)("inlineCode",{parentName:"li"},"result^")," \u88ab\u79fb\u9664\u4e86. \u73b0\u5728\u53ea\u9700\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"li"},"result.contents"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fun")," \u7684\u6a21\u5f0f\u5339\u914d\u8bed\u6cd5\u88ab\u79fb\u9664\u4e86."),(0,r.kt)("li",{parentName:"ul"},"Type declaration is non-recursive by default, consistent with let bindings. To have recursive types, use ",(0,r.kt)("inlineCode",{parentName:"li"},"type rec myList<'a> = Nil | Cons('a, myList<'a>)"),". \u7c7b\u578b\u58f0\u660e\u73b0\u5728\u662f\u9ed8\u8ba4\u975e\u9012\u5f52\u7684, \u8fd9\u4e0elet\u7ed1\u5b9a\u4e00\u81f4. \u5982\u679c\u8981\u4f7f\u7528\u9012\u5f52\u7c7b\u578b, \u53ef\u4ee5\u8fd9\u6837\u5b9a\u4e49",(0,r.kt)("inlineCode",{parentName:"li"},"type rec myList<'a> = Nil | Cons('a, myList<'a>)")),(0,r.kt)("li",{parentName:"ul"},"\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u7684\u5355\u8bcd(\u5305\u62ec\u4fdd\u7559\u5173\u952e\u5b57)\u4f5c\u4e3a\u6807\u8bc6\u7b26: ",(0,r.kt)("inlineCode",{parentName:"li"},'let \\"try" = true'),".")))}s.isMDXComponent=!0,s.frontmatter={title:"\u8fc1\u79fb\u5230ReScript\u8bed\u6cd5",description:"Instructions on upgrading from Reason to ReScript",canonical:"/docs/manual/latest/migrate-to-new-syntax",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs-cn/manual/latest/migrate-from-bucklescript-reason.mdx"}},8421:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs-cn/manual/latest/migrate-from-bucklescript-reason",function(){return n(78739)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=8421,e(e.s=t);var t}));var t=e.O();_N_E=t}]);