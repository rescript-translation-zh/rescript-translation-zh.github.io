(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[43519],{17375:function(e,t,a){"use strict";function n(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},p=Object.keys(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}a.d(t,{Z:function(){return n}})},90895:function(e,t,a){"use strict";a.r(t),a.d(t,{default:function(){return m}});var n=a(17375),r=a(96156),p=(a(67294),a(3905));function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){(0,r.Z)(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}var s,i=(s="CodeTab",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,p.kt)("div",o({},e))}),u={};function m(e){var t=e.components,a=(0,n.Z)(e,["components"]);return(0,p.kt)("wrapper",o(o(o({},u),a),{},{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h1",o({},{id:"pipe--\u7ba1\u9053"}),"Pipe | \u7ba1\u9053"),(0,p.kt)("p",null,"ReScript provides a tiny but surprisingly useful operator ",(0,p.kt)("inlineCode",{parentName:"p"},"->"),', called the "pipe", that allows you to "flip" your code inside-out. ',(0,p.kt)("inlineCode",{parentName:"p"},"a(b)")," becomes ",(0,p.kt)("inlineCode",{parentName:"p"},"b->a"),". It's a simple piece of syntax that doesn't have any runtime cost."),(0,p.kt)("p",null,"ReScript\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5c0f\u4f46\u5f88\u5f3a\u5927\u7684\u64cd\u4f5c\u7b26",(0,p.kt)("inlineCode",{parentName:"p"},"->"),', \u79f0\u4e3a "\u7ba1\u9053(pipe)", \u5b83\u5141\u8bb8\u4f60\u4ece\u5185\u5411\u5916 "\u7ffb\u8f6c"\u4ee3\u7801. ',(0,p.kt)("inlineCode",{parentName:"p"},"a(b)"),"\u53d8\u6210",(0,p.kt)("inlineCode",{parentName:"p"},"b->a"),". \u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u8bed\u6cd5, \u6ca1\u6709\u4efb\u4f55\u8fd0\u884c\u65f6\u6210\u672c."),(0,p.kt)("p",null,"Why would you use it? Imagine you have the following:"),(0,p.kt)("p",null,"\u4e3a\u4ec0\u4e48\u4f60\u4f1a\u7528\u5230\u5b83\u5462? \u60f3\u8c61\u4e00\u4e0b\u4e0b\u9762\u7684\u4ee3\u7801:"),(0,p.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-res"}),"validateAge(getAge(parseData(person)))\n")),(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-js"}),"validateAge(getAge(parseData(person)));\n"))),(0,p.kt)("p",null,"This is slightly hard to read, since you need to read the code from the innermost part, to the outer parts. Use pipe to streamline it:"),(0,p.kt)("p",null,"\u8fd9\u6709\u70b9\u96be\u8bfb, \u56e0\u4e3a\u4f60\u9700\u8981\u4ece\u6700\u91cc\u9762\u7684\u90e8\u5206\u5f00\u59cb\u8bfb, \u4e00\u76f4\u5230\u6700\u5916\u9762\u7684\u90e8\u5206. \u53ef\u4ee5\u4f7f\u7528\u7ba1\u9053\u6765\u7cbe\u7b80(streamline)\u5b83:"),(0,p.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-res"}),"person\n  ->parseData\n  ->getAge\n  ->validateAge\n")),(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-js"}),"validateAge(getAge(parseData(person)));\n"))),(0,p.kt)("p",null,"Basically, ",(0,p.kt)("inlineCode",{parentName:"p"},"parseData(person)")," is transformed into ",(0,p.kt)("inlineCode",{parentName:"p"},"person->parseData"),", and ",(0,p.kt)("inlineCode",{parentName:"p"},"getAge(person->parseData)")," is transformed into ",(0,p.kt)("inlineCode",{parentName:"p"},"person->parseData->getAge"),", etc."),(0,p.kt)("p",null,"\u57fa\u672c\u4e0a, ",(0,p.kt)("inlineCode",{parentName:"p"},"parseData(person)"),"\u88ab\u8f6c\u6362\u4e3a",(0,p.kt)("inlineCode",{parentName:"p"},"person->parseData"),", ",(0,p.kt)("inlineCode",{parentName:"p"},"getAge(person->parseData)"),"\u88ab\u8f6c\u6362\u4e3a",(0,p.kt)("inlineCode",{parentName:"p"},"person->parseData->getAge"),", \u8bf8\u5982\u6b64\u7c7b."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"This works when the function takes more than one argument too"),"."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"\u5f53\u51fd\u6570\u9700\u8981\u4e00\u4e2a\u4ee5\u4e0a\u7684\u53c2\u6570\u65f6\u8fd9\u4e5f\u662f\u53ef\u884c\u7684"),"."),(0,p.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-res"}),"a(one, two, three)\n")),(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-js"}),"a(one, two, three);\n"))),(0,p.kt)("p",null,"is the same as"),(0,p.kt)("p",null,"\u548c"),(0,p.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-res"}),"one->a(two, three)\n")),(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-js"}),"a(one, two, three);\n"))),(0,p.kt)("p",null,"\u662f\u4e00\u6837\u7684."),(0,p.kt)("p",null,"This also works with labeled arguments."),(0,p.kt)("p",null,"\u8fd9\u4e5f\u9002\u7528\u4e8e\u5e26\u6807\u7b7e\u7684\u53c2\u6570."),(0,p.kt)("p",null,"Pipes are used to emulate object-oriented programming. For example, ",(0,p.kt)("inlineCode",{parentName:"p"},"myStudent.getName")," in other languages like Java would be ",(0,p.kt)("inlineCode",{parentName:"p"},"myStudent->getName")," in ReScript (equivalent to ",(0,p.kt)("inlineCode",{parentName:"p"},"getName(myStudent)"),"). This allows us to have the readability of OOP without the downside of dragging in a huge class system just to call a function on a piece of data."),(0,p.kt)("p",null,"\u7ba1\u9053\u88ab\u7528\u6765\u6a21\u62df\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b. \u4f8b\u5982, ",(0,p.kt)("inlineCode",{parentName:"p"},"myStudent.getName"),"\u5728Java\u7b49\u5176\u4ed6\u8bed\u8a00\u4e2d\u662f",(0,p.kt)("inlineCode",{parentName:"p"},"myStudent->getName"),"\u5728ReScript\u4e2d(\u76f8\u5f53\u4e8e",(0,p.kt)("inlineCode",{parentName:"p"},"getName(myStudent)"),"). \u8fd9\u4f7f\u6211\u4eec\u80fd\u591f\u62e5\u6709OOP\u7684\u53ef\u8bfb\u6027, \u800c\u6ca1\u6709\u62d6\u5165\u4e00\u4e2a\u5de8\u5927\u7684\u7c7b\u7cfb\u7edf\u53ea\u662f\u4e3a\u4e86\u5728\u4e00\u4e2a\u6570\u636e\u4e0a\u8c03\u7528\u4e00\u4e2a\u51fd\u6570. "),(0,p.kt)("h2",o({},{id:"tips--tricks--\u6280\u5de7\u548c\u8bc0\u7a8d"}),"Tips & Tricks | \u6280\u5de7\u548c\u8bc0\u7a8d"),(0,p.kt)("p",null,"Do ",(0,p.kt)("strong",{parentName:"p"},"not")," abuse pipes; they're a means to an end. Inexperienced engineers sometimes shape a library's API to take advantage of the pipe. This is backwards."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"\u4e0d\u8981\u6ee5\u7528"),"\u7ba1\u9053; \u5b83\u4eec\u662f\u8fbe\u5230\u76ee\u7684\u7684\u4e00\u79cd\u624b\u6bb5. \u6ca1\u6709\u7ecf\u9a8c\u7684\u5de5\u7a0b\u5e08\u6709\u65f6\u4f1a\u4e3a\u4e86\u5229\u7528\u7ba1\u9053\u7684\u4f18\u52bf\u6765\u5851\u9020\u4e00\u4e2a\u5e93\u7684API, \u8fd9\u641e\u9519\u4e86\u65b9\u5411."),(0,p.kt)("h2",o({},{id:"js-method-chaining--js\u65b9\u6cd5\u94fe"}),"JS Method Chaining | JS\u65b9\u6cd5\u94fe"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"This section requires understanding of ",(0,p.kt)("a",o({parentName:"em"},{href:"bind-to-js-function.md#object-method"}),"our binding API")),"."),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"\u9605\u8bfb\u8fd9\u4e00\u5c0f\u8282\u9700\u8981\u5148\u7406\u89e3",(0,p.kt)("a",o({parentName:"em"},{href:"bind-to-js-function.md#object-method"}),"JS\u7ed1\u5b9aAPI")),"."),(0,p.kt)("p",null,"JavaScript's APIs are often attached to objects, and are often chainable, like so:"),(0,p.kt)("p",null,"JavaScript\u7684API\u901a\u5e38\u5173\u8054\u5728\u5bf9\u8c61\u4e0a, \u800c\u4e14\u901a\u5e38\u662f\u53ef\u4ee5\u94fe\u5f0f\u8c03\u7528\u7684, \u50cf\u8fd9\u6837:"),(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-js"}),"const result = [1, 2, 3].map(a => a + 1).filter(a => a % 2 === 0);\n\nasyncRequest()\n  .setWaitDuration(4000)\n  .send();\n")),(0,p.kt)("p",null,"Assuming we don't need the chaining behavior above, we'd bind to each case this using ",(0,p.kt)("a",o({parentName:"p"},{href:"/syntax-lookup#send-decorator"}),(0,p.kt)("inlineCode",{parentName:"a"},"@send"))," from the aforementioned binding API page:"),(0,p.kt)("p",null,"\u5047\u8bbe\u6211\u4eec\u4e0d\u9700\u8981\u4e0a\u9762\u7684\u8fde\u9501\u884c\u4e3a, \u6211\u4eec\u4f1a\u7528\u4e0a\u8ff0\u7ed1\u5b9aAPI\u9875\u9762\u4e2d\u7684",(0,p.kt)("a",o({parentName:"p"},{href:"/syntax-lookup#send-decorator"}),(0,p.kt)("inlineCode",{parentName:"a"},"@send")),"\u6765\u7ed1\u5b9a:"),(0,p.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"prelude",prelude:!0}),'type request\n@val external asyncRequest: unit => request = "asyncRequest"\n@send external setWaitDuration: (request, int) => request = "setWaitDuration"\n@send external send: request => unit = "send"\n')),(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-js"}),"// Empty output\n"))),(0,p.kt)("p",null,"You'd use them like this:"),(0,p.kt)("p",null,"\u4f60\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\u5b83\u4eec:"),(0,p.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"let result = Js.Array2.filter(\n  Js.Array2.map([1, 2, 3], a => a + 1),\n  a => mod(a, 2) == 0\n)\n\nsend(setWaitDuration(asyncRequest(), 4000))\n")),(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-js"}),"var result = [1, 2, 3].map(function(a) {\n  return a + 1 | 0;\n}).filter(function(a) {\n  return a % 2 === 0;\n});\n\nasyncRequest().setWaitDuration(4000).send();\n"))),(0,p.kt)("p",null,"This looks much worse than the JS counterpart! Clean it up visually with pipe:"),(0,p.kt)("p",null,"\u8fd9\u770b\u8d77\u6765\u6bd4\u5bf9\u5e94\u7684JS\u90e8\u5206\u8fd8\u8981\u7cdf\u7cd5\u5f97\u591a! \u7528\u7ba1\u9053\u5728\u89c6\u89c9\u4e0a\u628a\u5b83\u6e05\u7406\u5e72\u51c0:"),(0,p.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"let result = [1, 2, 3]\n  ->Js.Array2.map(a => a + 1)\n  ->Js.Array2.filter(a => mod(a, 2) == 0)\n\nasyncRequest()->setWaitDuration(4000)->send\n")),(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-js"}),"var result = [1, 2, 3].map(function(a) {\n  return a + 1 | 0;\n}).filter(function(a) {\n  return a % 2 === 0;\n});\n\nasyncRequest().setWaitDuration(4000).send();\n"))),(0,p.kt)("h2",o({},{id:"pipe-into-variants--\u628a\u7ba1\u9053\u5f15\u5165\u53d8\u4f53"}),"Pipe Into Variants | \u628a\u7ba1\u9053\u5f15\u5165\u53d8\u4f53"),(0,p.kt)("p",null,"You can pipe into a variant's constructor as if it was a function:"),(0,p.kt)("p",null,"\u4f60\u53ef\u4ee5\u628a\u7ba1\u9053\u5f15\u5165\u5230\u4e00\u4e2a\u53d8\u4f53\u7684\u6784\u9020\u5668, \u5c31\u50cf\u6784\u9020\u5668\u662f\u51fd\u6570\u4e00\u6837:"),(0,p.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-res"}),"let result = name->preprocess->Some\n")),(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-js"}),"var result = preprocess(name);\n"))),(0,p.kt)("p",null,"We turn this into:"),(0,p.kt)("p",null,"\u4f1a\u628a\u5b83\u7f16\u8bd1\u4e3a:"),(0,p.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-res"}),"let result = Some(preprocess(name))\n")),(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-js"}),"var result = preprocess(name);\n"))),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Note")," that using a variant constructor as a function wouldn't work anywhere else beside here."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"\u6ce8\u610f"),", \u5c06\u53d8\u4f53\u6784\u9020\u51fd\u6570\u4f5c\u4e3a\u51fd\u6570\u4f7f\u7528\u5728\u9664\u4e86\u8fd9\u91cc\u4e4b\u5916\u7684\u4efb\u4f55\u5730\u65b9\u90fd\u4e0d\u4f1a\u8d77\u4f5c\u7528."),(0,p.kt)("h2",o({},{id:"pipe-placeholders--\u7ba1\u9053\u5360\u4f4d\u7b26"}),"Pipe Placeholders | \u7ba1\u9053\u5360\u4f4d\u7b26"),(0,p.kt)("p",null,"A placeholder is written as an underscore and it tells ReScript that you want to fill in an argument of a function later. These two have equivalent meaning:"),(0,p.kt)("p",null,"\u901a\u8fc7\u4e0b\u5212\u7ebf\u6765\u8868\u8fbe\u4e00\u4e2a\u5360\u4f4d\u7b26, \u5b83\u544a\u8bc9ReScript\u4f60\u60f3\u5728\u4ee5\u540e\u586b\u5165\u4e00\u4e2a\u51fd\u6570\u7684\u53c2\u6570. \u8fd9\u4e24\u8005\u7684\u610f\u4e49\u76f8\u5f53:"),(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-res"}),"let addTo7 = (x) => add3(3, x, 4)\nlet addTo7 = add3(3, _, 4)\n")),(0,p.kt)("p",null,"Sometimes you don't want to pipe the value you have into the first position. In these cases you can mark a placeholder value to show which argument you would like to pipe into."),(0,p.kt)("p",null,"\u6709\u65f6\u4f60\u4e0d\u60f3\u628a\u4f60\u62e5\u6709\u7684\u503c\u7ba1\u9053\u5230\u7b2c\u4e00\u4e2a\u53c2\u6570, \u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b, \u4f60\u53ef\u4ee5\u6807\u8bb0\u4e00\u4e2a\u5360\u4f4d\u7b26\u7684\u503c, \u4ee5\u8868\u793a\u4f60\u60f3\u7ba1\u9053\u5230\u54ea\u4e2a\u53c2\u6570."),(0,p.kt)("p",null,"Let's say you have a function ",(0,p.kt)("inlineCode",{parentName:"p"},"namePerson"),", which takes a ",(0,p.kt)("inlineCode",{parentName:"p"},"person")," then a ",(0,p.kt)("inlineCode",{parentName:"p"},"name")," argument. If you are transforming a person then pipe will work as-is:"),(0,p.kt)("p",null,"\u5047\u8bbe\u4f60\u6709\u4e00\u4e2a\u540d\u4e3a",(0,p.kt)("inlineCode",{parentName:"p"},"namePerson"),"\u7684\u51fd\u6570, \u4f20\u5165\u4e00\u4e2a",(0,p.kt)("inlineCode",{parentName:"p"},"person"),"\u548c\u4e00\u4e2a",(0,p.kt)("inlineCode",{parentName:"p"},"name"),"\u53c2\u6570. \u5982\u679c\u4f60\u60f3\u7528\u7ba1\u9053\u8fd0\u7b97\u7b26\u4f20\u9012\u4e00\u4e2aperson\u53ef\u4ee5\u8fd9\u6837\u505a:"),(0,p.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-res"}),'makePerson(~age=47, ())\n  ->namePerson("Jane")\n')),(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-js"}),'namePerson(makePerson(47), "Jane");\n'))),(0,p.kt)("p",null,"If you have a name that you want to apply to a person object, you can use a placeholder:"),(0,p.kt)("p",null,"\u5982\u679c\u4f60\u6709\u4e00\u4e2aname, \u5e76\u4e14\u60f3\u901a\u8fc7\u7ba1\u9053\u8fd0\u7b97\u7b26\u9644\u52a0\u5230",(0,p.kt)("inlineCode",{parentName:"p"},"person"),"\u5bf9\u8c61\u4e0a, \u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5360\u4f4d\u7b26."),(0,p.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-res"}),"getName(input)\n  ->namePerson(personDetails, _)\n")),(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-js"}),"var __x = getName(input);\nnamePerson(personDetails, __x);\n"))),(0,p.kt)("p",null,"This allows you to pipe into any positional argument. It also works for named arguments:"),(0,p.kt)("p",null,'\u8fd9\u8ba9\u4f60\u53ef\u4ee5\u5c06\u4efb\u4f55\u503c"\u7ba1\u9053"\u8fdb\u4efb\u4f55\u4f4d\u7f6e\u53c2\u6570. \u8fd9\u79cd\u673a\u5236\u540c\u6837\u5bf9\u547d\u540d\u53c2\u6570\u6709\u6548:'),(0,p.kt)(i,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-res"}),"getName(input)\n  ->namePerson(~person=personDetails, ~name=_)\n")),(0,p.kt)("pre",null,(0,p.kt)("code",o({parentName:"pre"},{className:"language-js"}),"var __x = getName(input);\nnamePerson(personDetails, __x);\n"))),(0,p.kt)("h2",o({},{id:"triangle-pipe-deprecated--\u4e09\u89d2\u7ba1\u9053\u8fd0\u7b97\u7b26\u5df2\u5e9f\u5f03"}),"Triangle Pipe (Deprecated) | \u4e09\u89d2\u7ba1\u9053\u8fd0\u7b97\u7b26(\u5df2\u5e9f\u5f03)"),(0,p.kt)("p",null,"You might see usages of another pipe, ",(0,p.kt)("inlineCode",{parentName:"p"},"|>"),", in some codebases. These are deprecated."),(0,p.kt)("p",null,"\u4f60\u53ef\u80fd\u5728\u4e00\u4e9b\u4ee3\u7801\u5e93\u4e2d\u89c1\u8fc7\u53e6\u4e00\u79cd\u7ba1\u9053, ",(0,p.kt)("inlineCode",{parentName:"p"},"|>"),". \u5b83\u4eec\u5df2\u7ecf\u88ab\u5e9f\u5f03\u4e86."),(0,p.kt)("p",null,"Unlike ",(0,p.kt)("inlineCode",{parentName:"p"},"->")," pipe, the ",(0,p.kt)("inlineCode",{parentName:"p"},"|>")," pipe puts the subject as the last (not first) argument of the function. ",(0,p.kt)("inlineCode",{parentName:"p"},"a |> f(b)")," turns into ",(0,p.kt)("inlineCode",{parentName:"p"},"f(b, a)"),"."),(0,p.kt)("p",null,"\u4e0d\u50cf",(0,p.kt)("inlineCode",{parentName:"p"},"->"),"\u7ba1\u9053, ",(0,p.kt)("inlineCode",{parentName:"p"},"|>"),"\u7ba1\u9053\u5c06\u53c2\u6570\u4f20\u5165\u6700\u540e\u4e00\u4e2a\u53c2\u6570(\u800c\u4e0d\u662f\u7b2c\u4e00\u4e2a). \u6bd4\u5982\u8bf4, ",(0,p.kt)("inlineCode",{parentName:"p"},"a |> f(b)"),"\u4f1a\u8f6c\u53d8\u4e3a ",(0,p.kt)("inlineCode",{parentName:"p"},"f(b, a)"),"."),(0,p.kt)("p",null,"For a more thorough discussion on the rationale and differences between the two operators, please refer to the ",(0,p.kt)("a",o({parentName:"p"},{href:"https://www.javierchavarri.com/data-first-and-data-last-a-comparison/"}),"Data-first and Data-last comparison by Javier Ch\xe1varri")),(0,p.kt)("p",null,"\u5173\u4e8e\u8fd9\u4e24\u4e2a\u8fd0\u7b97\u7b26\u7684\u539f\u7406\u548c\u533a\u522b\u7684\u66f4\u6df1\u5165\u8ba8\u8bba, \u8bf7\u53c2\u8003",(0,p.kt)("a",o({parentName:"p"},{href:"https://www.javierchavarri.com/data-first-and-data-last-a-comparison/"}),"Javier Ch\xe1varri\u7684\u524d\u7f6e\u6570\u636e\u548c\u540e\u7f6e\u6570\u636e\u6bd4\u8f83")))}m.isMDXComponent=!0,m.frontmatter={title:"\u7ba1\u9053",description:"The Pipe operator (->)",canonical:"/docs/manual/latest/pipe",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs-cn/manual/latest/pipe.mdx"}},73799:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs-cn/manual/latest/pipe",function(){return a(90895)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=73799,e(e.s=t);var t}));var t=e.O();_N_E=t}]);