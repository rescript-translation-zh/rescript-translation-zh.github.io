(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[53629],{17375:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return a}})},40917:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return c}});var a=n(17375),r=n(96156),l=(n(67294),n(3905));function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var o,s=(o="CodeTab",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",p({},e))}),m={};function c(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,l.kt)("wrapper",p(p(p({},m),n),{},{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",p({},{id:"record--\u8bb0\u5f55"}),"Record | \u8bb0\u5f55"),(0,l.kt)("p",null,"Records are like JavaScript objects but:"),(0,l.kt)("p",null,"\u8bb0\u5f55\u548cJavaScript\u4e2d\u7684object\u7c7b\u4f3c, \u4f46\u6709\u5982\u4e0b\u7279\u70b9:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"are immutable by default")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"have fixed fields (not extensible)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u6210\u5458\u5b57\u6bb5\u662f\u56fa\u5b9a\u7684(\u65e0\u6cd5\u6269\u5c55)"))),(0,l.kt)("h2",p({},{id:"type-declaration--\u7c7b\u578b\u58f0\u660e"}),"Type Declaration | \u7c7b\u578b\u58f0\u660e"),(0,l.kt)("p",null,"A record needs a mandatory type declaration:"),(0,l.kt)("p",null,"\u4e00\u4e2a\u8bb0\u5f55\u9700\u8981\u4e00\u4e2a\u663e\u5f0f\u7684\u7c7b\u578b\u58f0\u660e: "),(0,l.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"prelude",prelude:!0}),"type person = {\n  age: int,\n  name: string,\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-js"}),"// Empty output\n"))),(0,l.kt)("h2",p({},{id:"creation"}),"Creation"),(0,l.kt)("p",null,"To create a ",(0,l.kt)("inlineCode",{parentName:"p"},"person")," record (declared above):"),(0,l.kt)("p",null,"\u521b\u5efa\u4e00\u4e2a\u7c7b\u578b\u4e3a",(0,l.kt)("inlineCode",{parentName:"p"},"person"),"\u8bb0\u5f55(\u4e4b\u524d\u5df2\u7ecf\u58f0\u660e\u8fc7\u4e86):"),(0,l.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"prelude",prelude:!0}),'let me = {\n  age: 5,\n  name: "Big ReScript"\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-js"}),'var me = {\n  age: 5,\n  name: "Big ReScript"\n};\n'))),(0,l.kt)("p",null,"When you create a new record value, ReScript tries to find a record type declaration that conforms to the shape of the value. So the ",(0,l.kt)("inlineCode",{parentName:"p"},"me")," value here is inferred as of type ",(0,l.kt)("inlineCode",{parentName:"p"},"person"),"."),(0,l.kt)("p",null,"\u5f53\u4f60\u521b\u5efa\u8bb0\u5f55\u503c\u7684\u65f6\u5019, ReScript\u4f1a\u5c1d\u8bd5\u5bfb\u627e\u548c\u8bb0\u5f55\u503c\u76f8\u5339\u914d\u7684\u8bb0\u5f55\u7c7b\u578b. \u6240\u4ee5\u8fd9\u91cc\u7684",(0,l.kt)("inlineCode",{parentName:"p"},"me"),"\u4f1a\u88ab\u63a8\u5bfc\u4e3a\u7c7b\u578b",(0,l.kt)("inlineCode",{parentName:"p"},"person"),"."),(0,l.kt)("p",null,"The type is found by looking above the ",(0,l.kt)("inlineCode",{parentName:"p"},"me")," value. ",(0,l.kt)("strong",{parentName:"p"},"Note"),": if the type instead resides in another file or module, you need to explicitly indicate which file or module it is:"),(0,l.kt)("p",null,"\u7c7b\u578b\u53ef\u4ee5\u901a\u8fc7\u89c2\u5bdf",(0,l.kt)("inlineCode",{parentName:"p"},"me"),"\u7684\u503c\u63a8\u5bfc\u800c\u6765. \u5982\u679c\u7c7b\u578b\u7684\u5b9a\u4e49\u5728\u53e6\u4e00\u4e2a\u6587\u4ef6\u6216\u8005\u6a21\u5757, \u90a3\u4e48\u4f60\u5fc5\u987b\u8981\u6307\u660e\u5728\u54ea\u4e2a\u6a21\u5757:"),(0,l.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"// School.res\ntype person = {age: int, name: string}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-js"}),"// Empty output\n"))),(0,l.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-res"}),'// Example.res\n\nlet me: School.person = {age: 20, name: "Big ReScript"}\n/* or */\nlet me2 = {School.age: 20, name: "Big ReScript"}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-js"}),'var me = {\n  age: 20,\n  name: "Big ReScript"\n};\nvar me2 = {\n  age: 20,\n  name: "Big ReScript"\n};\n'))),(0,l.kt)("p",null,'Either of the above 3 says "this record\'s definition is found in the School file". The first one, the regular type annotation, is preferred.'),(0,l.kt)("p",null,'\u4e0a\u97623\u4e2a\u5b9a\u4e49\u5728\u544a\u8bc9\u6211\u4eec"\u6240\u5b9a\u4e49\u7684\u8bb0\u5f55\u7684\u7c7b\u578b\u5b9a\u4e49\u5728School\u6587\u4ef6\u4e2d". \u7b2c\u4e00\u4e2a, \u5373\u5e38\u89c4\u7684\u7c7b\u578b\u6ce8\u91ca\u662f\u9996\u9009.'),(0,l.kt)("h2",p({},{id:"access--\u8bb0\u5f55\u8bbf\u95ee"}),"Access | \u8bb0\u5f55\u8bbf\u95ee"),(0,l.kt)("p",null,"Use the familiar dot notation:"),(0,l.kt)("p",null,"\u4f7f\u7528\u5927\u5bb6\u719f\u6089\u7684\u70b9(",(0,l.kt)("inlineCode",{parentName:"p"},"."),")\u8868\u793a\u8bbf\u95ee\u8bb0\u5f55"),(0,l.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"let name = me.name\n")),(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-js"}),'var name = "Big ReScript";\n'))),(0,l.kt)("h2",p({},{id:"immutable-update"}),"Immutable Update"),(0,l.kt)("p",null,"New records can be created from old records with the ",(0,l.kt)("inlineCode",{parentName:"p"},"...")," spread operator. The original record isn't mutated."),(0,l.kt)("p",null,"\u65b0\u7684\u8bb0\u5f55\u53ef\u4ee5\u901a\u8fc7\u65e7\u7684\u8bb0\u5f55\u52a0\u4e0a\u5c55\u5f00\u8fd0\u7b97\u7b26",(0,l.kt)("inlineCode",{parentName:"p"},"..."),"\u521b\u5efa. \u539f\u59cb\u7684\u8bb0\u5f55\u662f\u4e0d\u4f1a\u88ab\u6539\u53d8\u7684."),(0,l.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"let meNextYear = {...me, age: me.age + 1}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-js"}),'var meNextYear = {\n  age: 21,\n  name: "Big ReScript"\n};\n'))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Note"),": spread cannot add new fields to the record value, as a record's shape is fixed by its type."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u6ce8\u610f"),': \u5c55\u5f00\u8fd0\u7b97\u7b26\u4e0d\u4f1a\u7ed9\u8bb0\u5f55\u6dfb\u52a0\u65b0\u7684\u5b57\u6bb5, \u56e0\u4e3a\u8bb0\u5f55\u7684"\u5f62\u72b6"\u5df2\u7ecf\u6839\u636e\u88ab\u7c7b\u578b\u56fa\u5b9a\u4e86.'),(0,l.kt)("h2",p({},{id:"mutable-update--\u53ef\u53d8\u66f4\u65b0"}),"Mutable Update | \u53ef\u53d8\u66f4\u65b0"),(0,l.kt)("p",null,"Record fields can optionally be mutable. This allows you to efficiently update those fields in-place with the ",(0,l.kt)("inlineCode",{parentName:"p"},"=")," operator."),(0,l.kt)("p",null,"\u8bb0\u5f55\u7684\u5b57\u6bb5\u53ef\u4ee5\u88ab\u8bbe\u7f6e\u4e3a\u53ef\u53d8\u7684, \u8fd9\u8ba9\u4f60\u53ef\u4ee5\u9ad8\u6548\u7684\u901a\u8fc7",(0,l.kt)("inlineCode",{parentName:"p"},"="),"\u8fd0\u7b97\u7b26\u539f\u5730\u66f4\u65b0\u8fd9\u4e9b\u5b57\u6bb5."),(0,l.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'type person = {\n  name: string,\n  mutable age: int\n}\n\nlet baby = {name: "Baby ReScript", age: 5}\nbaby.age = baby.age + 1 // `baby.age` is now 6. Happy birthday!\n')),(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-js"}),'var baby = {\n  name: "Baby ReScript",\n  age: 5\n};\n\nbaby.age = baby.age + 1 | 0;\n'))),(0,l.kt)("p",null,"Fields not marked with ",(0,l.kt)("inlineCode",{parentName:"p"},"mutable")," in the type declaration cannot be mutated."),(0,l.kt)("p",null,"\u6ca1\u6709\u5728\u7c7b\u578b\u58f0\u660e\u4e2d\u88ab\u6807\u8bb0\u4e3a",(0,l.kt)("inlineCode",{parentName:"p"},"mutable"),"\u7684\u5b57\u6bb5\u662f\u4e0d\u80fd\u88ab\u4fee\u6539\u7684."),(0,l.kt)("h2",p({},{id:"javascript-output--javascript\u8f93\u51fa"}),"JavaScript Output | JavaScript\u8f93\u51fa"),(0,l.kt)("p",null,"ReScript records compile to straightforward JavaScript objects; see the various JS output tabs above."),(0,l.kt)("p",null,"ReScript\u7684\u8bb0\u5f55\u4f1a\u76f4\u63a5\u7f16\u8bd1\u4e3aJavaScript\u7684\u5bf9\u8c61; \u53ef\u4ee5\u67e5\u770b\u4ee5\u4e0a\u8868\u683c\u7684JS\u8f93\u51fa."),(0,l.kt)("h2",p({},{id:"optional-record-fields--\u53ef\u9009\u8bb0\u5f55\u5b57\u6bb5"}),"Optional Record Fields | \u53ef\u9009\u8bb0\u5f55\u5b57\u6bb5"),(0,l.kt)("p",null,"ReScript ",(0,l.kt)("a",p({parentName:"p"},{href:"/blog/release-10-0-0#experimental-optional-record-fields"}),(0,l.kt)("inlineCode",{parentName:"a"},"v10"))," introduced optional record fields. This means that you can define fields that can be omitted when creating the record. It looks like this:"),(0,l.kt)("p",null,"ReScript ",(0,l.kt)("a",p({parentName:"p"},{href:"/blog/release-10-0-0#experimental-optional-record-fields"}),(0,l.kt)("inlineCode",{parentName:"a"},"v10")),"\u5f15\u5165\u4e86\u53ef\u9009\u8bb0\u5f55\u5b57\u6bb5. \u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5728\u521b\u5efa\u8bb0\u5f55\u7684\u65f6\u5019\u5ffd\u7565\u4e00\u4e9b\u5b57\u6bb5. \u6bd4\u5982\u8bf4\u50cf\u8fd9\u6837: "),(0,l.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"type person = {\n  age: int,\n  name?: string\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-js"}),"// Empty output\n"))),(0,l.kt)("p",null,"Notice how ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," has a suffixed ",(0,l.kt)("inlineCode",{parentName:"p"},"?"),". That means that the field itself is ",(0,l.kt)("em",{parentName:"p"},"optional"),"."),(0,l.kt)("p",null," \u6ce8\u610f\u5728",(0,l.kt)("inlineCode",{parentName:"p"},"name"),"\u6709\u4e2a",(0,l.kt)("inlineCode",{parentName:"p"},"?"),"\u540e\u7f00. \u8fd9\u610f\u5473\u7740\u5b57\u6bb5\u672c\u8eab\u7684\u662f ",(0,l.kt)("em",{parentName:"p"},"\u53ef\u9009\u7684"),"."),(0,l.kt)("h3",p({},{id:"creation--\u521b\u5efa\u53ef\u9009\u5b57\u6bb5"}),"Creation | \u521b\u5efa\u53ef\u9009\u5b57\u6bb5"),(0,l.kt)("p",null,"You can omit any optional fields when creating a record. Not setting an optional field will default the field's value to ",(0,l.kt)("inlineCode",{parentName:"p"},"None"),":"),(0,l.kt)("p",null,"\u4f60\u53ef\u4ee5\u5728\u521b\u5efa\u8bb0\u5f55\u7684\u65f6\u5019\u5ffd\u7565\u4efb\u610f\u7684\u53ef\u9009\u5b57\u6bb5, \u672a\u88ab\u8bbe\u7f6e\u7684\u5b57\u6bb5\u4f1a\u88ab\u8d4b\u4e88\u4e00\u4e2a\u9ed8\u8ba4\u503c",(0,l.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,l.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'type person = {\n  age: int,\n  name?: string\n}\n\nlet me = {\n  age: 5,\n  name: "Big ReScript"\n}\n\nlet friend = {\n  age: 7\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-js"}),'var me = {\n  age: 5,\n  name: "Big ReScript"\n};\n\nvar friend = {\n  age: 7\n};\n'))),(0,l.kt)("p",null,"This has consequences for pattern matching, which we'll expand a bit on soon."),(0,l.kt)("p",null,"\u8fd9\u4f1a\u5bf9\u6a21\u5f0f\u5339\u914d\u9020\u6210\u4e00\u5b9a\u7684\u8d1f\u62c5, \u6211\u4eec\u7a0d\u540e\u518d\u5c55\u5f00\u8bb2\u8fd9\u4e00\u70b9."),(0,l.kt)("h2",p({},{id:"immutable-update--\u4e0d\u53ef\u53d8\u66f4\u65b0"}),"Immutable Update | \u4e0d\u53ef\u53d8\u66f4\u65b0"),(0,l.kt)("p",null,"Updating an optional field via an immutable update above lets you set that field value without needing to care whether it's optional or not."),(0,l.kt)("p",null,"\u901a\u8fc7\u4e0d\u53ef\u53d8\u66f4\u65b0\u6765\u66f4\u65b0\u4e00\u4e2a\u53ef\u9009\u5b57\u6bb5\u7684\u65f6\u5019, \u4f60\u4e0d\u9700\u8981\u5176\u503c\u662f\u5426\u771f\u7684\u662f\u4e00\u4e2a\u53ef\u9009\u503c."),(0,l.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'type person = {\n  age: int,\n  name?: string\n}\n\nlet me = {\n  age: 123,\n  name: "Hello"\n}\n\nlet withoutName = {\n  ...me,\n  name: "New Name"\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-js"}),'import * as Caml_obj from "./stdlib/caml_obj.js";\n\nvar me = {\n  age: 123,\n  name: "Hello"\n};\n\nvar newrecord = Caml_obj.obj_dup(me);\n\nnewrecord.name = "New Name";\n\nvar withoutName = newrecord;\n'))),(0,l.kt)("p",null,"However, if you want to set the field to an optional value, you prefix that value with ",(0,l.kt)("inlineCode",{parentName:"p"},"?"),":"),(0,l.kt)("p",null,"\u5982\u679c\u4f60\u9700\u8981\u628a\u4e00\u4e2a\u53ef\u9009\u5b57\u6bb5\u66f4\u65b0\u4e3a\u53ef\u9009\u503c, \u4f60\u9700\u8981\u5728\u503c\u4e4b\u524d\u52a0\u4e0a ",(0,l.kt)("inlineCode",{parentName:"p"},"?"),":"),(0,l.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'type person = {\n  age: int,\n  name?: string\n}\n\nlet me = {\n  age: 123,\n  name: "Hello"\n}\n\nlet maybeName = Some("My Name")\n\nlet withoutName = {\n  ...me,\n  name: ?maybeName\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-js"}),'import * as Caml_obj from "./stdlib/caml_obj.js";\n\nvar me = {\n  age: 123,\n  name: "Hello"\n};\n\nvar maybeName = "My Name";\n\nvar newrecord = Caml_obj.obj_dup(me);\n\nnewrecord.name = maybeName;\n\nvar withoutName = newrecord;\n'))),(0,l.kt)("p",null,"You can unset an optional field's value via that same mechanism by setting it to ",(0,l.kt)("inlineCode",{parentName:"p"},"?None"),"."),(0,l.kt)("p",null,"\u4f60\u53ef\u4ee5\u901a\u8fc7\u540c\u6837\u7684\u673a\u5236\u5c06\u4e00\u4e2a\u53ef\u9009\u5b57\u6bb5\u7684\u503c\u8bbe\u7f6e\u4e3a`?None'\u6765\u53d6\u6d88\u5b83."),(0,l.kt)("h3",p({},{id:"pattern-matching-on-optional-fields--\u53ef\u9009\u5b57\u6bb5\u7684\u6a21\u5f0f\u5339\u914d"}),"Pattern Matching on Optional Fields | \u53ef\u9009\u5b57\u6bb5\u7684\u6a21\u5f0f\u5339\u914d"),(0,l.kt)("p",null,(0,l.kt)("a",p({parentName:"p"},{href:"pattern-matching-destructuring"}),"Pattern matching"),", one of ReScript's most important features, has two caveats when you deal with optional fields."),(0,l.kt)("p",null,(0,l.kt)("a",p({parentName:"p"},{href:"pattern-matching-destructuring"}),"\u6a21\u5f0f\u5339\u914d"),", \u662fReScript\u6700\u91cd\u8981\u7684\u7279\u6027\u4e4b\u4e00, \u4f46\u5f53\u4f60\u5904\u7406\u53ef\u9009\u5b57\u6bb5\u65f6, \u6709\u4e24\u70b9\u9700\u8981\u6ce8\u610f."),(0,l.kt)("p",null,"When matching on the value directly, it's an ",(0,l.kt)("inlineCode",{parentName:"p"},"option"),". Example:"),(0,l.kt)("p",null,"\u5f53\u76f4\u63a5\u5728\u503c\u4e0a\u8fdb\u884c\u5339\u914d\u7684\u65f6\u5019, \u5176\u662f\u4e00\u4e2aoption\u503c. \u4f8b\u5982:"),(0,l.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-res"}),'type person = {\n  age: int,\n  name?: string,\n}\n\nlet me = {\n  age: 123,\n  name: "Hello",\n}\n\nlet isRescript = switch me.name {\n| Some("ReScript") => true\n| Some(_) | None => false\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-js"}),'var isRescript;\n\nisRescript = "Hello" === "ReScript" ? true : false;\n\nvar me = {\n  age: 123,\n  name: "Hello"\n};\n'))),(0,l.kt)("p",null,"But, when matching on the field as part of the general record structure, it's treated as the underlying, non-optional value:"),(0,l.kt)("p",null,"\u4f46\u662f, \u5f53\u628a\u8fd9\u4e2a\u5b57\u6bb5\u4f5c\u4e3a\u901a\u7528\u7684\u8bb0\u5f55\u7ed3\u6784\u7684\u4e00\u90e8\u5206\u8fdb\u884c\u5339\u914d\u65f6, \u5b83\u88ab\u89c6\u4e3a\u57fa\u672c\u7684\u4e14\u975e\u9009\u62e9\u7684\u503c:"),(0,l.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-res"}),'type person = {\n  age: int,\n  name?: string,\n}\n\nlet me = {\n  age: 123,\n  name: "Hello",\n}\n\nlet isRescript = switch me {\n| {name: "ReScript"} => true\n| _ => false\n}\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-js"}),'var isRescript;\n\nisRescript = "Hello" === "ReScript" ? true : false;\n\nvar me = {\n  age: 123,\n  name: "Hello"\n};\n'))),(0,l.kt)("p",null,"Sometimes you ",(0,l.kt)("em",{parentName:"p"},"do")," want to know whether the field was set or not. You can tell the pattern matching engine about that by prefixing your option match with ",(0,l.kt)("inlineCode",{parentName:"p"},"?"),", like this:"),(0,l.kt)("p",null,"\u6709\u7684\u65f6\u5019\u4f60\u771f\u7684\u60f3\u8981\u786e\u8ba4\u5b57\u6bb5\u7684\u503c\u662f\u5426\u88ab\u8bbe\u7f6e. \u4f60\u53ef\u4ee5\u5728\u4f60\u7684\u53ef\u9009\u503c\u7684\u5339\u914d\u524d\u52a0\u4e0a",(0,l.kt)("inlineCode",{parentName:"p"},"?"),", \u4ee5\u6b64\u544a\u77e5\u6a21\u5f0f\u5339\u914d\u673a, \u50cf\u8fd9\u6837:"),(0,l.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-res"}),'type person = {\n  age: int,\n  name?: string,\n}\n\nlet me = {\n  age: 123,\n  name: "Hello",\n}\n\nlet nameWasSet = switch me {\n| {name: ?None} => false\n| {name: ?Some(_)} => true\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-js"}),'var nameWasSet = false;\n\nvar me = {\n  age: 123,\n  name: "Hello"\n};\n'))),(0,l.kt)("h2",p({},{id:"tips--tricks--\u6280\u5de7\u548c\u8bc0\u7a8d"}),"Tips & Tricks | \u6280\u5de7\u548c\u8bc0\u7a8d"),(0,l.kt)("h3",p({},{id:"record-types-are-found-by-field-name--\u8bb0\u5f55\u7c7b\u578b\u53ef\u4ee5\u901a\u8fc7\u5b57\u6bb5\u7684\u540d\u5b57\u627e\u5230"}),"Record Types Are Found By Field Name | \u8bb0\u5f55\u7c7b\u578b\u53ef\u4ee5\u901a\u8fc7\u5b57\u6bb5\u7684\u540d\u5b57\u627e\u5230"),(0,l.kt)("p",null,"With records, you ",(0,l.kt)("strong",{parentName:"p"},"cannot")," say \"I'd like this function to take any record type, as long as they have the field ",(0,l.kt)("inlineCode",{parentName:"p"},"age"),'". The following ',(0,l.kt)("strong",{parentName:"p"},"won't work as intended"),":"),(0,l.kt)("p",null,"\u5bf9\u4e8e\u8bb0\u5f55, \u4f60",(0,l.kt)("strong",{parentName:"p"},"\u4e0d\u80fd"),'\u8bf4 "\u6211\u5e0c\u671b\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u4efb\u4f55\u8bb0\u5f55\u7c7b\u578b, \u53ea\u8981\u5b83\u4eec\u6709`\u5e74\u9f84\'\u8fd9\u4e2a\u5b57\u6bb5". \u4e0b\u9762\u7684',(0,l.kt)("strong",{parentName:"p"},"\u4e0d\u4f1a\u6309\u9884\u671f\u5de5\u4f5c"),". "),(0,l.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-res"}),"type person = {age: int, name: string}\ntype monster = {age: int, hasTentacles: bool}\n\nlet getAge = (entity) => entity.age\n")),(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-js"}),"function getAge(entity) {\n  return entity.age;\n}\n"))),(0,l.kt)("p",null,"Instead, ",(0,l.kt)("inlineCode",{parentName:"p"},"getAge")," will infer that the parameter ",(0,l.kt)("inlineCode",{parentName:"p"},"entity")," must be of type ",(0,l.kt)("inlineCode",{parentName:"p"},"monster"),", the closest record type with the field ",(0,l.kt)("inlineCode",{parentName:"p"},"age"),". The following code's last line fails:"),(0,l.kt)("p",null,"\u76f8\u53cd, ",(0,l.kt)("inlineCode",{parentName:"p"},"getAge"),"\u5c06\u63a8\u65ad\u53c2\u6570",(0,l.kt)("inlineCode",{parentName:"p"},"entity"),"\u5fc5\u987b\u662f",(0,l.kt)("inlineCode",{parentName:"p"},"monster"),"\u7c7b\u578b, \u8fd9\u662f\u4e0e\u5b57\u6bb5",(0,l.kt)("inlineCode",{parentName:"p"},"age"),"\u6700\u63a5\u8fd1\u7684\u8bb0\u5f55\u7c7b\u578b. \u4e0b\u9762\u4ee3\u7801\u7684\u6700\u540e\u4e00\u884c\u4f1a\u62a5\u9519:"),(0,l.kt)("pre",null,(0,l.kt)("code",p({parentName:"pre"},{className:"language-res"}),'let kraken = {age: 9999, hasTentacles: true}\nlet me = {age: 5, name: "Baby ReScript"}\n\ngetAge(kraken)\ngetAge(me) // type error!\n')),(0,l.kt)("p",null,"The type system will complain that ",(0,l.kt)("inlineCode",{parentName:"p"},"me")," is a ",(0,l.kt)("inlineCode",{parentName:"p"},"person"),", and that ",(0,l.kt)("inlineCode",{parentName:"p"},"getAge")," only works on ",(0,l.kt)("inlineCode",{parentName:"p"},"monster"),". If you need such capability, use ReScript objects, described ",(0,l.kt)("a",p({parentName:"p"},{href:"object.md"}),"here"),"."),(0,l.kt)("p",null,"\u7c7b\u578b\u7cfb\u7edf\u4f1a\u62b1\u6028",(0,l.kt)("inlineCode",{parentName:"p"},"me"),"\u662f\u4e00\u4e2a",(0,l.kt)("inlineCode",{parentName:"p"},"person"),"\u7c7b\u578b, \u800c\u4e14",(0,l.kt)("inlineCode",{parentName:"p"},"getAge"),"\u53ea\u5bf9",(0,l.kt)("inlineCode",{parentName:"p"},"monster"),"\u6709\u6548. \u5982\u679c\u4f60\u9700\u8981\u8fd9\u6837\u7684\u80fd\u529b, \u8bf7\u4f7f\u7528ReScript\u4e2d\u7684",(0,l.kt)("a",p({parentName:"p"},{href:"object.md"}),"\u5bf9\u8c61"),"\u63cf\u8ff0."),(0,l.kt)("h3",p({},{id:"optional-fields-in-records-can-be-useful-for-bindings--rescript\u4e2d\u7684\u53ef\u9009\u5b57\u6bb5\u5728\u7ed1\u5b9a\u4e2d\u5f88\u6709\u7528"}),"Optional Fields in Records Can Be Useful for Bindings | ReScript\u4e2d\u7684\u53ef\u9009\u5b57\u6bb5\u5728\u7ed1\u5b9a\u4e2d\u5f88\u6709\u7528"),(0,l.kt)("p",null,"Many JavaScript APIs tend to have large configuration objects that can be a bit annoying to model as records, since you previously always needed to specify all record fields when creating a record. "),(0,l.kt)("p",null,"\u5f88\u591aJavaScript API\u5f80\u5f80\u6709\u5e9e\u5927\u7684\u5bf9\u8c61\u7528\u4e8e\u914d\u7f6e, \u8fd9\u4e9b\u5bf9\u8c61\u5982\u679c\u7528\u8bb0\u5f55\u7684\u6765\u6a21\u62df\u53ef\u80fd\u6709\u70b9\u4ee4\u4eba\u8ba8\u538c, \u56e0\u4e3a\u4f60\u4ee5\u524d\u603b\u662f\u9700\u8981\u5728\u521b\u5efa\u8bb0\u5f55\u65f6\u6307\u5b9a\u6240\u6709\u8bb0\u5f55\u5b57\u6bb5."),(0,l.kt)("p",null,"Optional record fields, introduced in ",(0,l.kt)("a",p({parentName:"p"},{href:"/blog/release-10-0-0#experimental-optional-record-fields"}),(0,l.kt)("inlineCode",{parentName:"a"},"v10")),", is intended to help with this. Optional fields will let you avoid having to specify all fields, and let you just specify the one's you care about. A significant improvement in ergonomics for bindings and other APIs with for example large configuration objects."),(0,l.kt)("p",null,"\u5728",(0,l.kt)("a",p({parentName:"p"},{href:"/blog/release-10-0-0#experimental-optional-record-fields"}),(0,l.kt)("inlineCode",{parentName:"a"},"v10")),'\u4e2d\u5f15\u5165\u7684\u591a\u53ef\u9009\u8bb0\u5f55\u5b57\u6bb5\u5c31\u662f\u4e3a\u4e86\u5e2e\u52a9\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898. \u591a\u53ef\u9009\u5b57\u6bb5\u5c06\u4f7f\u4f60\u4e0d\u5fc5\u6307\u5b9a\u6240\u6709\u5b57\u6bb5, \u800c\u53ea\u9700\u6307\u5b9a\u4f60\u6240\u5173\u5fc3\u7684\u5b57\u6bb5. \u5bf9\u4e8e\u7ed1\u5b9a\u548c\u5176\u4ed6\u5177\u6709\u5927\u578b\u914d\u7f6e\u5bf9\u8c61\u7684API\u6765\u8bf4, \u8fd9\u662f\u5bf9"\u4eba\u4f53\u5de5\u7a0b\u5b66"\u7684\u91cd\u5927\u6539\u8fdb.'),(0,l.kt)("h2",p({},{id:"design-decisions--\u8bbe\u8ba1\u51b3\u7b56"}),"Design Decisions | \u8bbe\u8ba1\u51b3\u7b56"),(0,l.kt)("p",null,"After reading the constraints in the previous sections, and if you're coming from a dynamic language background, you might be wondering why one would bother with record in the first place instead of straight using object, since the former needs explicit typing and doesn't allow different records with the same field name to be passed to the same function, etc."),(0,l.kt)("p",null,"\u5728\u9605\u8bfb\u4e86\u524d\u9762\u51e0\u8282\u7684\u7ea6\u675f\u6761\u4ef6\u540e, \u5982\u679c\u4f60\u662f\u52a8\u6001\u8bed\u8a00\u80cc\u666f\u7684\u4eba\u4f60\u53ef\u80fd\u4f1a\u60f3, \u4e3a\u4ec0\u4e48\u9996\u5148\u8981\u7528\u8bb0\u5f55\u800c\u4e0d\u662f\u76f4\u63a5\u7528object? \u56e0\u4e3a\u8bb0\u5f55\u9700\u8981\u660e\u786e\u7684\u7c7b\u578b\u5316, \u800c\u4e14\u4e0d\u5141\u8bb8\u5c06\u5177\u6709\u76f8\u540c\u5b57\u6bb5\u540d\u7684\u4e0d\u540c\u8bb0\u5f55\u4f20\u9012\u7ed9\u540c\u4e00\u4e2a\u51fd\u6570, \u7b49\u7b49. "),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"The truth is that most of the times in your app, your data's shape is actually fixed, and if it's not, it can potentially be better represented as a combination of variant (introduced next) + record instead.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},'Since a record type is resolved through finding that single explicit type declaration (we call this "nominal typing"), the type error messages end up better than the counterpart ("structural typing", like for tuples). This makes refactoring easier; changing a record type\'s fields naturally allows the compiler to know that it\'s still the same record, just misused in some places. Otherwise, under structural typing, it might get hard to tell whether the definition site or the usage site is wrong.')),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"\u5b9e\u9645\u60c5\u51b5\u662f, \u5728\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d, \u5927\u591a\u6570\u65f6\u5019\u4f60\u7684\u6570\u636e\u7684\u5f62\u72b6\u5b9e\u9645\u4e0a\u662f\u56fa\u5b9a\u7684, \u5982\u679c\u4e0d\u662f, \u5b83\u6709\u53ef\u80fd\u66f4\u597d\u5730\u8868\u793a\u4e3a\u53d8\u4f53(\u63a5\u4e0b\u6765\u5c06\u4ecb\u7ecd)+\u8bb0\u5f55\u7684\u7ec4\u5408. ")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},'\u7531\u4e8e\u8bb0\u5f55\u7c7b\u578b\u662f\u901a\u8fc7\u627e\u5230\u90a3\u4e2a\u5355\u4e00\u7684\u663e\u5f0f\u7c7b\u578b\u58f0\u660e\u6765\u89e3\u51b3\u7684(\u6211\u4eec\u79f0\u4e4b\u4e3a "\u540d\u4e49\u7c7b\u578b(nominal typing)"), \u7c7b\u578b\u9519\u8bef\u4fe1\u606f\u6700\u7ec8\u4f1a\u6bd4\u5bf9\u5e94\u7684\u7c7b\u578b("\u7ed3\u6784\u5316\u7c7b\u578b(structural typing)", \u5982\u5143\u7ec4)\u66f4\u597d. \u8fd9\u4f7f\u5f97\u91cd\u6784\u66f4\u5bb9\u6613; \u6539\u53d8\u4e00\u4e2a\u8bb0\u5f55\u7c7b\u578b\u7684\u5b57\u6bb5\u81ea\u7136\u5141\u8bb8\u7f16\u8bd1\u5668\u786e\u8ba4\u5b83\u4ecd\u7136\u548c\u4e4b\u524d\u662f\u540c\u4e00\u4e2a\u8bb0\u5f55, \u53ea\u662f\u5728\u67d0\u4e9b\u5730\u65b9\u88ab\u8bef\u7528. \u5426\u5219, \u5728\u7ed3\u6784\u5316\u7c7b\u578b\u4e0b, \u53ef\u80fd\u4f1a\u53d8\u5f97\u5f88\u96be\u533a\u5206\u662f\u5b9a\u4e49\u7684\u5730\u65b9\u8fd8\u662f\u4f7f\u7528\u7684\u5730\u65b9\u51fa\u4e86\u95ee\u9898.'))))}c.isMDXComponent=!0,c.frontmatter={title:"\u8bb0\u5f55",description:"Record types in ReScript",canonical:"/docs/manual/latest/record",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs-cn/manual/latest/record.mdx"}},79231:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs-cn/manual/latest/record",function(){return n(40917)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=79231,e(e.s=t);var t}));var t=e.O();_N_E=t}]);