(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[34547],{17375:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return a}})},90023:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return u}});var a=n(17375),r=n(96156),i=(n(67294),n(3905));function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var p,s=(p="CodeTab",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",o({},e))}),m={};function u(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",o(o(o({},m),n),{},{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",o({},{id:"variant--\u53d8\u4f53"}),"Variant | \u53d8\u4f53"),(0,i.kt)("p",null,"So far, most of ReScript's data structures might look familiar to you. This section introduces an extremely important, and perhaps unfamiliar, data structure: variant."),(0,i.kt)("p",null,"\u5230\u76ee\u524d\u4e3a\u6b62, ReScript\u7684\u5927\u591a\u6570\u6570\u636e\u7ed3\u6784\u5bf9\u4f60\u6765\u8bf4\u53ef\u80fd\u5df2\u7ecf\u5f88\u719f\u6089\u4e86.  \u672c\u8282\u4ecb\u7ecd\u4e86\u4e00\u4e2a\u6781\u5176\u91cd\u8981\u7684, \u4e5f\u8bb8\u662f\u4f60\u4e4b\u524d\u4e0d\u719f\u6089\u7684\u6570\u636e\u7ed3\u6784: \u53d8\u4f53."),(0,i.kt)("p",null,'Most data structures in most languages are about "this ',(0,i.kt)("strong",{parentName:"p"},"and"),' that". A variant allows us to express "this ',(0,i.kt)("strong",{parentName:"p"},"or"),' that".'),(0,i.kt)("p",null,'\u5927\u90e8\u5206\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u6570\u636e\u7ed3\u6784\u90fd\u662f\u4ee5"\u8fd9\u6837',(0,i.kt)("strong",{parentName:"p"},"\u4e14"),'\u90a3\u6837". \u53d8\u4f53\u7684\u5b58\u5728\u8ba9\u6211\u4eec\u8868\u8fbe"\u8fd9\u6837',(0,i.kt)("strong",{parentName:"p"},"\u6216"),'\u90a3\u6837".'),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"type myResponse =\n  | Yes\n  | No\n  | PrettyMuch\n\nlet areYouCrushingIt = Yes\n")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"var areYouCrushingIt = /* Yes */0;\n"))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"myResponse")," is a variant type with the cases ",(0,i.kt)("inlineCode",{parentName:"p"},"Yes"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"No")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"PrettyMuch"),', which are called "variant constructors" (or "variant tag"). The ',(0,i.kt)("inlineCode",{parentName:"p"},"|")," bar separates each constructor."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"myResponse"),"\u662f\u4e00\u4e2a\u53d8\u4f53\u7c7b\u578b, \u6709",(0,i.kt)("inlineCode",{parentName:"p"},"Yes"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"No"),"\u548c",(0,i.kt)("inlineCode",{parentName:"p"},"PrettyMutch"),'\u4e09\u4e2a\u5206\u652f, \u88ab\u79f0\u4e4b\u4e3a"\u53d8\u4f53\u6784\u9020\u5668"(\u6216\u8005\u53eb\u505a"\u53d8\u4f53\u6807\u7b7e"), \u901a\u8fc7\u7ad6\u7ebf',(0,i.kt)("inlineCode",{parentName:"p"},"|"),"\u5206\u5272\u6bcf\u4e2a\u6784\u9020\u5668."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),": a variant's constructors need to be capitalized."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6ce8\u610f"),": \u4e00\u4e2a\u53d8\u4f53\u7684\u6784\u9020\u5668\u7684\u9996\u5b57\u6bcd\u5fc5\u987b\u5927\u5199."),(0,i.kt)("h2",o({},{id:"variant-needs-an-explicit-definition--\u53d8\u4f53\u9700\u8981\u663e\u5f0f\u5b9a\u4e49"}),"Variant Needs an Explicit Definition | \u53d8\u4f53\u9700\u8981\u663e\u5f0f\u5b9a\u4e49"),(0,i.kt)("p",null,"If the variant you're using is in a different file, bring it into scope like you'd do ",(0,i.kt)("a",o({parentName:"p"},{href:"record.md#record-needs-an-explicit-definition"}),"for a record"),":"),(0,i.kt)("p",null,"\u5982\u679c\u4f60\u4f7f\u7528\u7684\u53d8\u4f53\u7c7b\u578b\u5728\u4e0d\u540c\u7684\u6587\u4ef6\u4e2d, \u9700\u8981\u5c06\u5176\u5f15\u5165\u5230\u4f60\u5f53\u524d\u7684\u4f5c\u7528\u57df, \u5c31\u50cf\u4f60\u5f53\u65f6\u5728\u4f7f\u7528","[\u8bb0\u5f55\u7c7b\u578b]","\u505a\u7684\u4e00\u6837(record.md#record-needs-an-explicit-definition):"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"// Zoo.res\ntype animal = Dog | Cat | Bird\n")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"// Empty output\n"))),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res"}),"// Example.res\nlet pet: Zoo.animal = Dog // preferred\n// or\nlet pet2 = Zoo.Dog\n")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"var pet = /* Dog */0;\nvar pet2 = /* Dog */0;\n"))),(0,i.kt)("h2",o({},{id:"constructor-arguments--\u6784\u9020\u5668\u53c2\u6570"}),"Constructor Arguments | \u6784\u9020\u5668\u53c2\u6570"),(0,i.kt)("p",null,"A variant's constructors can hold extra data separated by comma."),(0,i.kt)("p",null,"\u53d8\u4f53\u6784\u9020\u5668\u53ef\u4ee5\u63a5\u53d7\u989d\u5916\u7684\u7684\u53c2\u6570, \u8fd9\u4e9b\u53c2\u6570\u7684\u7c7b\u578b\u901a\u8fc7\u9017\u53f7\u5206\u5272."),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"prelude",prelude:!0}),"type account =\n  | None\n  | Instagram(string)\n  | Facebook(string, int)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"// Empty output\n"))),(0,i.kt)("p",null,"Here, ",(0,i.kt)("inlineCode",{parentName:"p"},"Instagram")," holds a ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Facebook")," holds a ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," and an ",(0,i.kt)("inlineCode",{parentName:"p"},"int"),". Usage:"),(0,i.kt)("p",null,"\u8fd9\u91cc",(0,i.kt)("inlineCode",{parentName:"p"},"Instagram"),"\u53d8\u4f53\u5305\u542b\u4e00\u4e2a",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"\u7c7b\u578b, ",(0,i.kt)("inlineCode",{parentName:"p"},"Facebook"),"\u53d8\u4f53\u5305\u542b",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"\u548c",(0,i.kt)("inlineCode",{parentName:"p"},"int"),". \u6bd4\u5982\u8bf4: "),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'let myAccount = Facebook("Josh", 26)\nlet friendAccount = Instagram("Jenny")\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'var myAccount = {\n  TAG: /* Facebook */1,\n  _0: "Josh",\n  _1: 26\n};\nvar friendAccount = {\n  TAG: /* Instagram */0,\n  _0: "Jenny"\n};\n'))),(0,i.kt)("h3",o({},{id:"labeled-variant-payloads-inline-record--\u6807\u8bb0\u7684\u53d8\u4f53\u6210\u5458-\u5185\u8054\u8bb0\u5f55"}),"Labeled Variant Payloads (Inline Record) | \u6807\u8bb0\u7684\u53d8\u4f53\u6210\u5458 (\u5185\u8054\u8bb0\u5f55)"),(0,i.kt)("p",null,"If a variant payload has multiple fields, you can use a record-like syntax to label them for better readability:"),(0,i.kt)("p",null,"\u4e00\u4e2a\u53d8\u4f53\u7684\u6210\u5458\u5305\u542b\u591a\u4e2a\u5b57\u6bb5, \u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u7c7b\u578b\u8bb0\u5f55\u7684\u8bed\u6cd5\u6807\u8bb0\u5b83\u4eec\u4ee5\u63d0\u5347\u53ef\u8bfb\u6027:"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'type user =\n  | Number(int)\n  | Id({name: string, password: string})\n\nlet me = Id({name: "Joe", password: "123"})\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'var me = {\n  TAG: /* Id */1,\n  name: "Joe",\n  password: "123"\n};\n'))),(0,i.kt)("p",null,'This is technically called an "inline record", and only allowed within a variant constructor. You cannot inline a record type declaration anywhere else in ReScript.'),(0,i.kt)("p",null,'\u8fd9\u5728\u6280\u672f\u4e0a\u88ab\u79f0\u4e3a "\u5185\u8054\u8bb0\u5f55", \u5e76\u4e14\u53ea\u5141\u8bb8\u5728\u53d8\u4f53\u6784\u9020\u51fd\u6570\u4e2d\u4f7f\u7528, \u4f60\u4e0d\u80fd\u5728ReScript\u7684\u5176\u4ed6\u5730\u65b9\u5185\u8054\u4e00\u4e2a\u8bb0\u5f55\u7c7b\u578b\u58f0\u660e.'),(0,i.kt)("p",null,"Of course, you can just put a regular record type in a variant too:"),(0,i.kt)("p",null,"\u5f53\u7136, \u4f60\u4e5f\u53ef\u4ee5\u628a\u4e00\u4e2a\u8bb0\u5f55\u7c7b\u578b\u4f5c\u4e3a\u53d8\u4f53\u7684\u53c2\u6570."),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'type u = {name: string, password: string}\ntype user =\n  | Number(int)\n  | Id(u)\n\nlet me = Id({name: "Joe", password: "123"})\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'var me = {\n  TAG: /* Id */1,\n  _0: {\n    name: "Joe",\n    password: "123"\n  }\n};\n'))),(0,i.kt)("p",null,"The output is slightly uglier and less performant than the former."),(0,i.kt)("p",null,'\u8f93\u51fa\u7684JS\u4ee3\u7801\u6bd4\u4e4b\u524d\u8981\u7a0d\u5fae"\u96be\u770b\u4e00\u4e9b", \u5e76\u4e14\u6027\u80fd\u4e5f\u4e0d\u5982\u4e4b\u524d\u7684.'),(0,i.kt)("h3",o({},{id:"pattern-matching-on-variant"}),"Pattern Matching On Variant"),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",o({parentName:"p"},{href:"pattern-matching-destructuring"}),"Pattern Matching/Destructuring")," section later."),(0,i.kt)("p",null,"\u8bf7\u770b\u540e\u9762\u63d0\u5230\u7684",(0,i.kt)("a",o({parentName:"p"},{href:"pattern-matching-destructuring"}),"\u6a21\u5f0f\u5339\u914d/\u89e3\u6784"),"\u7ae0\u8282."),(0,i.kt)("h2",o({},{id:"javascript-output"}),"JavaScript Output"),(0,i.kt)("p",null,"A variant value compiles to 3 possible JavaScript outputs depending on its type declaration:"),(0,i.kt)("p",null,"\u53d8\u4f53\u503c\u53ef\u80fd\u4f1a\u7f16\u8bd1\u4e3a\u4e09\u7c7b\u4e0d\u540c\u7684\u8f93\u51fa, \u53d6\u51b3\u4e8e\u5176\u7c7b\u578b\u58f0\u660e:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If the variant value is a constructor with no payload, it compiles to a number.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If it's a constructor with a payload, it compiles to an object with the field ",(0,i.kt)("inlineCode",{parentName:"p"},"TAG")," and the field ",(0,i.kt)("inlineCode",{parentName:"p"},"_0")," for the first payload, ",(0,i.kt)("inlineCode",{parentName:"p"},"_1")," for the second payload, etc.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"An exception to the above is a variant whose type declaration contains only a single constructor with payload. In that case, the constructor compiles to an object without the ",(0,i.kt)("inlineCode",{parentName:"p"},"TAG")," field.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Labeled variant payloads (the inline record trick earlier) compile to an object with the label names instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"_0"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"_1"),", etc. The object might or might not have the ",(0,i.kt)("inlineCode",{parentName:"p"},"TAG")," field as per previous rule.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u4e00\u4e2a\u53d8\u4f53\u503c\u662f\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55\u88c5\u8f7d\u7684\u6784\u9020\u5668, \u90a3\u4e48\u5176\u4f1a\u88ab\u7f16\u8bd1\u6210\u4e00\u4e2a\u6570\u5b57.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u5982\u679c\u4e00\u4e2a\u6784\u9020\u5668\u88c5\u8f7d\u503c, \u5176\u4f1a\u88ab\u7f16\u8bd1\u6210\u4e00\u4e2a\u6709",(0,i.kt)("inlineCode",{parentName:"p"},"TAG"),"\u5b57\u6bb5\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"TAG"),", \u5b57\u6bb5",(0,i.kt)("inlineCode",{parentName:"p"},"_0"),"\u4fdd\u5b58\u7b2c\u4e00\u4e2a\u88c5\u8f7d\u503c, \u5b57\u6bb5",(0,i.kt)("inlineCode",{parentName:"p"},"_1"),"\u4fdd\u5b58\u7b2c\u4e8c\u4e2a\u88c5\u8f7d\u503c, \u8bf8\u5982\u6b64\u7c7b.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u4e0a\u8ff0\u60c5\u51b5\u7684\u4e00\u4e2a\u4f8b\u5916\u662f\u4e00\u4e2a\u7c7b\u578b\u58f0\u660e\u53ea\u5305\u542b\u4e00\u4e2a\u5e26\u6709\u6548\u88c5\u8f7d\u503c\u7684\u6784\u9020\u51fd\u6570\u53d8\u4f53, \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6784\u9020\u51fd\u6570\u4f1a\u7f16\u8bd1\u6210\u4e00\u4e2a\u6ca1\u6709",(0,i.kt)("inlineCode",{parentName:"p"},"TAG"),"\u5b57\u6bb5\u7684\u5bf9\u8c61.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u6709\u6807\u7b7e\u7684\u53d8\u4f53\u6709\u6548\u8f7d\u8377(\u524d\u9762\u7684\u5185\u8054\u8bb0\u5f55\u7684\u6280\u5de7)\u4f1a\u7f16\u8bd1\u6210\u4e00\u4e2a\u6709\u6807\u7b7e\u540d\u79f0\u7684\u5bf9\u8c61, \u800c\u4e0d\u662f",(0,i.kt)("inlineCode",{parentName:"p"},"_0"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"_1"),", \u7b49\u7b49. \u548c\u4e4b\u524d\u7684\u89c4\u5219\u4e00\u6837, \u8be5\u5bf9\u8c61\u53ef\u80fd\u6709\u4e5f\u53ef\u80fd\u6ca1\u6709",(0,i.kt)("inlineCode",{parentName:"p"},"TAG"),"\u5b57\u6bb5."))),(0,i.kt)("p",null,"Check the output in these examples:"),(0,i.kt)("p",null,"\u68c0\u67e5\u8fd9\u4e9b\u4f8b\u5b50\u7684JS\u7f16\u8bd1\u7ed3\u679c:"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'type greeting = Hello | Goodbye\nlet g1 = Hello\nlet g2 = Goodbye\n\ntype outcome = Good | Error(string)\nlet o1 = Good\nlet o2 = Error("oops!")\n\ntype family = Child | Mom(int, string) | Dad (int)\nlet f1 = Child\nlet f2 = Mom(30, "Jane")\nlet f3 = Dad(32)\n\ntype person = Teacher | Student({gpa: float})\nlet p1 = Teacher\nlet p2 = Student({gpa: 99.5})\n\ntype s = {score: float}\ntype adventurer = Warrior(s) | Wizard(string)\nlet a1 = Warrior({score: 10.5})\nlet a2 = Wizard("Joe")\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'var g1 = /* Hello */0;\nvar g2 = /* Goodbye */1;\n\nvar o1 = /* Good */0;\nvar o2 = /* Error */{\n  _0: "oops!"\n};\n\nvar f1 = /* Child */0;\nvar f2 = {\n  TAG: /* Mom */0,\n  _0: 30,\n  _1: "Jane"\n};\nvar f3 = {\n  TAG: /* Dad */1,\n  _0: 32\n};\n\nvar p1 = /* Teacher */0;\nvar p2 = /* Student */{\n  gpa: 99.5\n};\n\nvar a1 = {\n  TAG: /* Warrior */0,\n  _0: {\n    score: 10.5\n  }\n};\nvar a2 = {\n  TAG: /* Wizard */1,\n  _0: "Joe"\n};\n'))),(0,i.kt)("h2",o({},{id:"tips--tricks--\u6280\u5de7--\u8bc0\u7a8d"}),"Tips & Tricks | \u6280\u5de7 & \u8bc0\u7a8d"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Be careful")," not to confuse a constructor carrying 2 arguments with a constructor carrying a single tuple argument:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u8bf7\u5c0f\u5fc3")," \u4e0d\u8981\u641e\u6df7\u4e86\u4e24\u4e2a\u53c2\u6570\u7684\u6784\u9020\u5668\u548c\u4ee5\u5355\u4e2a\u5143\u7ec4\u4f5c\u4e3a\u53c2\u6570\u7684\u6784\u9020\u5668:"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),"type account =\n  | Facebook(string, int) // 2 arguments\ntype account2 =\n  | Instagram((string, int)) // 1 argument - happens to be a 2-tuple\n")),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"// Empty output\n"))),(0,i.kt)("h3",o({},{id:"variants-must-have-constructors--\u53d8\u4f53\u5fc5\u987b\u8981\u6709\u6784\u9020\u5668"}),"Variants Must Have Constructors | \u53d8\u4f53\u5fc5\u987b\u8981\u6709\u6784\u9020\u5668"),(0,i.kt)("p",null,"If you come from an untyped language, you might be tempted to try ",(0,i.kt)("inlineCode",{parentName:"p"},"type myType = int | string"),". This isn't possible in ReScript; you'd have to give each branch a constructor: ",(0,i.kt)("inlineCode",{parentName:"p"},"type myType = Int(int) | String(string)"),". The former looks nice, but causes lots of trouble down the line."),(0,i.kt)("p",null,"\u5982\u679c\u4f60\u7ecf\u5e38\u4f7f\u7528\u65e0\u7c7b\u578b\u8bed\u8a00, \u4f60\u53ef\u80fd\u4f1a\u5c1d\u8bd5\u5199\u51fa\u8fd9\u6837\u7684\u5b9a\u4e49",(0,i.kt)("inlineCode",{parentName:"p"},"type myType = int | string"),". \u8fd9\u5728ReScript\u4e2d\u662f\u4e0d\u53ef\u80fd\u7684; \u4f60\u4e0d\u5f97\u4e0d\u4e3a\u6bcf\u4e00\u4e2a\u5206\u652f\u52a0\u4e0a\u4e00\u4e2a\u6784\u9020\u5668: ",(0,i.kt)("inlineCode",{parentName:"p"},"type myType = Int(int) | String(string)"),". \u524d\u4e00\u4e2a\u521d\u770b\u8d77\u6765\u4e0d\u9519, \u4f46\u540e\u60a3\u65e0\u7a77."),(0,i.kt)("h3",o({},{id:"interop-with-javascript--\u4e0ejavascript\u4e92\u64cd\u4f5c"}),"Interop with JavaScript | \u4e0eJavaScript\u4e92\u64cd\u4f5c"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"This section assumes knowledge about our JavaScript interop. Skip this if you haven't felt the itch to use variants for wrapping JS functions yet"),"."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"\u8fd9\u4e00\u7ae0\u5047\u8bbe\u4f60\u77e5\u9053\u4e86\u6211\u4eec\u7684JavaScript\u4e92\u64cd\u4f5c\u673a\u5236. \u8df3\u8fc7\u8fd9\u4e00\u7ae0\u5982\u679c\u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u611f\u89c9\u5230\u4f7f\u7528\u53d8\u4f53\u6765\u5305\u88c5JS\u51fd\u6570\u7684\u75db\u70b9, \u8bf7\u8df3\u8fc7\u8fd9\u90e8\u5206")),(0,i.kt)("p",null,"Quite a few JS libraries use functions that can accept many types of arguments. In these cases, it's very tempting to model them as variants. For example, suppose there's a ",(0,i.kt)("inlineCode",{parentName:"p"},"myLibrary.draw")," JS function that takes in either a ",(0,i.kt)("inlineCode",{parentName:"p"},"number")," or a ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),". You might be tempted to bind it like so:"),(0,i.kt)("p",null,"\u76f8\u5f53\u591a\u7684JS\u5e93\u4f7f\u7528\u53ef\u4ee5\u63a5\u53d7\u591a\u79cd\u7c7b\u578b\u53c2\u6570\u7684\u51fd\u6570, \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u5c06\u5b83\u4eec\u5efa\u6a21\u4e3a\u53d8\u4f53\u662f\u975e\u5e38\u8bf1\u4eba\u7684. \u4f8b\u5982, \u5047\u8bbe\u6709\u4e00\u4e2a",(0,i.kt)("inlineCode",{parentName:"p"},"myLibrary.draw"),"JS\u51fd\u6570, \u53ef\u4ee5\u63a5\u53d7",(0,i.kt)("inlineCode",{parentName:"p"},"\u6570\u5b57"),"\u6216",(0,i.kt)("inlineCode",{parentName:"p"},"\u5b57\u7b26\u4e32"),", \u4f60\u53ef\u80fd\u4f1a\u5c1d\u8bd5\u8fd9\u6837\u6765\u7ed1\u5b9a\u5b83:"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'// reserved for internal usage\n@module("myLibrary") external draw : \'a => unit = "draw"\n\ntype animal =\n  | MyFloat(float)\n  | MyString(string)\n\nlet betterDraw = (animal) =>\n  switch animal {\n  | MyFloat(f) => draw(f)\n  | MyString(s) => draw(s)\n  }\n\nbetterDraw(MyFloat(1.5))\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'var MyLibrary = require("myLibrary");\n\nfunction betterDraw(animal) {\n  MyLibrary.draw(animal._0);\n}\n\nbetterDraw({\n  TAG: /* MyFloat */0,\n  _0: 1.5\n});\n'))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Try not to do that"),", as this generates extra noisy output. Alternatively, define two ",(0,i.kt)("inlineCode",{parentName:"p"},"external"),"s that both compile to the same JS call:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u5c3d\u91cf\u4e0d\u8981\u8fd9\u6837\u505a"),", \u56e0\u4e3a\u8fd9\u6837\u4f1a\u4ea7\u751f\u989d\u5916\u7684\u566a\u97f3\u8f93\u51fa. \u6216\u8005\u5b9a\u4e49\u4e24\u4e2a",(0,i.kt)("inlineCode",{parentName:"p"},"external"),"\u90fd\u7f16\u8bd1\u4e3a\u76f8\u540c\u7684JS\u8c03\u7528."),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'@module("myLibrary") external drawFloat: float => unit = "draw"\n@module("myLibrary") external drawString: string => unit = "draw"\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"// Empty output\n"))),(0,i.kt)("p",null,"ReScript also provides ",(0,i.kt)("a",o({parentName:"p"},{href:"bind-to-js-function.md#modeling-polymorphic-function"}),"a few other ways")," to do this."),(0,i.kt)("p",null,"ReScript\u4e5f\u63d0\u4f9b\u4e86",(0,i.kt)("a",o({parentName:"p"},{href:"bind-to-js-function.md#modeling-polymorphic-function"}),"\u4e00\u4e9b\u5176\u4ed6\u65b9\u5f0f"),"\u505a\u8fd9\u4ef6\u4e8b."),(0,i.kt)("h3",o({},{id:"variant-types-are-found-by-field-name--\u53d8\u4f53\u7c7b\u578b\u662f\u901a\u8fc7\u5b57\u6bb5\u540d\u627e\u5230\u7684"}),"Variant Types Are Found By Field Name | \u53d8\u4f53\u7c7b\u578b\u662f\u901a\u8fc7\u5b57\u6bb5\u540d\u627e\u5230\u7684"),(0,i.kt)("p",null,"Please refer to this ",(0,i.kt)("a",o({parentName:"p"},{href:"record#tips--tricks"}),"record section"),". Variants are the same: a function can't accept an arbitrary constructor shared by two different variants. Again, such feature exists; it's called a polymorphic variant. We'll talk about this in the future =)."),(0,i.kt)("p",null,"\u8bf7\u770b",(0,i.kt)("a",o({parentName:"p"},{href:"record#tips--tricks"}),"\u8bb0\u5f55\u7c7b\u578b\u7684\u8fd9\u4e00\u8282"),". \u53d8\u4f53\u4e5f\u662f\u4e00\u6837\u7684: \u4e00\u4e2a\u51fd\u6570\u4e0d\u80fd\u968f\u610f\u7684\u63a5\u53d7\u4e0d\u540c\u53d8\u4f53\u7684\u6784\u9020\u5668. \u518d\u4e00\u6b21\u58f0\u660e, \u8fd9\u6837\u7684\u7279\u6027\u662f\u5b58\u5728\u7684, \u6211\u4eec\u4f1a\u5728\u672a\u6765\u7ee7\u7eed\u63d0\u5230\u8fd9\u4e2a\u7279\u6027."),(0,i.kt)("h2",o({},{id:"design-decisions--\u8bbe\u8ba1\u51b3\u7b56"}),"Design Decisions | \u8bbe\u8ba1\u51b3\u7b56"),(0,i.kt)("p",null,"Variants, in their many forms (polymorphic variant, open variant, GADT, etc.), are likely ",(0,i.kt)("em",{parentName:"p"},"the")," feature of a type system such as ReScript's. The aforementioned ",(0,i.kt)("inlineCode",{parentName:"p"},"option")," variant, for example, obliterates the need for nullable types, a major source of bugs in other languages. Philosophically speaking, a problem is composed of many possible branches/conditions. Mishandling these conditions is the majority of what we call bugs. ",(0,i.kt)("strong",{parentName:"p"},"A type system doesn't magically eliminate bugs; it points out the unhandled conditions and asks you to cover them"),"*",'. The ability to model "this or that" correctly is crucial.'),(0,i.kt)("p",null,"\u53d8\u4f53\u7ecf\u5e38\u4ee5\u5f88\u591a\u79cd\u5f62\u5f0f\u51fa\u73b0(\u591a\u6001\u53d8\u4f53, \u5c55\u5f00\u53d8\u4f53, \u901a\u7528\u4ee3\u6570\u6570\u636e\u7c7b\u578b\u7b49), \u53ef\u80fd\u662f\u50cfReScript\u8fd9\u6837\u7684\u7c7b\u578b\u7cfb\u7edf\u7684\u6700\u5173\u952e\u7684\u7279\u5f81. \u5927\u54e5\u6bd4\u65b9, \u5148\u524d\u63d0\u5230\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"option"),"\u53d8\u4f53, \u5b8c\u5168\u6d88\u9664\u4e86nullable\u7c7b\u578b\u9700\u8981, \u8fd9\u662f\u5f88\u591a\u5176\u4ed6\u8bed\u8a00bug\u7684\u6765\u6e90. \u4ece\u54f2\u5b66\u7684\u89d2\u5ea6\u6765\u8bb2, \u4e00\u4e2a\u95ee\u9898\u662f\u7531\u8bb8\u591a\u53ef\u80fd\u7684\u5206\u652f/\u6761\u4ef6\u7ec4\u6210\u7684. \u5927\u90e8\u5206\u60c5\u51b5\u4e0b, \u5bf9\u8fd9\u4e9b\u6761\u4ef6\u7684\u5904\u7406\u7684\u7f3a\u5931\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684bug. ",(0,i.kt)("strong",{parentName:"p"},"\u7c7b\u578b\u7cfb\u7edf\u5e76\u4e0d\u80fd\u795e\u5947\u5730\u6d88\u9664bug; \u5b83\u6307\u51fa\u4e86\u672a\u5904\u7406\u7684\u6761\u4ef6\u5e76\u8981\u6c42\u4f60\u8986\u76d6\u5b83\u4eec"),'. \u6b63\u786e\u5efa\u6a21"\u8fd9\u4e2a\u6216\u90a3\u4e2a"\u7684\u80fd\u529b\u662f\u81f3\u5173\u91cd\u8981\u7684.'),(0,i.kt)("p",null,"For example, some folks wonder how the type system can safely eliminate badly formatted JSON data from propagating into their program. They don't, not by themselves! But if the parser returns the ",(0,i.kt)("inlineCode",{parentName:"p"},"option")," type ",(0,i.kt)("inlineCode",{parentName:"p"},"None | Some(actualData)"),", then you'd have to handle the ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," case explicitly in later call sites. That's all there is."),(0,i.kt)("p",null,"\u6bd4\u5982\u8bf4, \u6709\u4e9b\u4eba\u60f3\u77e5\u9053\u7c7b\u578b\u7cfb\u7edf\u5982\u4f55\u5b89\u5168\u5730\u6d88\u9664\u683c\u5f0f\u4e0d\u597d\u7684JSON\u6570\u636e\u4f20\u64ad\u5230\u4ed6\u4eec\u7684\u7a0b\u5e8f\u4e2d. \u7c7b\u578b\u7cfb\u7edf\u65e0\u6cd5\u901a\u8fc7\u81ea\u5df1\u505a\u5230. \u4f46\u662f\u5982\u679c\u4e00\u4e2aparser\u8fd4\u56de\u4e86",(0,i.kt)("inlineCode",{parentName:"p"},"option"),"\u7c7b\u578b, ",(0,i.kt)("inlineCode",{parentName:"p"},"None | Some(actualData)"),", \u90a3\u4e48\u4f60\u5c31\u4e0d\u5f97\u4e0d\u5728\u540e\u7eed\u7684\u8c03\u7528\u70b9\u663e\u5f0f\u7684\u5904\u7406",(0,i.kt)("inlineCode",{parentName:"p"},"None"),"\u5206\u652f. \u5c31\u8fd9\u6837."),(0,i.kt)("p",null,"Performance-wise, a variant can potentially tremendously speed up your program's logic. Here's a piece of JavaScript:"),(0,i.kt)("p",null,"\u4ece\u6027\u80fd\u4e0a\u8bb2, \u53d8\u4f53\u53ef\u4ee5\u6f5c\u5728\u5730\u6781\u5927\u5730\u52a0\u5feb\u4f60\u7684\u7a0b\u5e8f\u903b\u8f91. \u8fd9\u91cc\u6709\u4e00\u6bb5JavaScript\u7684\u5185\u5bb9:"),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),"let data = 'dog'\nif (data === 'dog') {\n  ...\n} else if (data === 'cat') {\n  ...\n} else if (data === 'bird') {\n  ...\n}\n")),(0,i.kt)("p",null,"There's a linear amount of branch checking here (",(0,i.kt)("inlineCode",{parentName:"p"},"O(n)"),"). Compare this to using a ReScript variant:"),(0,i.kt)("p",null,"\u8fd9\u91cc\u6709\u4e00\u4e2a\u7ebf\u6027\u590d\u6742\u5ea6\u7684\u5206\u652f\u68c0\u67e5(",(0,i.kt)("inlineCode",{parentName:"p"},"O(n)"),"). \u4e0e\u4f7f\u7528ReScript\u53d8\u4f53\u7684\u6bd4\u8f83:"),(0,i.kt)(s,{labels:["ReScript","JS Output"],mdxType:"CodeTab"},(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-res",metastring:"example",example:!0}),'type animal = Dog | Cat | Bird\nlet data = Dog\nswitch data {\n| Dog => Js.log("Wof")\n| Cat => Js.log("Meow")\n| Bird => Js.log("Kashiiin")\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",o({parentName:"pre"},{className:"language-js"}),'console.log("Wof");\n\nvar data = /* Dog */0;\n'))),(0,i.kt)("p",null,"The compiler sees the variant, then"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"conceptually turns them into ",(0,i.kt)("inlineCode",{parentName:"li"},"type animal = 0 | 1 | 2")),(0,i.kt)("li",{parentName:"ol"},"compiles ",(0,i.kt)("inlineCode",{parentName:"li"},"switch")," to a constant-time jump table (",(0,i.kt)("inlineCode",{parentName:"li"},"O(1)"),").")),(0,i.kt)("p",null,"\u5982\u679c\u7f16\u8bd1\u5668\u770b\u5230\u4e86\u53d8\u4f53, \u7136\u540e:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"\u4ece\u6982\u5ff5\u4e0a\u628a\u5b83\u4eec\u8f6c\u53d8\u4e3a ",(0,i.kt)("inlineCode",{parentName:"li"},"type animal = 0 | 1 | 2")),(0,i.kt)("li",{parentName:"ol"},"\u628a",(0,i.kt)("inlineCode",{parentName:"li"},"switch"),"\u7f16\u8bd1\u6210\u4e00\u4e2a\u62e5\u6709\u5e38\u91cf\u65f6\u95f4\u7684\u8df3\u8f6c\u8868(",(0,i.kt)("inlineCode",{parentName:"li"},"O(1)"),").")))}u.isMDXComponent=!0,u.frontmatter={title:"\u53d8\u4f53",description:"Variant data structures in ReScript",canonical:"/docs/manual/latest/variant",__ghEditHref:"https://github.com/reason-association/rescript-lang.org/blob/master/pages/docs-cn/manual/latest/variant.mdx"}},83090:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs-cn/manual/latest/variant",function(){return n(90023)}])}},function(e){e.O(0,[92888,49774,40179],(function(){return t=83090,e(e.s=t);var t}));var t=e.O();_N_E=t}]);